
ADC_P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800aee0  0800aee0  0001aee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b29c  0800b29c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b29c  0800b29c  0001b29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2a4  0800b2a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2a4  0800b2a4  0001b2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2a8  0800b2a8  0001b2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001e0  0800b48c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  0800b48c  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001952b  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d4  00000000  00000000  0003977e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003cc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001145  00000000  00000000  0003e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290f6  00000000  00000000  0003f3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2b8  00000000  00000000  000684ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb8a6  00000000  00000000  00084763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007058  00000000  00000000  0018000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00187064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aec8 	.word	0x0800aec8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800aec8 	.word	0x0800aec8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af04      	add	r7, sp, #16
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <BMP280_Read8+0x38>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b29a      	uxth	r2, r3
 800103a:	230a      	movs	r3, #10
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030f 	add.w	r3, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	21ec      	movs	r1, #236	; 0xec
 800104c:	f003 fab2 	bl	80045b4 <HAL_I2C_Mem_Read>
  return tmp;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001fc 	.word	0x200001fc

08001060 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <BMP280_Read16+0x40>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29a      	uxth	r2, r3
 8001072:	230a      	movs	r3, #10
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2302      	movs	r3, #2
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	21ec      	movs	r1, #236	; 0xec
 8001084:	f003 fa96 	bl	80045b4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001fc 	.word	0x200001fc

080010a4 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ffd5 	bl	8001060 <BMP280_Read16>
 80010b6:	4603      	mov	r3, r0
 80010b8:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <BMP280_Write8+0x34>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	230a      	movs	r3, #10
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	21ec      	movs	r1, #236	; 0xec
 8001100:	f003 f944 	bl	800438c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001fc 	.word	0x200001fc

08001110 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <BMP280_Read24+0x40>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	b29a      	uxth	r2, r3
 8001122:	230a      	movs	r3, #10
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2303      	movs	r3, #3
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	21ec      	movs	r1, #236	; 0xec
 8001134:	f003 fa3e 	bl	80045b4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4313      	orrs	r3, r2
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001fc 	.word	0x200001fc

08001154 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	70fb      	strb	r3, [r7, #3]
 8001166:	460b      	mov	r3, r1
 8001168:	70bb      	strb	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116e:	4a48      	ldr	r2, [pc, #288]	; (8001290 <BMP280_Init+0x13c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d901      	bls.n	800117e <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 800117a:	2303      	movs	r3, #3
 800117c:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <BMP280_Init+0x140>)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 800118a:	2300      	movs	r3, #0
 800118c:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d901      	bls.n	8001198 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001194:	2305      	movs	r3, #5
 8001196:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001198:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <BMP280_Init+0x144>)
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d901      	bls.n	80011a8 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a4:	2305      	movs	r3, #5
 80011a6:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <BMP280_Init+0x148>)
 80011aa:	78bb      	ldrb	r3, [r7, #2]
 80011ac:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011ae:	bf00      	nop
 80011b0:	20d0      	movs	r0, #208	; 0xd0
 80011b2:	f7ff ff37 	bl	8001024 <BMP280_Read8>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b58      	cmp	r3, #88	; 0x58
 80011ba:	d1f9      	bne.n	80011b0 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011bc:	2088      	movs	r0, #136	; 0x88
 80011be:	f7ff ff71 	bl	80010a4 <BMP280_Read16LE>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <BMP280_Init+0x14c>)
 80011c8:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011ca:	208a      	movs	r0, #138	; 0x8a
 80011cc:	f7ff ff6a 	bl	80010a4 <BMP280_Read16LE>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <BMP280_Init+0x150>)
 80011d6:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d8:	208c      	movs	r0, #140	; 0x8c
 80011da:	f7ff ff63 	bl	80010a4 <BMP280_Read16LE>
 80011de:	4603      	mov	r3, r0
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <BMP280_Init+0x154>)
 80011e4:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e6:	208e      	movs	r0, #142	; 0x8e
 80011e8:	f7ff ff5c 	bl	80010a4 <BMP280_Read16LE>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <BMP280_Init+0x158>)
 80011f2:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f4:	2090      	movs	r0, #144	; 0x90
 80011f6:	f7ff ff55 	bl	80010a4 <BMP280_Read16LE>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <BMP280_Init+0x15c>)
 8001200:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001202:	2092      	movs	r0, #146	; 0x92
 8001204:	f7ff ff4e 	bl	80010a4 <BMP280_Read16LE>
 8001208:	4603      	mov	r3, r0
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <BMP280_Init+0x160>)
 800120e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001210:	2094      	movs	r0, #148	; 0x94
 8001212:	f7ff ff47 	bl	80010a4 <BMP280_Read16LE>
 8001216:	4603      	mov	r3, r0
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <BMP280_Init+0x164>)
 800121c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121e:	2096      	movs	r0, #150	; 0x96
 8001220:	f7ff ff40 	bl	80010a4 <BMP280_Read16LE>
 8001224:	4603      	mov	r3, r0
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <BMP280_Init+0x168>)
 800122a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800122c:	2098      	movs	r0, #152	; 0x98
 800122e:	f7ff ff39 	bl	80010a4 <BMP280_Read16LE>
 8001232:	4603      	mov	r3, r0
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <BMP280_Init+0x16c>)
 8001238:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800123a:	209a      	movs	r0, #154	; 0x9a
 800123c:	f7ff ff32 	bl	80010a4 <BMP280_Read16LE>
 8001240:	4603      	mov	r3, r0
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <BMP280_Init+0x170>)
 8001246:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001248:	209c      	movs	r0, #156	; 0x9c
 800124a:	f7ff ff2b 	bl	80010a4 <BMP280_Read16LE>
 800124e:	4603      	mov	r3, r0
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <BMP280_Init+0x174>)
 8001254:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001256:	209e      	movs	r0, #158	; 0x9e
 8001258:	f7ff ff24 	bl	80010a4 <BMP280_Read16LE>
 800125c:	4603      	mov	r3, r0
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <BMP280_Init+0x178>)
 8001262:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	b25a      	sxtb	r2, r3
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25a      	sxtb	r2, r3
 8001274:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001278:	4313      	orrs	r3, r2
 800127a:	b25b      	sxtb	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	20f4      	movs	r0, #244	; 0xf4
 8001282:	f7ff ff29 	bl	80010d8 <BMP280_Write8>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001fc 	.word	0x200001fc
 8001294:	20000202 	.word	0x20000202
 8001298:	20000200 	.word	0x20000200
 800129c:	20000201 	.word	0x20000201
 80012a0:	20000218 	.word	0x20000218
 80012a4:	20000204 	.word	0x20000204
 80012a8:	20000206 	.word	0x20000206
 80012ac:	2000021a 	.word	0x2000021a
 80012b0:	20000208 	.word	0x20000208
 80012b4:	2000020a 	.word	0x2000020a
 80012b8:	2000020c 	.word	0x2000020c
 80012bc:	2000020e 	.word	0x2000020e
 80012c0:	20000210 	.word	0x20000210
 80012c4:	20000212 	.word	0x20000212
 80012c8:	20000214 	.word	0x20000214
 80012cc:	20000216 	.word	0x20000216

080012d0 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <BMP280_ReadTemperature+0xfc>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d16d      	bne.n	80013ba <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012de:	20f4      	movs	r0, #244	; 0xf4
 80012e0:	f7ff fea0 	bl	8001024 <BMP280_Read8>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	4619      	mov	r1, r3
 80012fc:	20f4      	movs	r0, #244	; 0xf4
 80012fe:	f7ff feeb 	bl	80010d8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001302:	20f4      	movs	r0, #244	; 0xf4
 8001304:	f7ff fe8e 	bl	8001024 <BMP280_Read8>
 8001308:	4603      	mov	r3, r0
 800130a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d14f      	bne.n	80013ba <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800131a:	20f4      	movs	r0, #244	; 0xf4
 800131c:	f7ff fe82 	bl	8001024 <BMP280_Read8>
 8001320:	4603      	mov	r3, r0
 8001322:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d000      	beq.n	8001334 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001332:	e7f2      	b.n	800131a <BMP280_ReadTemperature+0x4a>
				  break;
 8001334:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001336:	20fa      	movs	r0, #250	; 0xfa
 8001338:	f7ff feea 	bl	8001110 <BMP280_Read24>
 800133c:	4603      	mov	r3, r0
 800133e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	111b      	asrs	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	10da      	asrs	r2, r3, #3
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <BMP280_ReadTemperature+0x104>)
 8001354:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	12db      	asrs	r3, r3, #11
 800135e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	111b      	asrs	r3, r3, #4
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	1112      	asrs	r2, r2, #4
 800136e:	4918      	ldr	r1, [pc, #96]	; (80013d0 <BMP280_ReadTemperature+0x100>)
 8001370:	8809      	ldrh	r1, [r1, #0]
 8001372:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001374:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001378:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <BMP280_ReadTemperature+0x108>)
 800137c:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001380:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001384:	139b      	asrs	r3, r3, #14
 8001386:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <BMP280_ReadTemperature+0x10c>)
 8001390:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <BMP280_ReadTemperature+0x10c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3380      	adds	r3, #128	; 0x80
 800139e:	121b      	asrs	r3, r3, #8
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013e0 <BMP280_ReadTemperature+0x110>
 80013b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b8:	e001      	b.n	80013be <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e4 <BMP280_ReadTemperature+0x114>
}
 80013be:	eef0 7a47 	vmov.f32	s15, s14
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000202 	.word	0x20000202
 80013d0:	20000218 	.word	0x20000218
 80013d4:	20000204 	.word	0x20000204
 80013d8:	20000206 	.word	0x20000206
 80013dc:	2000021c 	.word	0x2000021c
 80013e0:	42c80000 	.word	0x42c80000
 80013e4:	c2c60000 	.word	0xc2c60000

080013e8 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0cc      	sub	sp, #304	; 0x130
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80013f4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f8:	f7ff ff6a 	bl	80012d0 <BMP280_ReadTemperature>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001404:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80016e0 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8001414:	eef4 7a47 	vcmp.f32	s15, s14
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d101      	bne.n	8001422 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 800141e:	23ff      	movs	r3, #255	; 0xff
 8001420:	e2bf      	b.n	80019a2 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001422:	20f7      	movs	r0, #247	; 0xf7
 8001424:	f7ff fe74 	bl	8001110 <BMP280_Read24>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001438:	4baa      	ldr	r3, [pc, #680]	; (80016e4 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	17da      	asrs	r2, r3, #31
 800143e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001442:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001446:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800144a:	460b      	mov	r3, r1
 800144c:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
 8001452:	4613      	mov	r3, r2
 8001454:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800145e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8001462:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001466:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800146a:	fb03 f102 	mul.w	r1, r3, r2
 800146e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001472:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	18ca      	adds	r2, r1, r3
 800147c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001480:	fba3 4503 	umull	r4, r5, r3, r3
 8001484:	1953      	adds	r3, r2, r5
 8001486:	461d      	mov	r5, r3
 8001488:	4b97      	ldr	r3, [pc, #604]	; (80016e8 <BMP280_ReadTemperatureAndPressure+0x300>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	17da      	asrs	r2, r3, #31
 8001492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001496:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800149a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800149e:	4603      	mov	r3, r0
 80014a0:	fb03 f205 	mul.w	r2, r3, r5
 80014a4:	460b      	mov	r3, r1
 80014a6:	fb04 f303 	mul.w	r3, r4, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	4602      	mov	r2, r0
 80014ae:	fba4 8902 	umull	r8, r9, r4, r2
 80014b2:	444b      	add	r3, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80014ba:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014be:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <BMP280_ReadTemperatureAndPressure+0x304>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	17da      	asrs	r2, r3, #31
 80014c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80014d8:	462a      	mov	r2, r5
 80014da:	fb02 f203 	mul.w	r2, r2, r3
 80014de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014e2:	4621      	mov	r1, r4
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	441a      	add	r2, r3
 80014ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ee:	4621      	mov	r1, r4
 80014f0:	fba3 ab01 	umull	sl, fp, r3, r1
 80014f4:	eb02 030b 	add.w	r3, r2, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001506:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800150a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800150e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001512:	1814      	adds	r4, r2, r0
 8001514:	643c      	str	r4, [r7, #64]	; 0x40
 8001516:	414b      	adcs	r3, r1
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
 800151a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800151e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <BMP280_ReadTemperatureAndPressure+0x308>)
 8001524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	17da      	asrs	r2, r3, #31
 800152c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001530:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001540:	00d9      	lsls	r1, r3, #3
 8001542:	2000      	movs	r0, #0
 8001544:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001548:	1814      	adds	r4, r2, r0
 800154a:	63bc      	str	r4, [r7, #56]	; 0x38
 800154c:	414b      	adcs	r3, r1
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001550:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001554:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001558:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800155c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001560:	fb03 f102 	mul.w	r1, r3, r2
 8001564:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	18ca      	adds	r2, r1, r3
 8001572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001576:	fba3 1303 	umull	r1, r3, r3, r3
 800157a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800157e:	460b      	mov	r3, r1
 8001580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	b21b      	sxth	r3, r3
 8001596:	17da      	asrs	r2, r3, #31
 8001598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800159c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015a0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015a4:	462b      	mov	r3, r5
 80015a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80015aa:	4642      	mov	r2, r8
 80015ac:	fb02 f203 	mul.w	r2, r2, r3
 80015b0:	464b      	mov	r3, r9
 80015b2:	4621      	mov	r1, r4
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	4622      	mov	r2, r4
 80015bc:	4641      	mov	r1, r8
 80015be:	fba2 1201 	umull	r1, r2, r2, r1
 80015c2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80015c6:	460a      	mov	r2, r1
 80015c8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80015cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015d0:	4413      	add	r3, r2
 80015d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015e2:	4623      	mov	r3, r4
 80015e4:	0a18      	lsrs	r0, r3, #8
 80015e6:	462b      	mov	r3, r5
 80015e8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ec:	462b      	mov	r3, r5
 80015ee:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800160a:	464a      	mov	r2, r9
 800160c:	fb02 f203 	mul.w	r2, r2, r3
 8001610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001614:	4644      	mov	r4, r8
 8001616:	fb04 f303 	mul.w	r3, r4, r3
 800161a:	441a      	add	r2, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	4644      	mov	r4, r8
 8001622:	fba3 4304 	umull	r4, r3, r3, r4
 8001626:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800162a:	4623      	mov	r3, r4
 800162c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001646:	464c      	mov	r4, r9
 8001648:	0323      	lsls	r3, r4, #12
 800164a:	4644      	mov	r4, r8
 800164c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001650:	4644      	mov	r4, r8
 8001652:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001654:	1884      	adds	r4, r0, r2
 8001656:	633c      	str	r4, [r7, #48]	; 0x30
 8001658:	eb41 0303 	adc.w	r3, r1, r3
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
 800165e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001662:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001666:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800166a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800166e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001672:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <BMP280_ReadTemperatureAndPressure+0x314>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	2200      	movs	r2, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001686:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800168a:	462b      	mov	r3, r5
 800168c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001690:	4642      	mov	r2, r8
 8001692:	fb02 f203 	mul.w	r2, r2, r3
 8001696:	464b      	mov	r3, r9
 8001698:	4621      	mov	r1, r4
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	4622      	mov	r2, r4
 80016a2:	4641      	mov	r1, r8
 80016a4:	fba2 1201 	umull	r1, r2, r2, r1
 80016a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016ac:	460a      	mov	r2, r1
 80016ae:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80016b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80016b6:	4413      	add	r3, r2
 80016b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016c8:	4629      	mov	r1, r5
 80016ca:	104a      	asrs	r2, r1, #1
 80016cc:	4629      	mov	r1, r5
 80016ce:	17cb      	asrs	r3, r1, #31
 80016d0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 80016d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016d8:	4313      	orrs	r3, r2
 80016da:	d111      	bne.n	8001700 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016dc:	2300      	movs	r3, #0
 80016de:	e160      	b.n	80019a2 <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016e0:	c2c60000 	.word	0xc2c60000
 80016e4:	2000021c 	.word	0x2000021c
 80016e8:	20000210 	.word	0x20000210
 80016ec:	2000020e 	.word	0x2000020e
 80016f0:	2000020c 	.word	0x2000020c
 80016f4:	2000020a 	.word	0x2000020a
 80016f8:	20000208 	.word	0x20000208
 80016fc:	2000021a 	.word	0x2000021a
	  }
	  p = 1048576 - adc_P;
 8001700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001704:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800170e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001712:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800171a:	105b      	asrs	r3, r3, #1
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001724:	07db      	lsls	r3, r3, #31
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800172a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800172e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001732:	4621      	mov	r1, r4
 8001734:	1a89      	subs	r1, r1, r2
 8001736:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800173a:	4629      	mov	r1, r5
 800173c:	eb61 0303 	sbc.w	r3, r1, r3
 8001740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001744:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001748:	4622      	mov	r2, r4
 800174a:	462b      	mov	r3, r5
 800174c:	1891      	adds	r1, r2, r2
 800174e:	6239      	str	r1, [r7, #32]
 8001750:	415b      	adcs	r3, r3
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001758:	4621      	mov	r1, r4
 800175a:	1851      	adds	r1, r2, r1
 800175c:	61b9      	str	r1, [r7, #24]
 800175e:	4629      	mov	r1, r5
 8001760:	414b      	adcs	r3, r1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001770:	4649      	mov	r1, r9
 8001772:	018b      	lsls	r3, r1, #6
 8001774:	4641      	mov	r1, r8
 8001776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177a:	4641      	mov	r1, r8
 800177c:	018a      	lsls	r2, r1, #6
 800177e:	4641      	mov	r1, r8
 8001780:	1889      	adds	r1, r1, r2
 8001782:	6139      	str	r1, [r7, #16]
 8001784:	4649      	mov	r1, r9
 8001786:	eb43 0101 	adc.w	r1, r3, r1
 800178a:	6179      	str	r1, [r7, #20]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001798:	4649      	mov	r1, r9
 800179a:	008b      	lsls	r3, r1, #2
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017a2:	4641      	mov	r1, r8
 80017a4:	008a      	lsls	r2, r1, #2
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	4622      	mov	r2, r4
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	460b      	mov	r3, r1
 80017b4:	462a      	mov	r2, r5
 80017b6:	eb42 0303 	adc.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017c8:	4649      	mov	r1, r9
 80017ca:	008b      	lsls	r3, r1, #2
 80017cc:	4641      	mov	r1, r8
 80017ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017d2:	4641      	mov	r1, r8
 80017d4:	008a      	lsls	r2, r1, #2
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	4622      	mov	r2, r4
 80017de:	189b      	adds	r3, r3, r2
 80017e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017e2:	462b      	mov	r3, r5
 80017e4:	460a      	mov	r2, r1
 80017e6:	eb42 0303 	adc.w	r3, r2, r3
 80017ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017f4:	f7ff fa48 	bl	8000c88 <__aeabi_ldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	b21b      	sxth	r3, r3
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	673b      	str	r3, [r7, #112]	; 0x70
 800180c:	677a      	str	r2, [r7, #116]	; 0x74
 800180e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0b50      	lsrs	r0, r2, #13
 800181c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001820:	1359      	asrs	r1, r3, #13
 8001822:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001826:	462b      	mov	r3, r5
 8001828:	fb00 f203 	mul.w	r2, r0, r3
 800182c:	4623      	mov	r3, r4
 800182e:	fb03 f301 	mul.w	r3, r3, r1
 8001832:	4413      	add	r3, r2
 8001834:	4622      	mov	r2, r4
 8001836:	fba2 1200 	umull	r1, r2, r2, r0
 800183a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800183e:	460a      	mov	r2, r1
 8001840:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001844:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001848:	4413      	add	r3, r2
 800184a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800184e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	0b50      	lsrs	r0, r2, #13
 800185c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001860:	1359      	asrs	r1, r3, #13
 8001862:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001866:	462b      	mov	r3, r5
 8001868:	fb00 f203 	mul.w	r2, r0, r3
 800186c:	4623      	mov	r3, r4
 800186e:	fb03 f301 	mul.w	r3, r3, r1
 8001872:	4413      	add	r3, r2
 8001874:	4622      	mov	r2, r4
 8001876:	fba2 1200 	umull	r1, r2, r2, r0
 800187a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800187e:	460a      	mov	r2, r1
 8001880:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001884:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001888:	4413      	add	r3, r2
 800188a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800189a:	4621      	mov	r1, r4
 800189c:	0e4a      	lsrs	r2, r1, #25
 800189e:	4629      	mov	r1, r5
 80018a0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018a4:	4629      	mov	r1, r5
 80018a6:	164b      	asrs	r3, r1, #25
 80018a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	17da      	asrs	r2, r3, #31
 80018b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80018b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018be:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018c2:	462a      	mov	r2, r5
 80018c4:	fb02 f203 	mul.w	r2, r2, r3
 80018c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018cc:	4621      	mov	r1, r4
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018d8:	4621      	mov	r1, r4
 80018da:	fba2 1201 	umull	r1, r2, r2, r1
 80018de:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018e2:	460a      	mov	r2, r1
 80018e4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018e8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018ec:	4413      	add	r3, r2
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018fe:	4621      	mov	r1, r4
 8001900:	0cca      	lsrs	r2, r1, #19
 8001902:	4629      	mov	r1, r5
 8001904:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001908:	4629      	mov	r1, r5
 800190a:	14cb      	asrs	r3, r1, #19
 800190c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001910:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001914:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001918:	1884      	adds	r4, r0, r2
 800191a:	663c      	str	r4, [r7, #96]	; 0x60
 800191c:	eb41 0303 	adc.w	r3, r1, r3
 8001920:	667b      	str	r3, [r7, #100]	; 0x64
 8001922:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001926:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800192a:	4621      	mov	r1, r4
 800192c:	1889      	adds	r1, r1, r2
 800192e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001930:	4629      	mov	r1, r5
 8001932:	eb43 0101 	adc.w	r1, r3, r1
 8001936:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001944:	4623      	mov	r3, r4
 8001946:	0a18      	lsrs	r0, r3, #8
 8001948:	462b      	mov	r3, r5
 800194a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800194e:	462b      	mov	r3, r5
 8001950:	1219      	asrs	r1, r3, #8
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b21b      	sxth	r3, r3
 800195a:	17da      	asrs	r2, r3, #31
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
 800195e:	657a      	str	r2, [r7, #84]	; 0x54
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800196c:	464c      	mov	r4, r9
 800196e:	0123      	lsls	r3, r4, #4
 8001970:	4644      	mov	r4, r8
 8001972:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001976:	4644      	mov	r4, r8
 8001978:	0122      	lsls	r2, r4, #4
 800197a:	1884      	adds	r4, r0, r2
 800197c:	603c      	str	r4, [r7, #0]
 800197e:	eb41 0303 	adc.w	r3, r1, r3
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001988:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 800198c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001990:	2b00      	cmp	r3, #0
 8001992:	da00      	bge.n	8001996 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001994:	33ff      	adds	r3, #255	; 0xff
 8001996:	121b      	asrs	r3, r3, #8
 8001998:	461a      	mov	r2, r3
 800199a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800199e:	601a      	str	r2, [r3, #0]

	  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	20000216 	.word	0x20000216
 80019b4:	20000214 	.word	0x20000214
 80019b8:	20000212 	.word	0x20000212

080019bc <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f023 030f 	bic.w	r3, r3, #15
 80019cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	f043 030c 	orr.w	r3, r3, #12
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	f043 030c 	orr.w	r3, r3, #12
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019fc:	f107 0208 	add.w	r2, r7, #8
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2304      	movs	r3, #4
 8001a06:	214e      	movs	r1, #78	; 0x4e
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <lcd_send_cmd+0x5c>)
 8001a0a:	f002 fbcb 	bl	80041a4 <HAL_I2C_Master_Transmit>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002bc 	.word	0x200002bc

08001a1c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f043 030d 	orr.w	r3, r3, #13
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f043 0309 	orr.w	r3, r3, #9
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	f043 030d 	orr.w	r3, r3, #13
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	f043 0309 	orr.w	r3, r3, #9
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	2364      	movs	r3, #100	; 0x64
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2304      	movs	r3, #4
 8001a66:	214e      	movs	r1, #78	; 0x4e
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <lcd_send_data+0x5c>)
 8001a6a:	f002 fb9b 	bl	80041a4 <HAL_I2C_Master_Transmit>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002bc 	.word	0x200002bc

08001a7c <lcd_clear>:

void lcd_clear (void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001a82:	2080      	movs	r0, #128	; 0x80
 8001a84:	f7ff ff9a 	bl	80019bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e005      	b.n	8001a9a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001a8e:	2020      	movs	r0, #32
 8001a90:	f7ff ffc4 	bl	8001a1c <lcd_send_data>
	for (int i=0; i<70; i++)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b45      	cmp	r3, #69	; 0x45
 8001a9e:	ddf6      	ble.n	8001a8e <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f804 	bl	8001ab0 <lcd_put_cur>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    switch (row)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <lcd_put_cur+0x18>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <lcd_put_cur+0x22>
 8001ac6:	e009      	b.n	8001adc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ace:	603b      	str	r3, [r7, #0]
            break;
 8001ad0:	e004      	b.n	8001adc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ad8:	603b      	str	r3, [r7, #0]
            break;
 8001ada:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff6b 	bl	80019bc <lcd_send_cmd>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lcd_init>:


void lcd_init (void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f001 f9c8 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001af8:	2030      	movs	r0, #48	; 0x30
 8001afa:	f7ff ff5f 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001afe:	2005      	movs	r0, #5
 8001b00:	f001 f9c2 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b04:	2030      	movs	r0, #48	; 0x30
 8001b06:	f7ff ff59 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f001 f9bc 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b10:	2030      	movs	r0, #48	; 0x30
 8001b12:	f7ff ff53 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(10);
 8001b16:	200a      	movs	r0, #10
 8001b18:	f001 f9b6 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001b1c:	2020      	movs	r0, #32
 8001b1e:	f7ff ff4d 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(10);
 8001b22:	200a      	movs	r0, #10
 8001b24:	f001 f9b0 	bl	8002e88 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b28:	2028      	movs	r0, #40	; 0x28
 8001b2a:	f7ff ff47 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f001 f9aa 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b34:	2008      	movs	r0, #8
 8001b36:	f7ff ff41 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 f9a4 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff ff3b 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f001 f99e 	bl	8002e88 <HAL_Delay>
	HAL_Delay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f001 f99b 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b52:	2006      	movs	r0, #6
 8001b54:	f7ff ff32 	bl	80019bc <lcd_send_cmd>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f001 f995 	bl	8002e88 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f7ff ff2c 	bl	80019bc <lcd_send_cmd>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	while (*str)
 8001b70:	e006      	b.n	8001b80 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff4e 	bl	8001a1c <lcd_send_data>
	while (*str)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f4      	bne.n	8001b72 <lcd_send_string+0xa>
	}
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <regulator>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float regulator(float in, int i, float roznica) {
 8001b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b98:	b088      	sub	sp, #32
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ba0:	60b8      	str	r0, [r7, #8]
 8001ba2:	edc7 0a01 	vstr	s1, [r7, #4]

	//Oblcizany czas próbkowania
	unsigned long now = HAL_GetTick();
 8001ba6:	f001 f963 	bl	8002e70 <HAL_GetTick>
 8001baa:	61f8      	str	r0, [r7, #28]
	double timeChange = (double)(now - lastTime);
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <regulator+0x1c0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcc5 	bl	8000544 <__aeabi_ui2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	static const float ki = 0.014657;
	// POPRZEDNIA PRÓBKA (do wyznaczania całki oraz różniczki)
	static float in_before = 0.0;

	//Wyznaczenie parametrów regulatora
	P = in*kp;
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <regulator+0x1c4>)
 8001bc4:	ed93 7a00 	vldr	s14, [r3]
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <regulator+0x1c8>)
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
	//Dodane wzmocnienie dla pętli anty-windup
	if (i == 1)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d15a      	bne.n	8001c92 <regulator+0xfe>
			{I = (I + (ki * (((in + in_before) * timeChange/1000) / 2))) + wzmI*roznica;}
 8001bdc:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <regulator+0x1cc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcd1 	bl	8000588 <__aeabi_f2d>
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
 8001bea:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <regulator+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcca 	bl	8000588 <__aeabi_f2d>
 8001bf4:	4680      	mov	r8, r0
 8001bf6:	4689      	mov	r9, r1
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <regulator+0x1d4>)
 8001bfa:	ed93 7a00 	vldr	s14, [r3]
 8001bfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	ee17 0a90 	vmov	r0, s15
 8001c0a:	f7fe fcbd 	bl	8000588 <__aeabi_f2d>
 8001c0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c12:	f7fe fd11 	bl	8000638 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <regulator+0x1d8>)
 8001c24:	f7fe fe32 	bl	800088c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c38:	f7fe fe28 	bl	800088c <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fcf8 	bl	8000638 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb3c 	bl	80002cc <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <regulator+0x1dc>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc8b 	bl	8000588 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4620      	mov	r0, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7fe fb27 	bl	80002cc <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe ffaf 	bl	8000be8 <__aeabi_d2f>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <regulator+0x1cc>)
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e044      	b.n	8001d1c <regulator+0x188>
	else
		I = (I + (ki * (((in + in_before) * timeChange/1000) / 2)));
 8001c92:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <regulator+0x1cc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc76 	bl	8000588 <__aeabi_f2d>
 8001c9c:	4604      	mov	r4, r0
 8001c9e:	460d      	mov	r5, r1
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <regulator+0x1d0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc6f 	bl	8000588 <__aeabi_f2d>
 8001caa:	4680      	mov	r8, r0
 8001cac:	4689      	mov	r9, r1
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <regulator+0x1d4>)
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	ee17 0a90 	vmov	r0, s15
 8001cc0:	f7fe fc62 	bl	8000588 <__aeabi_f2d>
 8001cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cc8:	f7fe fcb6 	bl	8000638 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <regulator+0x1d8>)
 8001cda:	f7fe fdd7 	bl	800088c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cee:	f7fe fdcd 	bl	800088c <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fc9d 	bl	8000638 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fae1 	bl	80002cc <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe ff69 	bl	8000be8 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <regulator+0x1cc>)
 8001d1a:	6013      	str	r3, [r2, #0]

	// Obliczenie sygnału sterującego PWM oraz podanie czasu pobrania kolejnej próbki
	in_before = in;
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <regulator+0x1d4>)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6013      	str	r3, [r2, #0]
	Y = P + I;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <regulator+0x1c8>)
 8001d24:	ed93 7a00 	vldr	s14, [r3]
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <regulator+0x1cc>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <regulator+0x1e0>)
 8001d34:	edc3 7a00 	vstr	s15, [r3]

	lastTime = now;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <regulator+0x1c0>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	6013      	str	r3, [r2, #0]

	return Y;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <regulator+0x1e0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	ee07 3a90 	vmov	s15, r3
}
 8001d46:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d52:	bf00      	nop
 8001d54:	200008ec 	.word	0x200008ec
 8001d58:	0800af08 	.word	0x0800af08
 8001d5c:	200008f4 	.word	0x200008f4
 8001d60:	20000908 	.word	0x20000908
 8001d64:	0800af0c 	.word	0x0800af0c
 8001d68:	20000914 	.word	0x20000914
 8001d6c:	408f4000 	.word	0x408f4000
 8001d70:	20000004 	.word	0x20000004
 8001d74:	200008f0 	.word	0x200008f0

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7e:	f001 f826 	bl	8002dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d82:	f000 f943 	bl	800200c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d86:	f000 fb51 	bl	800242c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d8a:	f000 faf1 	bl	8002370 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d8e:	f000 fb1f 	bl	80023d0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001d92:	f000 f9a3 	bl	80020dc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d96:	f000 f9f3 	bl	8002180 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001d9a:	f000 fa31 	bl	8002200 <MX_I2C4_Init>
  MX_TIM4_Init();
 8001d9e:	f000 fa6f 	bl	8002280 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Czujnik temperatury
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001da2:	2301      	movs	r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	2101      	movs	r1, #1
 8001da8:	4885      	ldr	r0, [pc, #532]	; (8001fc0 <main+0x248>)
 8001daa:	f7ff f9d3 	bl	8001154 <BMP280_Init>

  //Wyświetlacz LCD
  lcd_init ();
 8001dae:	f7ff fe9e 	bl	8001aee <lcd_init>

  //Sygnał PWM podawany na bazę tranzystora
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001db2:	2100      	movs	r1, #0
 8001db4:	4883      	ldr	r0, [pc, #524]	; (8001fc4 <main+0x24c>)
 8001db6:	f004 fb13 	bl	80063e0 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Odczyt temperatury i ciśnienia
 	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001dba:	4983      	ldr	r1, [pc, #524]	; (8001fc8 <main+0x250>)
 8001dbc:	4883      	ldr	r0, [pc, #524]	; (8001fcc <main+0x254>)
 8001dbe:	f7ff fb13 	bl	80013e8 <BMP280_ReadTemperatureAndPressure>
 	  	  //Zamiana na hPa
 	  	  pressure = pressure/100;
 8001dc2:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <main+0x250>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a82      	ldr	r2, [pc, #520]	; (8001fd0 <main+0x258>)
 8001dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dcc:	1152      	asrs	r2, r2, #5
 8001dce:	17db      	asrs	r3, r3, #31
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	; (8001fc8 <main+0x250>)
 8001dd4:	6013      	str	r3, [r2, #0]

	  	  // Przesyłanie wartości temperatury przez UART
	  	  sprintf((char*)text, "%.2f, ", temperature);					// Formatowanie wartości temperatury z dwoma miejscami po przecinku
 8001dd6:	4b7d      	ldr	r3, [pc, #500]	; (8001fcc <main+0x254>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbd4 	bl	8000588 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4638      	mov	r0, r7
 8001de6:	497b      	ldr	r1, [pc, #492]	; (8001fd4 <main+0x25c>)
 8001de8:	f006 ff10 	bl	8008c0c <siprintf>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);	 // Przesłanie sformatowanego tekstu przez UART
 8001dec:	463b      	mov	r3, r7
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fa5e 	bl	80002b0 <strlen>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4639      	mov	r1, r7
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	4876      	ldr	r0, [pc, #472]	; (8001fd8 <main+0x260>)
 8001e00:	f005 fa60 	bl	80072c4 <HAL_UART_Transmit>

	  	  lcd_clear ();
 8001e04:	f7ff fe3a 	bl	8001a7c <lcd_clear>
	  	  lcd_put_cur(0, 0);											// Ustawienie kursora na początkową pozycję
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fe50 	bl	8001ab0 <lcd_put_cur>
	  	  sprintf((char*)text, "Temp.  %.2f  C", temperature);			// Tworzenie tekstu z aktualną temperaturą
 8001e10:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <main+0x254>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbb7 	bl	8000588 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4638      	mov	r0, r7
 8001e20:	496e      	ldr	r1, [pc, #440]	; (8001fdc <main+0x264>)
 8001e22:	f006 fef3 	bl	8008c0c <siprintf>
	  	  lcd_send_string(text);
 8001e26:	463b      	mov	r3, r7
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fe9d 	bl	8001b68 <lcd_send_string>
	  	  lcd_put_cur(1, 0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff fe3d 	bl	8001ab0 <lcd_put_cur>

	  	  // Pomiar wartości na kanale ADC
	  	  HAL_ADC_Start(&hadc1); 										// Rozpoczęcie konwersji ADC na kanale hadc1
 8001e36:	486a      	ldr	r0, [pc, #424]	; (8001fe0 <main+0x268>)
 8001e38:	f001 f88e 	bl	8002f58 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);				// Oczekiwanie na zakończenie konwersji ADC w trybie Polling
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	4867      	ldr	r0, [pc, #412]	; (8001fe0 <main+0x268>)
 8001e42:	f001 f957 	bl	80030f4 <HAL_ADC_PollForConversion>
	  	  AdcValue = HAL_ADC_GetValue(&hadc1);							// Odczytanie wartości
 8001e46:	4866      	ldr	r0, [pc, #408]	; (8001fe0 <main+0x268>)
 8001e48:	f001 fbc8 	bl	80035dc <HAL_ADC_GetValue>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <main+0x26c>)
 8001e52:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_Start_IT(&hadc1);										// Ponowne uruchomienie konwersji ADC w trybie przerwań
 8001e54:	4862      	ldr	r0, [pc, #392]	; (8001fe0 <main+0x268>)
 8001e56:	f001 f9d9 	bl	800320c <HAL_ADC_Start_IT>
	  	  HAL_Delay(100);
 8001e5a:	2064      	movs	r0, #100	; 0x64
 8001e5c:	f001 f814 	bl	8002e88 <HAL_Delay>


	  	  sprintf((char*)text, "T_zad. %.2f  C", temp_zadana);
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <main+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb8f 	bl	8000588 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4638      	mov	r0, r7
 8001e70:	495e      	ldr	r1, [pc, #376]	; (8001fec <main+0x274>)
 8001e72:	f006 fecb 	bl	8008c0c <siprintf>
	  	  lcd_send_string(text);
 8001e76:	463b      	mov	r3, r7
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe75 	bl	8001b68 <lcd_send_string>

	  	  //Obliczana wartość uchybu w stopniach oraz sygnału sterującego w % wypełnienia
	  	  error = temp_zadana-temperature;
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <main+0x270>)
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <main+0x254>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8e:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <main+0x278>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]
	  	  wypelnienie = regulator(error, i, roznica);
 8001e94:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <main+0x278>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <main+0x27c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <main+0x280>)
 8001ea0:	ed92 7a00 	vldr	s14, [r2]
 8001ea4:	eef0 0a47 	vmov.f32	s1, s14
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	f7ff fe71 	bl	8001b94 <regulator>
 8001eb2:	eef0 7a40 	vmov.f32	s15, s0
 8001eb6:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <main+0x284>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]

	  	  if (wypelnienie >= 0){
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <main+0x284>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	db36      	blt.n	8001f3a <main+0x1c2>
	  		  //100% wypełnienia to wartość 1000 jako argument funkcji
	  		  wypelnienie = wypelnienie*10;
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <main+0x284>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <main+0x284>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]

	  		  //Ograniczenie sygnału sterującego
	  		  if(wypelnienie > 1000){
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <main+0x284>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002000 <main+0x288>
 8001eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	dd10      	ble.n	8001f16 <main+0x19e>
	  			  //Różnica przechodzi w sprzężeniu zwrotnym do częsci całkującej
	  			  roznica = 1000-wypelnienie;
 8001ef4:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <main+0x284>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002000 <main+0x288>
 8001efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <main+0x280>)
 8001f04:	edc3 7a00 	vstr	s15, [r3]
	  			  wypelnienie = 1000;
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <main+0x284>)
 8001f0a:	4a3e      	ldr	r2, [pc, #248]	; (8002004 <main+0x28c>)
 8001f0c:	601a      	str	r2, [r3, #0]
	  			  i = 1;
 8001f0e:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <main+0x27c>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e02e      	b.n	8001f74 <main+0x1fc>
	  		  }
	  		  else{
	  			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, wypelnienie);
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <main+0x284>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <main+0x24c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f24:	ee17 2a90 	vmov	r2, s15
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
	  			  i = 0;
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <main+0x27c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
	  			  roznica = 0;}
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <main+0x280>)
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e01c      	b.n	8001f74 <main+0x1fc>
	  	  	  }
	  	  else if (wypelnienie < 0 ){
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <main+0x284>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f48:	d514      	bpl.n	8001f74 <main+0x1fc>
	  		//Ograniczenie sygnału sterującego
	  	  	  wypelnienie = 0;
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <main+0x284>)
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
	  	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, wypelnienie);
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <main+0x284>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <main+0x24c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f60:	ee17 2a90 	vmov	r2, s15
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	i = 0 ;
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <main+0x27c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
	  	  	roznica = 0;
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <main+0x280>)
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
	  	  	}
	  	  if(temp_zadana<temperature){
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <main+0x270>)
 8001f76:	ed93 7a00 	vldr	s14, [r3]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <main+0x254>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	d50a      	bpl.n	8001fa0 <main+0x228>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	481e      	ldr	r0, [pc, #120]	; (8002008 <main+0x290>)
 8001f90:	f002 f85e 	bl	8004050 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <main+0x290>)
 8001f9a:	f002 f859 	bl	8004050 <HAL_GPIO_WritePin>
 8001f9e:	e009      	b.n	8001fb4 <main+0x23c>
	  	  }
	  	  else{
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4818      	ldr	r0, [pc, #96]	; (8002008 <main+0x290>)
 8001fa6:	f002 f853 	bl	8004050 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	4816      	ldr	r0, [pc, #88]	; (8002008 <main+0x290>)
 8001fb0:	f002 f84e 	bl	8004050 <HAL_GPIO_WritePin>
	  	  }

	  	  HAL_Delay(500);
 8001fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fb8:	f000 ff66 	bl	8002e88 <HAL_Delay>
 	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001fbc:	e6fd      	b.n	8001dba <main+0x42>
 8001fbe:	bf00      	nop
 8001fc0:	20000268 	.word	0x20000268
 8001fc4:	20000310 	.word	0x20000310
 8001fc8:	200008f8 	.word	0x200008f8
 8001fcc:	200008fc 	.word	0x200008fc
 8001fd0:	51eb851f 	.word	0x51eb851f
 8001fd4:	0800aee0 	.word	0x0800aee0
 8001fd8:	2000035c 	.word	0x2000035c
 8001fdc:	0800aee8 	.word	0x0800aee8
 8001fe0:	20000220 	.word	0x20000220
 8001fe4:	20000910 	.word	0x20000910
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	0800aef8 	.word	0x0800aef8
 8001ff0:	20000900 	.word	0x20000900
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	2000090c 	.word	0x2000090c
 8001ffc:	20000904 	.word	0x20000904
 8002000:	447a0000 	.word	0x447a0000
 8002004:	447a0000 	.word	0x447a0000
 8002008:	40020c00 	.word	0x40020c00

0800200c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	; 0x50
 8002010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002012:	f107 0320 	add.w	r3, r7, #32
 8002016:	2230      	movs	r2, #48	; 0x30
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f006 fe59 	bl	8008cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002030:	f003 f854 	bl	80050dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <SystemClock_Config+0xc8>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <SystemClock_Config+0xc8>)
 800203a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203e:	6413      	str	r3, [r2, #64]	; 0x40
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <SystemClock_Config+0xc8>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <SystemClock_Config+0xcc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <SystemClock_Config+0xcc>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <SystemClock_Config+0xcc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800206c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002072:	2302      	movs	r3, #2
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800207c:	2304      	movs	r3, #4
 800207e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002080:	2348      	movs	r3, #72	; 0x48
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002084:	2302      	movs	r3, #2
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002088:	2303      	movs	r3, #3
 800208a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208c:	f107 0320 	add.w	r3, r7, #32
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f833 	bl	80050fc <HAL_RCC_OscConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800209c:	f000 fb16 	bl	80026cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a0:	230f      	movs	r3, #15
 80020a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	2102      	movs	r1, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fac1 	bl	8005644 <HAL_RCC_ClockConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020c8:	f000 fb00 	bl	80026cc <Error_Handler>
  }
}
 80020cc:	bf00      	nop
 80020ce:	3750      	adds	r7, #80	; 0x50
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020e2:	463b      	mov	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <MX_ADC1_Init+0x98>)
 80020f0:	4a21      	ldr	r2, [pc, #132]	; (8002178 <MX_ADC1_Init+0x9c>)
 80020f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_ADC1_Init+0x98>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <MX_ADC1_Init+0x98>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_ADC1_Init+0x98>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <MX_ADC1_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_ADC1_Init+0x98>)
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_ADC1_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_ADC1_Init+0x98>)
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <MX_ADC1_Init+0xa0>)
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_ADC1_Init+0x98>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_ADC1_Init+0x98>)
 8002128:	2201      	movs	r2, #1
 800212a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_ADC1_Init+0x98>)
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_ADC1_Init+0x98>)
 8002136:	2201      	movs	r2, #1
 8002138:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800213a:	480e      	ldr	r0, [pc, #56]	; (8002174 <MX_ADC1_Init+0x98>)
 800213c:	f000 fec8 	bl	8002ed0 <HAL_ADC_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002146:	f000 fac1 	bl	80026cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800214a:	2303      	movs	r3, #3
 800214c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800214e:	2301      	movs	r3, #1
 8002150:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002156:	463b      	mov	r3, r7
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <MX_ADC1_Init+0x98>)
 800215c:	f001 fa60 	bl	8003620 <HAL_ADC_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002166:	f000 fab1 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000220 	.word	0x20000220
 8002178:	40012000 	.word	0x40012000
 800217c:	0f000001 	.word	0x0f000001

08002180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_I2C1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_I2C1_Init+0x74>)
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <MX_I2C1_Init+0x7c>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002198:	2201      	movs	r2, #1
 800219a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_I2C1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021bc:	f001 ff62 	bl	8004084 <HAL_I2C_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021c6:	f000 fa81 	bl	80026cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021ce:	f002 fda5 	bl	8004d1c <HAL_I2CEx_ConfigAnalogFilter>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 fa78 	bl	80026cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021e0:	f002 fde7 	bl	8004db2 <HAL_I2CEx_ConfigDigitalFilter>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f000 fa6f 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000268 	.word	0x20000268
 80021f8:	40005400 	.word	0x40005400
 80021fc:	00808cd2 	.word	0x00808cd2

08002200 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <MX_I2C4_Init+0x74>)
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <MX_I2C4_Init+0x78>)
 8002208:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <MX_I2C4_Init+0x74>)
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <MX_I2C4_Init+0x7c>)
 800220e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <MX_I2C4_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <MX_I2C4_Init+0x74>)
 8002218:	2201      	movs	r2, #1
 800221a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800221c:	4b15      	ldr	r3, [pc, #84]	; (8002274 <MX_I2C4_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <MX_I2C4_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MX_I2C4_Init+0x74>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_I2C4_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MX_I2C4_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800223a:	480e      	ldr	r0, [pc, #56]	; (8002274 <MX_I2C4_Init+0x74>)
 800223c:	f001 ff22 	bl	8004084 <HAL_I2C_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002246:	f000 fa41 	bl	80026cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800224a:	2100      	movs	r1, #0
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <MX_I2C4_Init+0x74>)
 800224e:	f002 fd65 	bl	8004d1c <HAL_I2CEx_ConfigAnalogFilter>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002258:	f000 fa38 	bl	80026cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_I2C4_Init+0x74>)
 8002260:	f002 fda7 	bl	8004db2 <HAL_I2CEx_ConfigDigitalFilter>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800226a:	f000 fa2f 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200002bc 	.word	0x200002bc
 8002278:	40006000 	.word	0x40006000
 800227c:	00808cd2 	.word	0x00808cd2

08002280 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a0:	463b      	mov	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	615a      	str	r2, [r3, #20]
 80022b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <MX_TIM4_Init+0xec>)
 80022b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022ba:	2247      	movs	r2, #71	; 0x47
 80022bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022d8:	4823      	ldr	r0, [pc, #140]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022da:	f003 ffc9 	bl	8006270 <HAL_TIM_Base_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80022e4:	f000 f9f2 	bl	80026cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f2:	4619      	mov	r1, r3
 80022f4:	481c      	ldr	r0, [pc, #112]	; (8002368 <MX_TIM4_Init+0xe8>)
 80022f6:	f004 fa81 	bl	80067fc <HAL_TIM_ConfigClockSource>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002300:	f000 f9e4 	bl	80026cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002304:	4818      	ldr	r0, [pc, #96]	; (8002368 <MX_TIM4_Init+0xe8>)
 8002306:	f004 f80a 	bl	800631e <HAL_TIM_PWM_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002310:	f000 f9dc 	bl	80026cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4811      	ldr	r0, [pc, #68]	; (8002368 <MX_TIM4_Init+0xe8>)
 8002324:	f004 fef2 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800232e:	f000 f9cd 	bl	80026cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002332:	2360      	movs	r3, #96	; 0x60
 8002334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	4807      	ldr	r0, [pc, #28]	; (8002368 <MX_TIM4_Init+0xe8>)
 800234a:	f004 f943 	bl	80065d4 <HAL_TIM_PWM_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002354:	f000 f9ba 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <MX_TIM4_Init+0xe8>)
 800235a:	f000 faf1 	bl	8002940 <HAL_TIM_MspPostInit>

}
 800235e:	bf00      	nop
 8002360:	3738      	adds	r7, #56	; 0x38
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000310 	.word	0x20000310
 800236c:	40000800 	.word	0x40000800

08002370 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 8002376:	4a15      	ldr	r2, [pc, #84]	; (80023cc <MX_USART3_UART_Init+0x5c>)
 8002378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 800237c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART3_UART_Init+0x58>)
 80023b4:	f004 ff38 	bl	8007228 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023be:	f000 f985 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000035c 	.word	0x2000035c
 80023cc:	40004800 	.word	0x40004800

080023d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023de:	2206      	movs	r2, #6
 80023e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e4:	2202      	movs	r2, #2
 80023e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f0:	2202      	movs	r2, #2
 80023f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002408:	2201      	movs	r2, #1
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002414:	f002 fd19 	bl	8004e4a <HAL_PCD_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800241e:	f000 f955 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200003e4 	.word	0x200003e4

0800242c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	; 0x30
 8002430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	4b71      	ldr	r3, [pc, #452]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a70      	ldr	r2, [pc, #448]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b6e      	ldr	r3, [pc, #440]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800245a:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <MX_GPIO_Init+0x1dc>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b68      	ldr	r3, [pc, #416]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a64      	ldr	r2, [pc, #400]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <MX_GPIO_Init+0x1dc>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a5e      	ldr	r2, [pc, #376]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <MX_GPIO_Init+0x1dc>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024a2:	4b59      	ldr	r3, [pc, #356]	; (8002608 <MX_GPIO_Init+0x1dc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <MX_GPIO_Init+0x1dc>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b56      	ldr	r3, [pc, #344]	; (8002608 <MX_GPIO_Init+0x1dc>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <MX_GPIO_Init+0x1dc>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a52      	ldr	r2, [pc, #328]	; (8002608 <MX_GPIO_Init+0x1dc>)
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b50      	ldr	r3, [pc, #320]	; (8002608 <MX_GPIO_Init+0x1dc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80024d8:	484c      	ldr	r0, [pc, #304]	; (800260c <MX_GPIO_Init+0x1e0>)
 80024da:	f001 fdb9 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	484b      	ldr	r0, [pc, #300]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024e4:	f001 fdb4 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2103      	movs	r1, #3
 80024ec:	4849      	ldr	r0, [pc, #292]	; (8002614 <MX_GPIO_Init+0x1e8>)
 80024ee:	f001 fdaf 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80024f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4843      	ldr	r0, [pc, #268]	; (8002618 <MX_GPIO_Init+0x1ec>)
 800250a:	f001 fbf5 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800250e:	2332      	movs	r3, #50	; 0x32
 8002510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800251e:	230b      	movs	r3, #11
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	4619      	mov	r1, r3
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <MX_GPIO_Init+0x1ec>)
 800252a:	f001 fbe5 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800252e:	2386      	movs	r3, #134	; 0x86
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800253e:	230b      	movs	r3, #11
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	4834      	ldr	r0, [pc, #208]	; (800261c <MX_GPIO_Init+0x1f0>)
 800254a:	f001 fbd5 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800254e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2301      	movs	r3, #1
 8002556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	4829      	ldr	r0, [pc, #164]	; (800260c <MX_GPIO_Init+0x1e0>)
 8002568:	f001 fbc6 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257e:	230b      	movs	r3, #11
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 031c 	add.w	r3, r7, #28
 8002586:	4619      	mov	r1, r3
 8002588:	4820      	ldr	r0, [pc, #128]	; (800260c <MX_GPIO_Init+0x1e0>)
 800258a:	f001 fbb5 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	481a      	ldr	r0, [pc, #104]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80025a6:	f001 fba7 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	4814      	ldr	r0, [pc, #80]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80025be:	f001 fb9b 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025c2:	2303      	movs	r3, #3
 80025c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	480e      	ldr	r0, [pc, #56]	; (8002614 <MX_GPIO_Init+0x1e8>)
 80025da:	f001 fb8d 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025f0:	230b      	movs	r3, #11
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80025fc:	f001 fb7c 	bl	8003cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	40020400 	.word	0x40020400
 8002610:	40021800 	.word	0x40021800
 8002614:	40020c00 	.word	0x40020c00
 8002618:	40020800 	.word	0x40020800
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
    AdcValue = HAL_ADC_GetValue(&hadc1);
 8002628:	4823      	ldr	r0, [pc, #140]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x98>)
 800262a:	f000 ffd7 	bl	80035dc <HAL_ADC_GetValue>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002634:	601a      	str	r2, [r3, #0]

    // Conversion to temperature in the case of MCP9700
    temp_zadana = (float) (((AdcValue*3.3)/40950)*100/3)+20 ;
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff92 	bl	8000564 <__aeabi_i2d>
 8002640:	a319      	add	r3, pc, #100	; (adr r3, 80026a8 <HAL_ADC_ConvCpltCallback+0x88>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd fff7 	bl	8000638 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	a317      	add	r3, pc, #92	; (adr r3, 80026b0 <HAL_ADC_ConvCpltCallback+0x90>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe f918 	bl	800088c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xa0>)
 800266a:	f7fd ffe5 	bl	8000638 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_ADC_ConvCpltCallback+0xa4>)
 800267c:	f7fe f906 	bl	800088c <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe faae 	bl	8000be8 <__aeabi_d2f>
 800268c:	ee07 0a10 	vmov	s14, r0
 8002690:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_ADC_ConvCpltCallback+0xa8>)
 800269a:	edc3 7a00 	vstr	s15, [r3]
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	66666666 	.word	0x66666666
 80026ac:	400a6666 	.word	0x400a6666
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40e3fec0 	.word	0x40e3fec0
 80026b8:	20000220 	.word	0x20000220
 80026bc:	20000910 	.word	0x20000910
 80026c0:	40590000 	.word	0x40590000
 80026c4:	40080000 	.word	0x40080000
 80026c8:	20000000 	.word	0x20000000

080026cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d0:	b672      	cpsid	i
}
 80026d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <Error_Handler+0x8>
	...

080026d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_MspInit+0x44>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_MspInit+0x44>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_MspInit+0x44>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x44>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x44>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x44>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_ADC_MspInit+0x84>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d12b      	bne.n	800279a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_ADC_MspInit+0x88>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_ADC_MspInit+0x88>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_ADC_MspInit+0x88>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_ADC_MspInit+0x88>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_ADC_MspInit+0x88>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_ADC_MspInit+0x88>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002772:	2308      	movs	r3, #8
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002776:	2303      	movs	r3, #3
 8002778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4809      	ldr	r0, [pc, #36]	; (80027ac <HAL_ADC_MspInit+0x8c>)
 8002786:	f001 fab7 	bl	8003cf8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2012      	movs	r0, #18
 8002790:	f001 fa7b 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002794:	2012      	movs	r0, #18
 8002796:	f001 fa94 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40012000 	.word	0x40012000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0ac      	sub	sp, #176	; 0xb0
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	2284      	movs	r2, #132	; 0x84
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f006 fa7e 	bl	8008cd2 <memset>
  if(hi2c->Instance==I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a44      	ldr	r2, [pc, #272]	; (80028ec <HAL_I2C_MspInit+0x13c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d13d      	bne.n	800285c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 f94e 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027fa:	f7ff ff67 	bl	80026cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a3b      	ldr	r2, [pc, #236]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800281a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281e:	2312      	movs	r3, #18
 8002820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002830:	2304      	movs	r3, #4
 8002832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800283a:	4619      	mov	r1, r3
 800283c:	482d      	ldr	r0, [pc, #180]	; (80028f4 <HAL_I2C_MspInit+0x144>)
 800283e:	f001 fa5b 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800285a:	e042      	b.n	80028e2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <HAL_I2C_MspInit+0x148>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d13d      	bne.n	80028e2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002872:	f107 0318 	add.w	r3, r7, #24
 8002876:	4618      	mov	r0, r3
 8002878:	f003 f90a 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002882:	f7ff ff23 	bl	80026cc <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800289e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a6:	2312      	movs	r3, #18
 80028a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80028b8:	2304      	movs	r3, #4
 80028ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028c2:	4619      	mov	r1, r3
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <HAL_I2C_MspInit+0x14c>)
 80028c6:	f001 fa17 	bl	8003cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 80028d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_I2C_MspInit+0x140>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	37b0      	adds	r7, #176	; 0xb0
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40005400 	.word	0x40005400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40006000 	.word	0x40006000
 80028fc:	40020c00 	.word	0x40020c00

08002900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_TIM_Base_MspInit+0x38>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10b      	bne.n	800292a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40000800 	.word	0x40000800
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_TIM_MspPostInit+0x64>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d11b      	bne.n	800299a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800298a:	2302      	movs	r3, #2
 800298c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4619      	mov	r1, r3
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <HAL_TIM_MspPostInit+0x6c>)
 8002996:	f001 f9af 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020400 	.word	0x40020400

080029b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0aa      	sub	sp, #168	; 0xa8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	2284      	movs	r2, #132	; 0x84
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f006 f97e 	bl	8008cd2 <memset>
  if(huart->Instance==USART3)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_UART_MspInit+0xb4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d13c      	bne.n	8002a5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f84e 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029fa:	f7ff fe67 	bl	80026cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_UART_MspInit+0xb8>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_UART_MspInit+0xb8>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0xb8>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_UART_MspInit+0xb8>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_UART_MspInit+0xb8>)
 8002a1c:	f043 0308 	orr.w	r3, r3, #8
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_UART_MspInit+0xb8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_UART_MspInit+0xbc>)
 8002a56:	f001 f94f 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	37a8      	adds	r7, #168	; 0xa8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40004800 	.word	0x40004800
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020c00 	.word	0x40020c00

08002a70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0ac      	sub	sp, #176	; 0xb0
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a88:	f107 0318 	add.w	r3, r7, #24
 8002a8c:	2284      	movs	r2, #132	; 0x84
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f006 f91e 	bl	8008cd2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9e:	d159      	bne.n	8002b54 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002aa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 ffed 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002abc:	f7ff fe06 	bl	80026cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ad8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002af2:	230a      	movs	r3, #10
 8002af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002afc:	4619      	mov	r1, r3
 8002afe:	4818      	ldr	r0, [pc, #96]	; (8002b60 <HAL_PCD_MspInit+0xf0>)
 8002b00:	f001 f8fa 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <HAL_PCD_MspInit+0xf0>)
 8002b20:	f001 f8ea 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	6353      	str	r3, [r2, #52]	; 0x34
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b46:	6453      	str	r3, [r2, #68]	; 0x44
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_PCD_MspInit+0xec>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b54:	bf00      	nop
 8002b56:	37b0      	adds	r7, #176	; 0xb0
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <NMI_Handler+0x4>

08002b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <HardFault_Handler+0x4>

08002b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <MemManage_Handler+0x4>

08002b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <BusFault_Handler+0x4>

08002b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <UsageFault_Handler+0x4>

08002b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb0:	f000 f94a 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <ADC_IRQHandler+0x10>)
 8002bbe:	f000 fbfd 	bl	80033bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000220 	.word	0x20000220

08002bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
	return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_kill>:

int _kill(int pid, int sig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002be6:	f006 f8c7 	bl	8008d78 <__errno>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2216      	movs	r2, #22
 8002bee:	601a      	str	r2, [r3, #0]
	return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_exit>:

void _exit (int status)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffe7 	bl	8002bdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c0e:	e7fe      	b.n	8002c0e <_exit+0x12>

08002c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00a      	b.n	8002c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c22:	f3af 8000 	nop.w
 8002c26:	4601      	mov	r1, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	60ba      	str	r2, [r7, #8]
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf0      	blt.n	8002c22 <_read+0x12>
	}

return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e009      	b.n	8002c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf1      	blt.n	8002c5c <_write+0x12>
	}
	return len;
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_close>:

int _close(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
	return -1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002caa:	605a      	str	r2, [r3, #4]
	return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_isatty>:

int _isatty(int file)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <_sbrk+0x5c>)
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <_sbrk+0x60>)
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_sbrk+0x64>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <_sbrk+0x68>)
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d207      	bcs.n	8002d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d1c:	f006 f82c 	bl	8008d78 <__errno>
 8002d20:	4603      	mov	r3, r0
 8002d22:	220c      	movs	r2, #12
 8002d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e009      	b.n	8002d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <_sbrk+0x64>)
 8002d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20050000 	.word	0x20050000
 8002d4c:	00000400 	.word	0x00000400
 8002d50:	20000918 	.word	0x20000918
 8002d54:	20000a70 	.word	0x20000a70

08002d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SystemInit+0x20>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <SystemInit+0x20>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d80:	480d      	ldr	r0, [pc, #52]	; (8002db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d82:	490e      	ldr	r1, [pc, #56]	; (8002dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d88:	e002      	b.n	8002d90 <LoopCopyDataInit>

08002d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8e:	3304      	adds	r3, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d94:	d3f9      	bcc.n	8002d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d98:	4c0b      	ldr	r4, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d9c:	e001      	b.n	8002da2 <LoopFillZerobss>

08002d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da0:	3204      	adds	r2, #4

08002da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da4:	d3fb      	bcc.n	8002d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002da6:	f7ff ffd7 	bl	8002d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002daa:	f005 ffeb 	bl	8008d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dae:	f7fe ffe3 	bl	8001d78 <main>
  bx  lr    
 8002db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002db4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002dc0:	0800b2ac 	.word	0x0800b2ac
  ldr r2, =_sbss
 8002dc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002dc8:	20000a6c 	.word	0x20000a6c

08002dcc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <CAN1_RX0_IRQHandler>

08002dce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	f000 ff4e 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f805 	bl	8002de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dde:	f7ff fc7b 	bl	80026d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_InitTick+0x54>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_InitTick+0x58>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 ff69 	bl	8003cde <HAL_SYSTICK_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00e      	b.n	8002e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b0f      	cmp	r3, #15
 8002e1a:	d80a      	bhi.n	8002e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	f000 ff31 	bl	8003c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e28:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <HAL_InitTick+0x5c>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	20000014 	.word	0x20000014
 8002e44:	20000010 	.word	0x20000010

08002e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_IncTick+0x24>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000014 	.word	0x20000014
 8002e6c:	2000091c 	.word	0x2000091c

08002e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_GetTick+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	2000091c 	.word	0x2000091c

08002e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff ffee 	bl	8002e70 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d005      	beq.n	8002eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_Delay+0x44>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eae:	bf00      	nop
 8002eb0:	f7ff ffde 	bl	8002e70 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8f7      	bhi.n	8002eb0 <HAL_Delay+0x28>
  {
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000014 	.word	0x20000014

08002ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e031      	b.n	8002f4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fc16 	bl	8002720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_ADC_Init+0x84>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fcd4 	bl	80038cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	ffffeefd 	.word	0xffffeefd

08002f58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Start+0x1a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0ad      	b.n	80030ce <HAL_ADC_Start+0x176>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d018      	beq.n	8002fba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_ADC_Start+0x184>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <HAL_ADC_Start+0x188>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9a      	lsrs	r2, r3, #18
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002fac:	e002      	b.n	8002fb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f9      	bne.n	8002fae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d175      	bne.n	80030b4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <HAL_ADC_Start+0x18c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	d106      	bne.n	8003012 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f023 0206 	bic.w	r2, r3, #6
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
 8003010:	e002      	b.n	8003018 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003028:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_ADC_Start+0x190>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d143      	bne.n	80030cc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e03a      	b.n	80030cc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_ADC_Start+0x194>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10e      	bne.n	800307e <HAL_ADC_Start+0x126>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_ADC_Start+0x190>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d120      	bne.n	80030cc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_ADC_Start+0x198>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d11b      	bne.n	80030cc <HAL_ADC_Start+0x174>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	e00b      	b.n	80030cc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0210 	orr.w	r2, r3, #16
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000000c 	.word	0x2000000c
 80030e0:	431bde83 	.word	0x431bde83
 80030e4:	fffff8fe 	.word	0xfffff8fe
 80030e8:	40012300 	.word	0x40012300
 80030ec:	40012000 	.word	0x40012000
 80030f0:	40012200 	.word	0x40012200

080030f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d113      	bne.n	800313a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800311c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003120:	d10b      	bne.n	800313a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e063      	b.n	8003202 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800313a:	f7ff fe99 	bl	8002e70 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003140:	e021      	b.n	8003186 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d01d      	beq.n	8003186 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_ADC_PollForConversion+0x6c>
 8003150:	f7ff fe8e 	bl	8002e70 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d212      	bcs.n	8003186 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d00b      	beq.n	8003186 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0204 	orr.w	r2, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e03d      	b.n	8003202 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d1d6      	bne.n	8003142 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0212 	mvn.w	r2, #18
 800319c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d123      	bne.n	8003200 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11f      	bne.n	8003200 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Start_IT+0x1a>
 8003222:	2302      	movs	r3, #2
 8003224:	e0b5      	b.n	8003392 <HAL_ADC_Start_IT+0x186>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d018      	beq.n	800326e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800324c:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_ADC_Start_IT+0x194>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a54      	ldr	r2, [pc, #336]	; (80033a4 <HAL_ADC_Start_IT+0x198>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9a      	lsrs	r2, r3, #18
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003260:	e002      	b.n	8003268 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b01      	subs	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f9      	bne.n	8003262 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d17d      	bne.n	8003378 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003280:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <HAL_ADC_Start_IT+0x19c>)
 8003282:	4013      	ands	r3, r2
 8003284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b6:	d106      	bne.n	80032c6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f023 0206 	bic.w	r2, r3, #6
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
 80032c4:	e002      	b.n	80032cc <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032dc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_ADC_Start_IT+0x1a0>)
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_ADC_Start_IT+0x1a4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d143      	bne.n	8003390 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e03a      	b.n	8003390 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <HAL_ADC_Start_IT+0x1a8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10e      	bne.n	8003342 <HAL_ADC_Start_IT+0x136>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003340:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_ADC_Start_IT+0x1a4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d120      	bne.n	8003390 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_ADC_Start_IT+0x1ac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d11b      	bne.n	8003390 <HAL_ADC_Start_IT+0x184>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	e00b      	b.n	8003390 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0210 	orr.w	r2, r3, #16
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	431bde83 	.word	0x431bde83
 80033a8:	fffff8fe 	.word	0xfffff8fe
 80033ac:	04000020 	.word	0x04000020
 80033b0:	40012300 	.word	0x40012300
 80033b4:	40012000 	.word	0x40012000
 80033b8:	40012200 	.word	0x40012200

080033bc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d049      	beq.n	8003486 <HAL_ADC_IRQHandler+0xca>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d046      	beq.n	8003486 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d12b      	bne.n	8003476 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003422:	2b00      	cmp	r3, #0
 8003424:	d127      	bne.n	8003476 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800343e:	2b00      	cmp	r3, #0
 8003440:	d119      	bne.n	8003476 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0220 	bic.w	r2, r2, #32
 8003450:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff f8d2 	bl	8002620 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0212 	mvn.w	r2, #18
 8003484:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003494:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d057      	beq.n	800354c <HAL_ADC_IRQHandler+0x190>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d054      	beq.n	800354c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d139      	bne.n	800353c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d12b      	bne.n	800353c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d124      	bne.n	800353c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11d      	bne.n	800353c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003504:	2b00      	cmp	r3, #0
 8003506:	d119      	bne.n	800353c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003516:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fabf 	bl	8003ac0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 020c 	mvn.w	r2, #12
 800354a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d017      	beq.n	8003592 <HAL_ADC_IRQHandler+0x1d6>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d014      	beq.n	8003592 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10d      	bne.n	8003592 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f837 	bl	80035f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0201 	mvn.w	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x218>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d012      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f043 0202 	orr.w	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0220 	mvn.w	r2, #32
 80035c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f820 	bl	800360a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0220 	mvn.w	r2, #32
 80035d2:	601a      	str	r2, [r3, #0]
  }
}
 80035d4:	bf00      	nop
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x1c>
 8003638:	2302      	movs	r3, #2
 800363a:	e136      	b.n	80038aa <HAL_ADC_ConfigChannel+0x28a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b09      	cmp	r3, #9
 800364a:	d93a      	bls.n	80036c2 <HAL_ADC_ConfigChannel+0xa2>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003654:	d035      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68d9      	ldr	r1, [r3, #12]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	3b1e      	subs	r3, #30
 800366c:	2207      	movs	r2, #7
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	400a      	ands	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a8d      	ldr	r2, [pc, #564]	; (80038b8 <HAL_ADC_ConfigChannel+0x298>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10a      	bne.n	800369c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68d9      	ldr	r1, [r3, #12]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	061a      	lsls	r2, r3, #24
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369a:	e035      	b.n	8003708 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4403      	add	r3, r0
 80036b4:	3b1e      	subs	r3, #30
 80036b6:	409a      	lsls	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036c0:	e022      	b.n	8003708 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6919      	ldr	r1, [r3, #16]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	2207      	movs	r2, #7
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43da      	mvns	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	400a      	ands	r2, r1
 80036e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6919      	ldr	r1, [r3, #16]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	4603      	mov	r3, r0
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4403      	add	r3, r0
 80036fe:	409a      	lsls	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d824      	bhi.n	800375a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	3b05      	subs	r3, #5
 8003722:	221f      	movs	r2, #31
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43da      	mvns	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	400a      	ands	r2, r1
 8003730:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	4618      	mov	r0, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	3b05      	subs	r3, #5
 800374c:	fa00 f203 	lsl.w	r2, r0, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	635a      	str	r2, [r3, #52]	; 0x34
 8003758:	e04c      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d824      	bhi.n	80037ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	3b23      	subs	r3, #35	; 0x23
 8003774:	221f      	movs	r2, #31
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	400a      	ands	r2, r1
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	3b23      	subs	r3, #35	; 0x23
 800379e:	fa00 f203 	lsl.w	r2, r0, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
 80037aa:	e023      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	3b41      	subs	r3, #65	; 0x41
 80037be:	221f      	movs	r2, #31
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43da      	mvns	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	400a      	ands	r2, r1
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	3b41      	subs	r3, #65	; 0x41
 80037e8:	fa00 f203 	lsl.w	r2, r0, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a30      	ldr	r2, [pc, #192]	; (80038bc <HAL_ADC_ConfigChannel+0x29c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10a      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x1f4>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003806:	d105      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a2c      	ldr	r2, [pc, #176]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800380e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003812:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a28      	ldr	r2, [pc, #160]	; (80038bc <HAL_ADC_ConfigChannel+0x29c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10f      	bne.n	800383e <HAL_ADC_ConfigChannel+0x21e>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b12      	cmp	r3, #18
 8003824:	d10b      	bne.n	800383e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800382c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003830:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800383c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_ADC_ConfigChannel+0x29c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d12b      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x280>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_ADC_ConfigChannel+0x298>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <HAL_ADC_ConfigChannel+0x23a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b11      	cmp	r3, #17
 8003858:	d122      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003860:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003864:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800386c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003870:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <HAL_ADC_ConfigChannel+0x298>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d111      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a11      	ldr	r2, [pc, #68]	; (80038c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9a      	lsrs	r2, r3, #18
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003892:	e002      	b.n	800389a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3b01      	subs	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f9      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	10000012 	.word	0x10000012
 80038bc:	40012000 	.word	0x40012000
 80038c0:	40012300 	.word	0x40012300
 80038c4:	2000000c 	.word	0x2000000c
 80038c8:	431bde83 	.word	0x431bde83

080038cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80038d4:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <ADC_Init+0x1ec>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a77      	ldr	r2, [pc, #476]	; (8003ab8 <ADC_Init+0x1ec>)
 80038da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80038de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80038e0:	4b75      	ldr	r3, [pc, #468]	; (8003ab8 <ADC_Init+0x1ec>)
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4973      	ldr	r1, [pc, #460]	; (8003ab8 <ADC_Init+0x1ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	021a      	lsls	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003942:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6899      	ldr	r1, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	4a58      	ldr	r2, [pc, #352]	; (8003abc <ADC_Init+0x1f0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800396e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6899      	ldr	r1, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	e00f      	b.n	80039c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0202 	bic.w	r2, r2, #2
 80039d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6899      	ldr	r1, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	005a      	lsls	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	035a      	lsls	r2, r3, #13
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	e007      	b.n	8003a3c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	051a      	lsls	r2, r3, #20
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6899      	ldr	r1, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a7e:	025a      	lsls	r2, r3, #9
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6899      	ldr	r1, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	029a      	lsls	r2, r3, #10
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40012300 	.word	0x40012300
 8003abc:	0f000001 	.word	0x0f000001

08003ac0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <__NVIC_SetPriorityGrouping+0x40>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af0:	4013      	ands	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <__NVIC_SetPriorityGrouping+0x40>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60d3      	str	r3, [r2, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00
 8003b18:	05fa0000 	.word	0x05fa0000

08003b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <__NVIC_GetPriorityGrouping+0x18>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0307 	and.w	r3, r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	; (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	; (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	; (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff8e 	bl	8003b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff29 	bl	8003ad4 <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff ff3e 	bl	8003b1c <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff8e 	bl	8003bc8 <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5d 	bl	8003b74 <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff31 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa2 	bl	8003c30 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e175      	b.n	8004004 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f040 8164 	bne.w	8003ffe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d005      	beq.n	8003d4e <HAL_GPIO_Init+0x56>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d130      	bne.n	8003db0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d84:	2201      	movs	r2, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 0201 	and.w	r2, r3, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d017      	beq.n	8003dec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d123      	bne.n	8003e40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	08da      	lsrs	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3208      	adds	r2, #8
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	220f      	movs	r2, #15
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0203 	and.w	r2, r3, #3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80be 	beq.w	8003ffe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e82:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a65      	ldr	r2, [pc, #404]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e9a:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_GPIO_Init+0x32c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d037      	beq.n	8003f36 <HAL_GPIO_Init+0x23e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_GPIO_Init+0x330>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_GPIO_Init+0x23a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a56      	ldr	r2, [pc, #344]	; (800402c <HAL_GPIO_Init+0x334>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x236>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_GPIO_Init+0x338>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x232>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a54      	ldr	r2, [pc, #336]	; (8004034 <HAL_GPIO_Init+0x33c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x22e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a53      	ldr	r2, [pc, #332]	; (8004038 <HAL_GPIO_Init+0x340>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x22a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_GPIO_Init+0x344>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	; (8004040 <HAL_GPIO_Init+0x348>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x222>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a50      	ldr	r2, [pc, #320]	; (8004044 <HAL_GPIO_Init+0x34c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x21e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4f      	ldr	r2, [pc, #316]	; (8004048 <HAL_GPIO_Init+0x350>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x21a>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	e012      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e010      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e00e      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	e00c      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00a      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e008      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f36:	2300      	movs	r3, #0
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	f67f ae86 	bls.w	8003d18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40022000 	.word	0x40022000
 8004048:	40022400 	.word	0x40022400
 800404c:	40013c00 	.word	0x40013c00

08004050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800406c:	e003      	b.n	8004076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800406e:	887b      	ldrh	r3, [r7, #2]
 8004070:	041a      	lsls	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	619a      	str	r2, [r3, #24]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e07f      	b.n	8004196 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fb80 	bl	80027b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	e006      	b.n	800410c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800410a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d104      	bne.n	800411e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800411c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <HAL_I2C_Init+0x11c>)
 800412a:	430b      	orrs	r3, r1
 800412c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	02008000 	.word	0x02008000

080041a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	460b      	mov	r3, r1
 80041b2:	817b      	strh	r3, [r7, #10]
 80041b4:	4613      	mov	r3, r2
 80041b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	f040 80da 	bne.w	800437a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2C_Master_Transmit+0x30>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0d3      	b.n	800437c <HAL_I2C_Master_Transmit+0x1d8>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041dc:	f7fe fe48 	bl	8002e70 <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2319      	movs	r3, #25
 80041e8:	2201      	movs	r2, #1
 80041ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fbc6 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0be      	b.n	800437c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2210      	movs	r2, #16
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	893a      	ldrh	r2, [r7, #8]
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2bff      	cmp	r3, #255	; 0xff
 800422e:	d90e      	bls.n	800424e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	4b51      	ldr	r3, [pc, #324]	; (8004384 <HAL_I2C_Master_Transmit+0x1e0>)
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fd36 	bl	8004cb8 <I2C_TransferConfig>
 800424c:	e06c      	b.n	8004328 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	b2da      	uxtb	r2, r3
 800425e:	8979      	ldrh	r1, [r7, #10]
 8004260:	4b48      	ldr	r3, [pc, #288]	; (8004384 <HAL_I2C_Master_Transmit+0x1e0>)
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fd25 	bl	8004cb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800426e:	e05b      	b.n	8004328 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	6a39      	ldr	r1, [r7, #32]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fbc3 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e07b      	b.n	800437c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d034      	beq.n	8004328 <HAL_I2C_Master_Transmit+0x184>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d130      	bne.n	8004328 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2180      	movs	r1, #128	; 0x80
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fb55 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e04d      	b.n	800437c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2bff      	cmp	r3, #255	; 0xff
 80042e8:	d90e      	bls.n	8004308 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	8979      	ldrh	r1, [r7, #10]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fcd9 	bl	8004cb8 <I2C_TransferConfig>
 8004306:	e00f      	b.n	8004328 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	b2da      	uxtb	r2, r3
 8004318:	8979      	ldrh	r1, [r7, #10]
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fcc8 	bl	8004cb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d19e      	bne.n	8004270 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	6a39      	ldr	r1, [r7, #32]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fba2 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e01a      	b.n	800437c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2220      	movs	r2, #32
 800434c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_I2C_Master_Transmit+0x1e4>)
 800435a:	400b      	ands	r3, r1
 800435c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	80002000 	.word	0x80002000
 8004388:	fe00e800 	.word	0xfe00e800

0800438c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	f040 80f9 	bne.w	80045a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_I2C_Mem_Write+0x34>
 80043ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0ed      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_I2C_Mem_Write+0x4e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0e6      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043e2:	f7fe fd45 	bl	8002e70 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fac3 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0d1      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2221      	movs	r2, #33	; 0x21
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800442c:	88f8      	ldrh	r0, [r7, #6]
 800442e:	893a      	ldrh	r2, [r7, #8]
 8004430:	8979      	ldrh	r1, [r7, #10]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	4603      	mov	r3, r0
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f9d3 	bl	80047e8 <I2C_RequestMemoryWrite>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0a9      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2bff      	cmp	r3, #255	; 0xff
 800445c:	d90e      	bls.n	800447c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	b2da      	uxtb	r2, r3
 800446a:	8979      	ldrh	r1, [r7, #10]
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fc1f 	bl	8004cb8 <I2C_TransferConfig>
 800447a:	e00f      	b.n	800449c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	b2da      	uxtb	r2, r3
 800448c:	8979      	ldrh	r1, [r7, #10]
 800448e:	2300      	movs	r3, #0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fc0e 	bl	8004cb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 faad 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e07b      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d034      	beq.n	8004554 <HAL_I2C_Mem_Write+0x1c8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d130      	bne.n	8004554 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	2200      	movs	r2, #0
 80044fa:	2180      	movs	r1, #128	; 0x80
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fa3f 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e04d      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2bff      	cmp	r3, #255	; 0xff
 8004514:	d90e      	bls.n	8004534 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	b2da      	uxtb	r2, r3
 8004522:	8979      	ldrh	r1, [r7, #10]
 8004524:	2300      	movs	r3, #0
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fbc3 	bl	8004cb8 <I2C_TransferConfig>
 8004532:	e00f      	b.n	8004554 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	b2da      	uxtb	r2, r3
 8004544:	8979      	ldrh	r1, [r7, #10]
 8004546:	2300      	movs	r3, #0
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fbb2 	bl	8004cb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d19e      	bne.n	800449c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa8c 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e01a      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2220      	movs	r2, #32
 8004578:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_I2C_Mem_Write+0x224>)
 8004586:	400b      	ands	r3, r1
 8004588:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	fe00e800 	.word	0xfe00e800

080045b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	817b      	strh	r3, [r7, #10]
 80045c6:	460b      	mov	r3, r1
 80045c8:	813b      	strh	r3, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	f040 80fd 	bne.w	80047d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_I2C_Mem_Read+0x34>
 80045e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0f1      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_I2C_Mem_Read+0x4e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0ea      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800460a:	f7fe fc31 	bl	8002e70 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2319      	movs	r3, #25
 8004616:	2201      	movs	r2, #1
 8004618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f9af 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0d5      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2222      	movs	r2, #34	; 0x22
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004654:	88f8      	ldrh	r0, [r7, #6]
 8004656:	893a      	ldrh	r2, [r7, #8]
 8004658:	8979      	ldrh	r1, [r7, #10]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	4603      	mov	r3, r0
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f913 	bl	8004890 <I2C_RequestMemoryRead>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0ad      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2bff      	cmp	r3, #255	; 0xff
 8004684:	d90e      	bls.n	80046a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	22ff      	movs	r2, #255	; 0xff
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	b2da      	uxtb	r2, r3
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <HAL_I2C_Mem_Read+0x22c>)
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fb0b 	bl	8004cb8 <I2C_TransferConfig>
 80046a2:	e00f      	b.n	80046c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	8979      	ldrh	r1, [r7, #10]
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_I2C_Mem_Read+0x22c>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fafa 	bl	8004cb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	2200      	movs	r2, #0
 80046cc:	2104      	movs	r1, #4
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f956 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e07c      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d034      	beq.n	8004784 <HAL_I2C_Mem_Read+0x1d0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d130      	bne.n	8004784 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f927 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04d      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2bff      	cmp	r3, #255	; 0xff
 8004744:	d90e      	bls.n	8004764 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	b2da      	uxtb	r2, r3
 8004752:	8979      	ldrh	r1, [r7, #10]
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 faab 	bl	8004cb8 <I2C_TransferConfig>
 8004762:	e00f      	b.n	8004784 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	8979      	ldrh	r1, [r7, #10]
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fa9a 	bl	8004cb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d19a      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f974 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e01a      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2220      	movs	r2, #32
 80047a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_I2C_Mem_Read+0x230>)
 80047b6:	400b      	ands	r3, r1
 80047b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	80002400 	.word	0x80002400
 80047e4:	fe00e800 	.word	0xfe00e800

080047e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	817b      	strh	r3, [r7, #10]
 80047fa:	460b      	mov	r3, r1
 80047fc:	813b      	strh	r3, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	4b20      	ldr	r3, [pc, #128]	; (800488c <I2C_RequestMemoryWrite+0xa4>)
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fa51 	bl	8004cb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f8f0 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e02c      	b.n	8004884 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004830:	893b      	ldrh	r3, [r7, #8]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	629a      	str	r2, [r3, #40]	; 0x28
 800483a:	e015      	b.n	8004868 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800483c:	893b      	ldrh	r3, [r7, #8]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	b29b      	uxth	r3, r3
 8004842:	b2da      	uxtb	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f8d6 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e012      	b.n	8004884 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800485e:	893b      	ldrh	r3, [r7, #8]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2200      	movs	r2, #0
 8004870:	2180      	movs	r1, #128	; 0x80
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f884 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	80002000 	.word	0x80002000

08004890 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	817b      	strh	r3, [r7, #10]
 80048a2:	460b      	mov	r3, r1
 80048a4:	813b      	strh	r3, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	4b20      	ldr	r3, [pc, #128]	; (8004934 <I2C_RequestMemoryRead+0xa4>)
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f9fe 	bl	8004cb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	69b9      	ldr	r1, [r7, #24]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f89d 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e02c      	b.n	800492a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048d6:	893b      	ldrh	r3, [r7, #8]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28
 80048e0:	e015      	b.n	800490e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048e2:	893b      	ldrh	r3, [r7, #8]
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f883 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e012      	b.n	800492a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004904:	893b      	ldrh	r3, [r7, #8]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f831 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	80002000 	.word	0x80002000

08004938 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d103      	bne.n	8004956 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d007      	beq.n	8004974 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	619a      	str	r2, [r3, #24]
  }
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004990:	e022      	b.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d01e      	beq.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fe fa69 	bl	8002e70 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e00f      	b.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d0cd      	beq.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a0c:	e02c      	b.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f870 	bl	8004af8 <I2C_IsErrorOccurred>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e02a      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d01e      	beq.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fe fa21 	bl	8002e70 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d113      	bne.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d1cb      	bne.n	8004a0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a8c:	e028      	b.n	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f830 	bl	8004af8 <I2C_IsErrorOccurred>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e026      	b.n	8004af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe f9e5 	bl	8002e70 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d113      	bne.n	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e007      	b.n	8004af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d1cf      	bne.n	8004a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d068      	beq.n	8004bf6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b2c:	e049      	b.n	8004bc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d045      	beq.n	8004bc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fe f99b 	bl	8002e70 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_IsErrorOccurred+0x54>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d13a      	bne.n	8004bc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6e:	d121      	bne.n	8004bb4 <I2C_IsErrorOccurred+0xbc>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b76:	d01d      	beq.n	8004bb4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d01a      	beq.n	8004bb4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b8e:	f7fe f96f 	bl	8002e70 <HAL_GetTick>
 8004b92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b94:	e00e      	b.n	8004bb4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b96:	f7fe f96b 	bl	8002e70 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b19      	cmp	r3, #25
 8004ba2:	d907      	bls.n	8004bb4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f043 0320 	orr.w	r3, r3, #32
 8004baa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004bb2:	e006      	b.n	8004bc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d1e9      	bne.n	8004b96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d003      	beq.n	8004bd8 <I2C_IsErrorOccurred+0xe0>
 8004bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0aa      	beq.n	8004b2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2220      	movs	r2, #32
 8004be6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f043 0304 	orr.w	r3, r3, #4
 8004bee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f043 0308 	orr.w	r3, r3, #8
 8004c30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f043 0302 	orr.w	r3, r3, #2
 8004c52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01c      	beq.n	8004ca6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fe63 	bl	8004938 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <I2C_IsErrorOccurred+0x1bc>)
 8004c7e:	400b      	ands	r3, r1
 8004c80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3728      	adds	r7, #40	; 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	fe00e800 	.word	0xfe00e800

08004cb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cca:	897b      	ldrh	r3, [r7, #10]
 8004ccc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cd0:	7a7b      	ldrb	r3, [r7, #9]
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	0d5b      	lsrs	r3, r3, #21
 8004cf2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <I2C_TransferConfig+0x60>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	ea02 0103 	and.w	r1, r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	03ff63ff 	.word	0x03ff63ff

08004d1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d138      	bne.n	8004da4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e032      	b.n	8004da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d139      	bne.n	8004e3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e033      	b.n	8004e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2224      	movs	r2, #36	; 0x24
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e4c:	b08f      	sub	sp, #60	; 0x3c
 8004e4e:	af0a      	add	r7, sp, #40	; 0x28
 8004e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e116      	b.n	800508a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fdfa 	bl	8002a70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2203      	movs	r2, #3
 8004e80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fef2 	bl	8007c84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	687e      	ldr	r6, [r7, #4]
 8004ea8:	466d      	mov	r5, sp
 8004eaa:	f106 0410 	add.w	r4, r6, #16
 8004eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ebe:	1d33      	adds	r3, r6, #4
 8004ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ec2:	6838      	ldr	r0, [r7, #0]
 8004ec4:	f002 fe86 	bl	8007bd4 <USB_CoreInit>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e0d7      	b.n	800508a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 fee0 	bl	8007ca6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	e04a      	b.n	8004f82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	333d      	adds	r3, #61	; 0x3d
 8004efc:	2201      	movs	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f00:	7bfa      	ldrb	r2, [r7, #15]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	333c      	adds	r3, #60	; 0x3c
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f14:	7bfa      	ldrb	r2, [r7, #15]
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	b298      	uxth	r0, r3
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	3344      	adds	r3, #68	; 0x44
 8004f28:	4602      	mov	r2, r0
 8004f2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	3340      	adds	r3, #64	; 0x40
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3348      	adds	r3, #72	; 0x48
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f54:	7bfa      	ldrb	r2, [r7, #15]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	334c      	adds	r3, #76	; 0x4c
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3354      	adds	r3, #84	; 0x54
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d3af      	bcc.n	8004eec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e044      	b.n	800501c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f92:	7bfa      	ldrb	r2, [r7, #15]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fea:	7bfa      	ldrb	r2, [r7, #15]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	3301      	adds	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	7bfa      	ldrb	r2, [r7, #15]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d3b5      	bcc.n	8004f92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	687e      	ldr	r6, [r7, #4]
 800502e:	466d      	mov	r5, sp
 8005030:	f106 0410 	add.w	r4, r6, #16
 8005034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800503a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800503c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005040:	e885 0003 	stmia.w	r5, {r0, r1}
 8005044:	1d33      	adds	r3, r6, #4
 8005046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f002 fe79 	bl	8007d40 <USB_DevInit>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e014      	b.n	800508a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2b01      	cmp	r3, #1
 8005076:	d102      	bne.n	800507e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f80b 	bl	8005094 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f003 f837 	bl	80080f6 <USB_DevDisconnect>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005094 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	10000003 	.word	0x10000003

080050dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40007000 	.word	0x40007000

080050fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e291      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8087 	beq.w	800522e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005120:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b04      	cmp	r3, #4
 800512a:	d00c      	beq.n	8005146 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512c:	4b93      	ldr	r3, [pc, #588]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d112      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d10b      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d06c      	beq.n	800522c <HAL_RCC_OscConfig+0x130>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d168      	bne.n	800522c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e26b      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x7a>
 8005168:	4b84      	ldr	r3, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a83      	ldr	r2, [pc, #524]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e02e      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x9c>
 800517e:	4b7f      	ldr	r3, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7e      	ldr	r2, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4b7c      	ldr	r3, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a7b      	ldr	r2, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e01d      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0xc0>
 80051a2:	4b76      	ldr	r3, [pc, #472]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a75      	ldr	r2, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4b73      	ldr	r3, [pc, #460]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a72      	ldr	r2, [pc, #456]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 80051bc:	4b6f      	ldr	r3, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a6e      	ldr	r2, [pc, #440]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4b6c      	ldr	r3, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a6b      	ldr	r2, [pc, #428]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fe48 	bl	8002e70 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd fe44 	bl	8002e70 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e21f      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0xe8>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fd fe34 	bl	8002e70 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800520c:	f7fd fe30 	bl	8002e70 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e20b      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x110>
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d069      	beq.n	800530e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800523a:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005246:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d11c      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
 8005252:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e1df      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	4b41      	ldr	r3, [pc, #260]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	493d      	ldr	r1, [pc, #244]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528a:	e040      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d023      	beq.n	80052dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005294:	4b39      	ldr	r3, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a38      	ldr	r2, [pc, #224]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fd fde6 	bl	8002e70 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a8:	f7fd fde2 	bl	8002e70 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1bd      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	4b2d      	ldr	r3, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4929      	ldr	r1, [pc, #164]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	e018      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a26      	ldr	r2, [pc, #152]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fd fdc2 	bl	8002e70 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f0:	f7fd fdbe 	bl	8002e70 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e199      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d038      	beq.n	800538c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d019      	beq.n	8005356 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005322:	4b16      	ldr	r3, [pc, #88]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	4a15      	ldr	r2, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fd fd9f 	bl	8002e70 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005336:	f7fd fd9b 	bl	8002e70 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e176      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800534a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x23a>
 8005354:	e01a      	b.n	800538c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535a:	4a08      	ldr	r2, [pc, #32]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fd fd85 	bl	8002e70 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536a:	f7fd fd81 	bl	8002e70 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d903      	bls.n	8005380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e15c      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
 800537c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b91      	ldr	r3, [pc, #580]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ee      	bne.n	800536a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a4 	beq.w	80054e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539a:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	4a87      	ldr	r2, [pc, #540]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b85      	ldr	r3, [pc, #532]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c2:	4b82      	ldr	r3, [pc, #520]	; (80055cc <HAL_RCC_OscConfig+0x4d0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d118      	bne.n	8005400 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053ce:	4b7f      	ldr	r3, [pc, #508]	; (80055cc <HAL_RCC_OscConfig+0x4d0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a7e      	ldr	r2, [pc, #504]	; (80055cc <HAL_RCC_OscConfig+0x4d0>)
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053da:	f7fd fd49 	bl	8002e70 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fd fd45 	bl	8002e70 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b64      	cmp	r3, #100	; 0x64
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e120      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f4:	4b75      	ldr	r3, [pc, #468]	; (80055cc <HAL_RCC_OscConfig+0x4d0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x31a>
 8005408:	4b6f      	ldr	r3, [pc, #444]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e02d      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x33c>
 800541e:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a69      	ldr	r2, [pc, #420]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4b67      	ldr	r3, [pc, #412]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	4a66      	ldr	r2, [pc, #408]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
 8005436:	e01c      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x35e>
 8005440:	4b61      	ldr	r3, [pc, #388]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	4a60      	ldr	r2, [pc, #384]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	4b5e      	ldr	r3, [pc, #376]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	4a5d      	ldr	r2, [pc, #372]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 800545a:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	4a5a      	ldr	r2, [pc, #360]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
 8005466:	4b58      	ldr	r3, [pc, #352]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	4a57      	ldr	r2, [pc, #348]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fd fcf9 	bl	8002e70 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fd fcf5 	bl	8002e70 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e0ce      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	4b4b      	ldr	r3, [pc, #300]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ee      	beq.n	8005482 <HAL_RCC_OscConfig+0x386>
 80054a4:	e014      	b.n	80054d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fd fce3 	bl	8002e70 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fd fcdf 	bl	8002e70 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e0b8      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c4:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d6:	4b3c      	ldr	r3, [pc, #240]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	4a3b      	ldr	r2, [pc, #236]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80054dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80a4 	beq.w	8005634 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d06b      	beq.n	80055d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d149      	bne.n	8005594 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a30      	ldr	r2, [pc, #192]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fd fcb0 	bl	8002e70 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd fcac 	bl	8002e70 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e087      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	4313      	orrs	r3, r2
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800555a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800555e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fd fc80 	bl	8002e70 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7fd fc7c 	bl	8002e70 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e057      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x478>
 8005592:	e04f      	b.n	8005634 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 800559a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fc66 	bl	8002e70 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a8:	f7fd fc62 	bl	8002e70 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e03d      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ba:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <HAL_RCC_OscConfig+0x4cc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4ac>
 80055c6:	e035      	b.n	8005634 <HAL_RCC_OscConfig+0x538>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80055d0:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x544>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d028      	beq.n	8005630 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d121      	bne.n	8005630 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11a      	bne.n	8005630 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005600:	4013      	ands	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005606:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	3b01      	subs	r3, #1
 800561a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d107      	bne.n	8005630 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800

08005644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0d0      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800565c:	4b6a      	ldr	r3, [pc, #424]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d910      	bls.n	800568c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b67      	ldr	r3, [pc, #412]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 020f 	bic.w	r2, r3, #15
 8005672:	4965      	ldr	r1, [pc, #404]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b63      	ldr	r3, [pc, #396]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0b8      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a4:	4b59      	ldr	r3, [pc, #356]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a58      	ldr	r2, [pc, #352]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056bc:	4b53      	ldr	r3, [pc, #332]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c8:	4b50      	ldr	r3, [pc, #320]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	494d      	ldr	r1, [pc, #308]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d040      	beq.n	8005768 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	4b47      	ldr	r3, [pc, #284]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d115      	bne.n	8005726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e07f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d107      	bne.n	8005716 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005706:	4b41      	ldr	r3, [pc, #260]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e073      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005716:	4b3d      	ldr	r3, [pc, #244]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e06b      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f023 0203 	bic.w	r2, r3, #3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	4936      	ldr	r1, [pc, #216]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005738:	f7fd fb9a 	bl	8002e70 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573e:	e00a      	b.n	8005756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005740:	f7fd fb96 	bl	8002e70 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	; 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e053      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	4b2d      	ldr	r3, [pc, #180]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 020c 	and.w	r2, r3, #12
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	429a      	cmp	r2, r3
 8005766:	d1eb      	bne.n	8005740 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005768:	4b27      	ldr	r3, [pc, #156]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d210      	bcs.n	8005798 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 020f 	bic.w	r2, r3, #15
 800577e:	4922      	ldr	r1, [pc, #136]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e032      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4916      	ldr	r1, [pc, #88]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	490e      	ldr	r1, [pc, #56]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057d6:	f000 f821 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057da:	4602      	mov	r2, r0
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	490a      	ldr	r1, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x1cc>)
 80057e8:	5ccb      	ldrb	r3, [r1, r3]
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x1d0>)
 80057f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x1d4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd faf6 	bl	8002de8 <HAL_InitTick>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023c00 	.word	0x40023c00
 800580c:	40023800 	.word	0x40023800
 8005810:	0800af10 	.word	0x0800af10
 8005814:	2000000c 	.word	0x2000000c
 8005818:	20000010 	.word	0x20000010

0800581c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005820:	b094      	sub	sp, #80	; 0x50
 8005822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
 8005828:	2300      	movs	r3, #0
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	2300      	movs	r3, #0
 800582e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005834:	4b79      	ldr	r3, [pc, #484]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b08      	cmp	r3, #8
 800583e:	d00d      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x40>
 8005840:	2b08      	cmp	r3, #8
 8005842:	f200 80e1 	bhi.w	8005a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x34>
 800584a:	2b04      	cmp	r3, #4
 800584c:	d003      	beq.n	8005856 <HAL_RCC_GetSysClockFreq+0x3a>
 800584e:	e0db      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005850:	4b73      	ldr	r3, [pc, #460]	; (8005a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005854:	e0db      	b.n	8005a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005856:	4b73      	ldr	r3, [pc, #460]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8005858:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800585a:	e0d8      	b.n	8005a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800585c:	4b6f      	ldr	r3, [pc, #444]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005864:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005866:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d063      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005872:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	2200      	movs	r2, #0
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
 800587c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005884:	633b      	str	r3, [r7, #48]	; 0x30
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	0159      	lsls	r1, r3, #5
 800589c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058a0:	0150      	lsls	r0, r2, #5
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4621      	mov	r1, r4
 80058a8:	1a51      	subs	r1, r2, r1
 80058aa:	6139      	str	r1, [r7, #16]
 80058ac:	4629      	mov	r1, r5
 80058ae:	eb63 0301 	sbc.w	r3, r3, r1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c0:	4659      	mov	r1, fp
 80058c2:	018b      	lsls	r3, r1, #6
 80058c4:	4651      	mov	r1, sl
 80058c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ca:	4651      	mov	r1, sl
 80058cc:	018a      	lsls	r2, r1, #6
 80058ce:	4651      	mov	r1, sl
 80058d0:	ebb2 0801 	subs.w	r8, r2, r1
 80058d4:	4659      	mov	r1, fp
 80058d6:	eb63 0901 	sbc.w	r9, r3, r1
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ee:	4690      	mov	r8, r2
 80058f0:	4699      	mov	r9, r3
 80058f2:	4623      	mov	r3, r4
 80058f4:	eb18 0303 	adds.w	r3, r8, r3
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	462b      	mov	r3, r5
 80058fc:	eb49 0303 	adc.w	r3, r9, r3
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800590e:	4629      	mov	r1, r5
 8005910:	024b      	lsls	r3, r1, #9
 8005912:	4621      	mov	r1, r4
 8005914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005918:	4621      	mov	r1, r4
 800591a:	024a      	lsls	r2, r1, #9
 800591c:	4610      	mov	r0, r2
 800591e:	4619      	mov	r1, r3
 8005920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005922:	2200      	movs	r2, #0
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
 8005926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800592c:	f7fb f9fc 	bl	8000d28 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4613      	mov	r3, r2
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005938:	e058      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800593a:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	099b      	lsrs	r3, r3, #6
 8005940:	2200      	movs	r2, #0
 8005942:	4618      	mov	r0, r3
 8005944:	4611      	mov	r1, r2
 8005946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
 8005950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005954:	4642      	mov	r2, r8
 8005956:	464b      	mov	r3, r9
 8005958:	f04f 0000 	mov.w	r0, #0
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	0159      	lsls	r1, r3, #5
 8005962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005966:	0150      	lsls	r0, r2, #5
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4641      	mov	r1, r8
 800596e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005972:	4649      	mov	r1, r9
 8005974:	eb63 0b01 	sbc.w	fp, r3, r1
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800598c:	ebb2 040a 	subs.w	r4, r2, sl
 8005990:	eb63 050b 	sbc.w	r5, r3, fp
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	00eb      	lsls	r3, r5, #3
 800599e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059a2:	00e2      	lsls	r2, r4, #3
 80059a4:	4614      	mov	r4, r2
 80059a6:	461d      	mov	r5, r3
 80059a8:	4643      	mov	r3, r8
 80059aa:	18e3      	adds	r3, r4, r3
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	464b      	mov	r3, r9
 80059b0:	eb45 0303 	adc.w	r3, r5, r3
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059c2:	4629      	mov	r1, r5
 80059c4:	028b      	lsls	r3, r1, #10
 80059c6:	4621      	mov	r1, r4
 80059c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059cc:	4621      	mov	r1, r4
 80059ce:	028a      	lsls	r2, r1, #10
 80059d0:	4610      	mov	r0, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d6:	2200      	movs	r2, #0
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	61fa      	str	r2, [r7, #28]
 80059dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059e0:	f7fb f9a2 	bl	8000d28 <__aeabi_uldivmod>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4613      	mov	r3, r2
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	0c1b      	lsrs	r3, r3, #16
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	3301      	adds	r3, #1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80059fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a06:	e002      	b.n	8005a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3750      	adds	r7, #80	; 0x50
 8005a14:	46bd      	mov	sp, r7
 8005a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	00f42400 	.word	0x00f42400
 8005a24:	007a1200 	.word	0x007a1200

08005a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a2c:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	2000000c 	.word	0x2000000c

08005a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a44:	f7ff fff0 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	0a9b      	lsrs	r3, r3, #10
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	4903      	ldr	r1, [pc, #12]	; (8005a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a56:	5ccb      	ldrb	r3, [r1, r3]
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40023800 	.word	0x40023800
 8005a64:	0800af20 	.word	0x0800af20

08005a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a6c:	f7ff ffdc 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	0b5b      	lsrs	r3, r3, #13
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4903      	ldr	r1, [pc, #12]	; (8005a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	0800af20 	.word	0x0800af20

08005a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d012      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ab8:	4b69      	ldr	r3, [pc, #420]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4a68      	ldr	r2, [pc, #416]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005abe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ac2:	6093      	str	r3, [r2, #8]
 8005ac4:	4b66      	ldr	r3, [pc, #408]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	4964      	ldr	r1, [pc, #400]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d017      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aea:	4b5d      	ldr	r3, [pc, #372]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	4959      	ldr	r1, [pc, #356]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b08:	d101      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d017      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b26:	4b4e      	ldr	r3, [pc, #312]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	494a      	ldr	r1, [pc, #296]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b44:	d101      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b62:	2301      	movs	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 808b 	beq.w	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b74:	4b3a      	ldr	r3, [pc, #232]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	4a39      	ldr	r2, [pc, #228]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b80:	4b37      	ldr	r3, [pc, #220]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b8c:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a34      	ldr	r2, [pc, #208]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b98:	f7fd f96a 	bl	8002e70 <HAL_GetTick>
 8005b9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba0:	f7fd f966 	bl	8002e70 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b64      	cmp	r3, #100	; 0x64
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e357      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bb2:	4b2c      	ldr	r3, [pc, #176]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bbe:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d035      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d02e      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bdc:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005be6:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005bfe:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c04:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d114      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fd f92e 	bl	8002e70 <HAL_GetTick>
 8005c14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c16:	e00a      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c18:	f7fd f92a 	bl	8002e70 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e319      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ee      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c46:	d111      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c56:	400b      	ands	r3, r1
 8005c58:	4901      	ldr	r1, [pc, #4]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40007000 	.word	0x40007000
 8005c68:	0ffffcff 	.word	0x0ffffcff
 8005c6c:	4baa      	ldr	r3, [pc, #680]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4aa9      	ldr	r2, [pc, #676]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c76:	6093      	str	r3, [r2, #8]
 8005c78:	4ba7      	ldr	r3, [pc, #668]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	49a4      	ldr	r1, [pc, #656]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c96:	4ba0      	ldr	r3, [pc, #640]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c9c:	4a9e      	ldr	r2, [pc, #632]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ca6:	4b9c      	ldr	r3, [pc, #624]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	4999      	ldr	r1, [pc, #612]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cc4:	4b94      	ldr	r3, [pc, #592]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd2:	4991      	ldr	r1, [pc, #580]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ce6:	4b8c      	ldr	r3, [pc, #560]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf4:	4988      	ldr	r1, [pc, #544]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d08:	4b83      	ldr	r3, [pc, #524]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d16:	4980      	ldr	r1, [pc, #512]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d2a:	4b7b      	ldr	r3, [pc, #492]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	4977      	ldr	r1, [pc, #476]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d4c:	4b72      	ldr	r3, [pc, #456]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	496f      	ldr	r1, [pc, #444]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d6e:	4b6a      	ldr	r3, [pc, #424]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	f023 020c 	bic.w	r2, r3, #12
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7c:	4966      	ldr	r1, [pc, #408]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d90:	4b61      	ldr	r3, [pc, #388]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9e:	495e      	ldr	r1, [pc, #376]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005db2:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	4955      	ldr	r1, [pc, #340]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dd4:	4b50      	ldr	r3, [pc, #320]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	494d      	ldr	r1, [pc, #308]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005df6:	4b48      	ldr	r3, [pc, #288]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e04:	4944      	ldr	r1, [pc, #272]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e18:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e26:	493c      	ldr	r1, [pc, #240]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	4933      	ldr	r1, [pc, #204]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e5c:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6a:	492b      	ldr	r1, [pc, #172]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e7e:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8c:	4922      	ldr	r1, [pc, #136]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ecc:	4912      	ldr	r1, [pc, #72]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef0:	4909      	ldr	r1, [pc, #36]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d006      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80d9 	beq.w	80060be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f0c:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a01      	ldr	r2, [pc, #4]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f16:	e001      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fc ffa7 	bl	8002e70 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f24:	e008      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f26:	f7fc ffa3 	bl	8002e70 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b64      	cmp	r3, #100	; 0x64
 8005f32:	d901      	bls.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e194      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f38:	4b6c      	ldr	r3, [pc, #432]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f0      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d021      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11d      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f58:	4b64      	ldr	r3, [pc, #400]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5e:	0c1b      	lsrs	r3, r3, #16
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f66:	4b61      	ldr	r3, [pc, #388]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6c:	0e1b      	lsrs	r3, r3, #24
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	019a      	lsls	r2, r3, #6
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	071b      	lsls	r3, r3, #28
 8005f8c:	4957      	ldr	r1, [pc, #348]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02e      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fbe:	d129      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fc0:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc6:	0c1b      	lsrs	r3, r3, #16
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fce:	4b47      	ldr	r3, [pc, #284]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd4:	0f1b      	lsrs	r3, r3, #28
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	019a      	lsls	r2, r3, #6
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	071b      	lsls	r3, r3, #28
 8005ff4:	493d      	ldr	r1, [pc, #244]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006002:	f023 021f 	bic.w	r2, r3, #31
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	3b01      	subs	r3, #1
 800600c:	4937      	ldr	r1, [pc, #220]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01d      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006020:	4b32      	ldr	r3, [pc, #200]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006026:	0e1b      	lsrs	r3, r3, #24
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800602e:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006034:	0f1b      	lsrs	r3, r3, #28
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	019a      	lsls	r2, r3, #6
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	431a      	orrs	r2, r3
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	431a      	orrs	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	071b      	lsls	r3, r3, #28
 8006054:	4925      	ldr	r1, [pc, #148]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d011      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	019a      	lsls	r2, r3, #6
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	061b      	lsls	r3, r3, #24
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	071b      	lsls	r3, r3, #28
 8006084:	4919      	ldr	r1, [pc, #100]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800608c:	4b17      	ldr	r3, [pc, #92]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a16      	ldr	r2, [pc, #88]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006098:	f7fc feea 	bl	8002e70 <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060a0:	f7fc fee6 	bl	8002e70 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b64      	cmp	r3, #100	; 0x64
 80060ac:	d901      	bls.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0d7      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f0      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 80cd 	bne.w	8006260 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a08      	ldr	r2, [pc, #32]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d2:	f7fc fecd 	bl	8002e70 <HAL_GetTick>
 80060d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060d8:	e00a      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060da:	f7fc fec9 	bl	8002e70 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b64      	cmp	r3, #100	; 0x64
 80060e6:	d903      	bls.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e0ba      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80060ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060f0:	4b5e      	ldr	r3, [pc, #376]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060fc:	d0ed      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800611a:	2b00      	cmp	r3, #0
 800611c:	d02e      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d12a      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006126:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006134:	4b4d      	ldr	r3, [pc, #308]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	0f1b      	lsrs	r3, r3, #28
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	019a      	lsls	r2, r3, #6
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	061b      	lsls	r3, r3, #24
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	071b      	lsls	r3, r3, #28
 800615a:	4944      	ldr	r1, [pc, #272]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006162:	4b42      	ldr	r3, [pc, #264]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006168:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	3b01      	subs	r3, #1
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	493d      	ldr	r1, [pc, #244]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d022      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006190:	d11d      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061a0:	4b32      	ldr	r3, [pc, #200]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	0f1b      	lsrs	r3, r3, #28
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	019a      	lsls	r2, r3, #6
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	431a      	orrs	r2, r3
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	061b      	lsls	r3, r3, #24
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	071b      	lsls	r3, r3, #28
 80061c6:	4929      	ldr	r1, [pc, #164]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d028      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061da:	4b24      	ldr	r3, [pc, #144]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	0e1b      	lsrs	r3, r3, #24
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	019a      	lsls	r2, r3, #6
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	431a      	orrs	r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	071b      	lsls	r3, r3, #28
 800620e:	4917      	ldr	r1, [pc, #92]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800621c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	4911      	ldr	r1, [pc, #68]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800622c:	4b0f      	ldr	r3, [pc, #60]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0e      	ldr	r2, [pc, #56]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006238:	f7fc fe1a 	bl	8002e70 <HAL_GetTick>
 800623c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006240:	f7fc fe16 	bl	8002e70 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	; 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e007      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006252:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800625a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625e:	d1ef      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40023800 	.word	0x40023800

08006270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e049      	b.n	8006316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fc fb32 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f000 fb6e 	bl	8006990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e049      	b.n	80063c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f841 	bl	80063cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f000 fb17 	bl	8006990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_PWM_Start+0x24>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e03c      	b.n	800647e <HAL_TIM_PWM_Start+0x9e>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b04      	cmp	r3, #4
 8006408:	d109      	bne.n	800641e <HAL_TIM_PWM_Start+0x3e>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b01      	cmp	r3, #1
 8006414:	bf14      	ite	ne
 8006416:	2301      	movne	r3, #1
 8006418:	2300      	moveq	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	e02f      	b.n	800647e <HAL_TIM_PWM_Start+0x9e>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d109      	bne.n	8006438 <HAL_TIM_PWM_Start+0x58>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	bf14      	ite	ne
 8006430:	2301      	movne	r3, #1
 8006432:	2300      	moveq	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	e022      	b.n	800647e <HAL_TIM_PWM_Start+0x9e>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d109      	bne.n	8006452 <HAL_TIM_PWM_Start+0x72>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b01      	cmp	r3, #1
 8006448:	bf14      	ite	ne
 800644a:	2301      	movne	r3, #1
 800644c:	2300      	moveq	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	e015      	b.n	800647e <HAL_TIM_PWM_Start+0x9e>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b10      	cmp	r3, #16
 8006456:	d109      	bne.n	800646c <HAL_TIM_PWM_Start+0x8c>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e008      	b.n	800647e <HAL_TIM_PWM_Start+0x9e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e092      	b.n	80065ac <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Start+0xb6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006494:	e023      	b.n	80064de <HAL_TIM_PWM_Start+0xfe>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0xc6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a4:	e01b      	b.n	80064de <HAL_TIM_PWM_Start+0xfe>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0xd6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b4:	e013      	b.n	80064de <HAL_TIM_PWM_Start+0xfe>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xe6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c4:	e00b      	b.n	80064de <HAL_TIM_PWM_Start+0xfe>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0xf6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d4:	e003      	b.n	80064de <HAL_TIM_PWM_Start+0xfe>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fdea 	bl	80070c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <HAL_TIM_PWM_Start+0x1d4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_PWM_Start+0x120>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2f      	ldr	r2, [pc, #188]	; (80065b8 <HAL_TIM_PWM_Start+0x1d8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_PWM_Start+0x124>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <HAL_TIM_PWM_Start+0x126>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <HAL_TIM_PWM_Start+0x1d4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d01d      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a22      	ldr	r2, [pc, #136]	; (80065bc <HAL_TIM_PWM_Start+0x1dc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <HAL_TIM_PWM_Start+0x1e0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <HAL_TIM_PWM_Start+0x1e4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <HAL_TIM_PWM_Start+0x1d8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_TIM_PWM_Start+0x1e8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_TIM_PWM_Start+0x18a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a19      	ldr	r2, [pc, #100]	; (80065cc <HAL_TIM_PWM_Start+0x1ec>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d115      	bne.n	8006596 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <HAL_TIM_PWM_Start+0x1f0>)
 8006572:	4013      	ands	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b06      	cmp	r3, #6
 800657a:	d015      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x1c8>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006582:	d011      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006594:	e008      	b.n	80065a8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e000      	b.n	80065aa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40001800 	.word	0x40001800
 80065d0:	00010007 	.word	0x00010007

080065d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e0ff      	b.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b14      	cmp	r3, #20
 80065fe:	f200 80f0 	bhi.w	80067e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800665d 	.word	0x0800665d
 800660c:	080067e3 	.word	0x080067e3
 8006610:	080067e3 	.word	0x080067e3
 8006614:	080067e3 	.word	0x080067e3
 8006618:	0800669d 	.word	0x0800669d
 800661c:	080067e3 	.word	0x080067e3
 8006620:	080067e3 	.word	0x080067e3
 8006624:	080067e3 	.word	0x080067e3
 8006628:	080066df 	.word	0x080066df
 800662c:	080067e3 	.word	0x080067e3
 8006630:	080067e3 	.word	0x080067e3
 8006634:	080067e3 	.word	0x080067e3
 8006638:	0800671f 	.word	0x0800671f
 800663c:	080067e3 	.word	0x080067e3
 8006640:	080067e3 	.word	0x080067e3
 8006644:	080067e3 	.word	0x080067e3
 8006648:	08006761 	.word	0x08006761
 800664c:	080067e3 	.word	0x080067e3
 8006650:	080067e3 	.word	0x080067e3
 8006654:	080067e3 	.word	0x080067e3
 8006658:	080067a1 	.word	0x080067a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fa34 	bl	8006ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0208 	orr.w	r2, r2, #8
 8006676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0204 	bic.w	r2, r2, #4
 8006686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6999      	ldr	r1, [r3, #24]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	619a      	str	r2, [r3, #24]
      break;
 800669a:	e0a5      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fa86 	bl	8006bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6999      	ldr	r1, [r3, #24]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	021a      	lsls	r2, r3, #8
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	619a      	str	r2, [r3, #24]
      break;
 80066dc:	e084      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fadd 	bl	8006ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0208 	orr.w	r2, r2, #8
 80066f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0204 	bic.w	r2, r2, #4
 8006708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69d9      	ldr	r1, [r3, #28]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	61da      	str	r2, [r3, #28]
      break;
 800671c:	e064      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fb33 	bl	8006d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69d9      	ldr	r1, [r3, #28]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	021a      	lsls	r2, r3, #8
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	61da      	str	r2, [r3, #28]
      break;
 800675e:	e043      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fb6a 	bl	8006e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0208 	orr.w	r2, r2, #8
 800677a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0204 	bic.w	r2, r2, #4
 800678a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800679e:	e023      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fb9c 	bl	8006ee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	021a      	lsls	r2, r3, #8
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067e0:	e002      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	75fb      	strb	r3, [r7, #23]
      break;
 80067e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop

080067fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIM_ConfigClockSource+0x1c>
 8006814:	2302      	movs	r3, #2
 8006816:	e0b4      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x186>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	4b56      	ldr	r3, [pc, #344]	; (800698c <HAL_TIM_ConfigClockSource+0x190>)
 8006834:	4013      	ands	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800683e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006850:	d03e      	beq.n	80068d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006856:	f200 8087 	bhi.w	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	f000 8086 	beq.w	800696e <HAL_TIM_ConfigClockSource+0x172>
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d87f      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b70      	cmp	r3, #112	; 0x70
 800686a:	d01a      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0xa6>
 800686c:	2b70      	cmp	r3, #112	; 0x70
 800686e:	d87b      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b60      	cmp	r3, #96	; 0x60
 8006872:	d050      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x11a>
 8006874:	2b60      	cmp	r3, #96	; 0x60
 8006876:	d877      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b50      	cmp	r3, #80	; 0x50
 800687a:	d03c      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0xfa>
 800687c:	2b50      	cmp	r3, #80	; 0x50
 800687e:	d873      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	d058      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x13a>
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d86f      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b30      	cmp	r3, #48	; 0x30
 800688a:	d064      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 800688c:	2b30      	cmp	r3, #48	; 0x30
 800688e:	d86b      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b20      	cmp	r3, #32
 8006892:	d060      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 8006894:	2b20      	cmp	r3, #32
 8006896:	d867      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d05c      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 800689c:	2b10      	cmp	r3, #16
 800689e:	d05a      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 80068a0:	e062      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068b2:	f000 fbe5 	bl	8007080 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	609a      	str	r2, [r3, #8]
      break;
 80068ce:	e04f      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068e0:	f000 fbce 	bl	8007080 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068f2:	609a      	str	r2, [r3, #8]
      break;
 80068f4:	e03c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006902:	461a      	mov	r2, r3
 8006904:	f000 fb42 	bl	8006f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2150      	movs	r1, #80	; 0x50
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fb9b 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 8006914:	e02c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006922:	461a      	mov	r2, r3
 8006924:	f000 fb61 	bl	8006fea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2160      	movs	r1, #96	; 0x60
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fb8b 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 8006934:	e01c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006942:	461a      	mov	r2, r3
 8006944:	f000 fb22 	bl	8006f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2140      	movs	r1, #64	; 0x40
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb7b 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 8006954:	e00c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f000 fb72 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 8006966:	e003      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	e000      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800696e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	fffeff88 	.word	0xfffeff88

08006990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a40      	ldr	r2, [pc, #256]	; (8006aa4 <TIM_Base_SetConfig+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d00f      	beq.n	80069d0 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3d      	ldr	r2, [pc, #244]	; (8006aa8 <TIM_Base_SetConfig+0x118>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00b      	beq.n	80069d0 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3c      	ldr	r2, [pc, #240]	; (8006aac <TIM_Base_SetConfig+0x11c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3b      	ldr	r2, [pc, #236]	; (8006ab0 <TIM_Base_SetConfig+0x120>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3a      	ldr	r2, [pc, #232]	; (8006ab4 <TIM_Base_SetConfig+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d108      	bne.n	80069e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a2f      	ldr	r2, [pc, #188]	; (8006aa4 <TIM_Base_SetConfig+0x114>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d02b      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f0:	d027      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2c      	ldr	r2, [pc, #176]	; (8006aa8 <TIM_Base_SetConfig+0x118>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d023      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2b      	ldr	r2, [pc, #172]	; (8006aac <TIM_Base_SetConfig+0x11c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01f      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2a      	ldr	r2, [pc, #168]	; (8006ab0 <TIM_Base_SetConfig+0x120>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d01b      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a29      	ldr	r2, [pc, #164]	; (8006ab4 <TIM_Base_SetConfig+0x124>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d017      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a28      	ldr	r2, [pc, #160]	; (8006ab8 <TIM_Base_SetConfig+0x128>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a27      	ldr	r2, [pc, #156]	; (8006abc <TIM_Base_SetConfig+0x12c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00f      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <TIM_Base_SetConfig+0x130>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00b      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <TIM_Base_SetConfig+0x134>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d007      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a24      	ldr	r2, [pc, #144]	; (8006ac8 <TIM_Base_SetConfig+0x138>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a23      	ldr	r2, [pc, #140]	; (8006acc <TIM_Base_SetConfig+0x13c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d108      	bne.n	8006a54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <TIM_Base_SetConfig+0x114>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_Base_SetConfig+0xf8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a0c      	ldr	r2, [pc, #48]	; (8006ab4 <TIM_Base_SetConfig+0x124>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d103      	bne.n	8006a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	615a      	str	r2, [r3, #20]
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40000c00 	.word	0x40000c00
 8006ab4:	40010400 	.word	0x40010400
 8006ab8:	40014000 	.word	0x40014000
 8006abc:	40014400 	.word	0x40014400
 8006ac0:	40014800 	.word	0x40014800
 8006ac4:	40001800 	.word	0x40001800
 8006ac8:	40001c00 	.word	0x40001c00
 8006acc:	40002000 	.word	0x40002000

08006ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0201 	bic.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <TIM_OC1_SetConfig+0xd8>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 0302 	bic.w	r3, r3, #2
 8006b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a21      	ldr	r2, [pc, #132]	; (8006bac <TIM_OC1_SetConfig+0xdc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC1_SetConfig+0x64>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <TIM_OC1_SetConfig+0xe0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0308 	bic.w	r3, r3, #8
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0304 	bic.w	r3, r3, #4
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <TIM_OC1_SetConfig+0xdc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC1_SetConfig+0x8e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <TIM_OC1_SetConfig+0xe0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d111      	bne.n	8006b82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	fffeff8f 	.word	0xfffeff8f
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40010400 	.word	0x40010400

08006bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0210 	bic.w	r2, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <TIM_OC2_SetConfig+0xe4>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 0320 	bic.w	r3, r3, #32
 8006bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a23      	ldr	r2, [pc, #140]	; (8006c9c <TIM_OC2_SetConfig+0xe8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_OC2_SetConfig+0x68>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <TIM_OC2_SetConfig+0xec>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10d      	bne.n	8006c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <TIM_OC2_SetConfig+0xe8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_OC2_SetConfig+0x94>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <TIM_OC2_SetConfig+0xec>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d113      	bne.n	8006c70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	feff8fff 	.word	0xfeff8fff
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4b2d      	ldr	r3, [pc, #180]	; (8006d84 <TIM_OC3_SetConfig+0xe0>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a22      	ldr	r2, [pc, #136]	; (8006d88 <TIM_OC3_SetConfig+0xe4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC3_SetConfig+0x66>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <TIM_OC3_SetConfig+0xe8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d10d      	bne.n	8006d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <TIM_OC3_SetConfig+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_OC3_SetConfig+0x92>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <TIM_OC3_SetConfig+0xe8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d113      	bne.n	8006d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	fffeff8f 	.word	0xfffeff8f
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400

08006d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <TIM_OC4_SetConfig+0xa4>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	031b      	lsls	r3, r3, #12
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a13      	ldr	r2, [pc, #76]	; (8006e38 <TIM_OC4_SetConfig+0xa8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_OC4_SetConfig+0x68>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a12      	ldr	r2, [pc, #72]	; (8006e3c <TIM_OC4_SetConfig+0xac>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d109      	bne.n	8006e0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	019b      	lsls	r3, r3, #6
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	feff8fff 	.word	0xfeff8fff
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40010400 	.word	0x40010400

08006e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <TIM_OC5_SetConfig+0x98>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a12      	ldr	r2, [pc, #72]	; (8006edc <TIM_OC5_SetConfig+0x9c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_OC5_SetConfig+0x5e>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a11      	ldr	r2, [pc, #68]	; (8006ee0 <TIM_OC5_SetConfig+0xa0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d109      	bne.n	8006eb2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	fffeff8f 	.word	0xfffeff8f
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <TIM_OC6_SetConfig+0x9c>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	051b      	lsls	r3, r3, #20
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <TIM_OC6_SetConfig+0xa0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC6_SetConfig+0x60>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a12      	ldr	r2, [pc, #72]	; (8006f88 <TIM_OC6_SetConfig+0xa4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d109      	bne.n	8006f58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	029b      	lsls	r3, r3, #10
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	feff8fff 	.word	0xfeff8fff
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40010400 	.word	0x40010400

08006f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f023 0201 	bic.w	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f023 030a 	bic.w	r3, r3, #10
 8006fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b087      	sub	sp, #28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0210 	bic.w	r2, r3, #16
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	031b      	lsls	r3, r3, #12
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	f043 0307 	orr.w	r3, r3, #7
 800706c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800709a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	021a      	lsls	r2, r3, #8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	609a      	str	r2, [r3, #8]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2201      	movs	r2, #1
 80070d4:	fa02 f303 	lsl.w	r3, r2, r3
 80070d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1a      	ldr	r2, [r3, #32]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1a      	ldr	r2, [r3, #32]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	431a      	orrs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e06d      	b.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d108      	bne.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800715e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a20      	ldr	r2, [pc, #128]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d01d      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1d      	ldr	r2, [pc, #116]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1a      	ldr	r2, [pc, #104]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a15      	ldr	r2, [pc, #84]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10c      	bne.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40001800 	.word	0x40001800

08007228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e040      	b.n	80072bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fb fbb0 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	; 0x24
 8007254:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0201 	bic.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8b0 	bl	80073cc <UART_SetConfig>
 800726c:	4603      	mov	r3, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e022      	b.n	80072bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fb08 	bl	8007894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fb8f 	bl	80079d8 <UART_CheckIdleState>
 80072ba:	4603      	mov	r3, r0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d171      	bne.n	80073c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_UART_Transmit+0x24>
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e06a      	b.n	80073c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2221      	movs	r2, #33	; 0x21
 80072f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072fa:	f7fb fdb9 	bl	8002e70 <HAL_GetTick>
 80072fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	88fa      	ldrh	r2, [r7, #6]
 800730c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007318:	d108      	bne.n	800732c <HAL_UART_Transmit+0x68>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	e003      	b.n	8007334 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007334:	e02c      	b.n	8007390 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2200      	movs	r2, #0
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fb80 	bl	8007a46 <UART_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e038      	b.n	80073c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	3302      	adds	r3, #2
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	e007      	b.n	800737e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	3301      	adds	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1cc      	bne.n	8007336 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2200      	movs	r2, #0
 80073a4:	2140      	movs	r1, #64	; 0x40
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fb4d 	bl	8007a46 <UART_WaitOnFlagUntilTimeout>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e005      	b.n	80073c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	e000      	b.n	80073c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4ba6      	ldr	r3, [pc, #664]	; (8007690 <UART_SetConfig+0x2c4>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	6979      	ldr	r1, [r7, #20]
 8007400:	430b      	orrs	r3, r1
 8007402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	430a      	orrs	r2, r1
 800743c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a94      	ldr	r2, [pc, #592]	; (8007694 <UART_SetConfig+0x2c8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d120      	bne.n	800748a <UART_SetConfig+0xbe>
 8007448:	4b93      	ldr	r3, [pc, #588]	; (8007698 <UART_SetConfig+0x2cc>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d816      	bhi.n	8007484 <UART_SetConfig+0xb8>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0x90>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007479 	.word	0x08007479
 8007464:	08007473 	.word	0x08007473
 8007468:	0800747f 	.word	0x0800747f
 800746c:	2301      	movs	r3, #1
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e150      	b.n	8007714 <UART_SetConfig+0x348>
 8007472:	2302      	movs	r3, #2
 8007474:	77fb      	strb	r3, [r7, #31]
 8007476:	e14d      	b.n	8007714 <UART_SetConfig+0x348>
 8007478:	2304      	movs	r3, #4
 800747a:	77fb      	strb	r3, [r7, #31]
 800747c:	e14a      	b.n	8007714 <UART_SetConfig+0x348>
 800747e:	2308      	movs	r3, #8
 8007480:	77fb      	strb	r3, [r7, #31]
 8007482:	e147      	b.n	8007714 <UART_SetConfig+0x348>
 8007484:	2310      	movs	r3, #16
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e144      	b.n	8007714 <UART_SetConfig+0x348>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a83      	ldr	r2, [pc, #524]	; (800769c <UART_SetConfig+0x2d0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d132      	bne.n	80074fa <UART_SetConfig+0x12e>
 8007494:	4b80      	ldr	r3, [pc, #512]	; (8007698 <UART_SetConfig+0x2cc>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	f003 030c 	and.w	r3, r3, #12
 800749e:	2b0c      	cmp	r3, #12
 80074a0:	d828      	bhi.n	80074f4 <UART_SetConfig+0x128>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0xdc>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	080074f5 	.word	0x080074f5
 80074b0:	080074f5 	.word	0x080074f5
 80074b4:	080074f5 	.word	0x080074f5
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	080074f5 	.word	0x080074f5
 80074c0:	080074f5 	.word	0x080074f5
 80074c4:	080074f5 	.word	0x080074f5
 80074c8:	080074e3 	.word	0x080074e3
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074ef 	.word	0x080074ef
 80074dc:	2300      	movs	r3, #0
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e118      	b.n	8007714 <UART_SetConfig+0x348>
 80074e2:	2302      	movs	r3, #2
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e115      	b.n	8007714 <UART_SetConfig+0x348>
 80074e8:	2304      	movs	r3, #4
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e112      	b.n	8007714 <UART_SetConfig+0x348>
 80074ee:	2308      	movs	r3, #8
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e10f      	b.n	8007714 <UART_SetConfig+0x348>
 80074f4:	2310      	movs	r3, #16
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e10c      	b.n	8007714 <UART_SetConfig+0x348>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a68      	ldr	r2, [pc, #416]	; (80076a0 <UART_SetConfig+0x2d4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d120      	bne.n	8007546 <UART_SetConfig+0x17a>
 8007504:	4b64      	ldr	r3, [pc, #400]	; (8007698 <UART_SetConfig+0x2cc>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800750e:	2b30      	cmp	r3, #48	; 0x30
 8007510:	d013      	beq.n	800753a <UART_SetConfig+0x16e>
 8007512:	2b30      	cmp	r3, #48	; 0x30
 8007514:	d814      	bhi.n	8007540 <UART_SetConfig+0x174>
 8007516:	2b20      	cmp	r3, #32
 8007518:	d009      	beq.n	800752e <UART_SetConfig+0x162>
 800751a:	2b20      	cmp	r3, #32
 800751c:	d810      	bhi.n	8007540 <UART_SetConfig+0x174>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <UART_SetConfig+0x15c>
 8007522:	2b10      	cmp	r3, #16
 8007524:	d006      	beq.n	8007534 <UART_SetConfig+0x168>
 8007526:	e00b      	b.n	8007540 <UART_SetConfig+0x174>
 8007528:	2300      	movs	r3, #0
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e0f2      	b.n	8007714 <UART_SetConfig+0x348>
 800752e:	2302      	movs	r3, #2
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e0ef      	b.n	8007714 <UART_SetConfig+0x348>
 8007534:	2304      	movs	r3, #4
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e0ec      	b.n	8007714 <UART_SetConfig+0x348>
 800753a:	2308      	movs	r3, #8
 800753c:	77fb      	strb	r3, [r7, #31]
 800753e:	e0e9      	b.n	8007714 <UART_SetConfig+0x348>
 8007540:	2310      	movs	r3, #16
 8007542:	77fb      	strb	r3, [r7, #31]
 8007544:	e0e6      	b.n	8007714 <UART_SetConfig+0x348>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a56      	ldr	r2, [pc, #344]	; (80076a4 <UART_SetConfig+0x2d8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d120      	bne.n	8007592 <UART_SetConfig+0x1c6>
 8007550:	4b51      	ldr	r3, [pc, #324]	; (8007698 <UART_SetConfig+0x2cc>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800755a:	2bc0      	cmp	r3, #192	; 0xc0
 800755c:	d013      	beq.n	8007586 <UART_SetConfig+0x1ba>
 800755e:	2bc0      	cmp	r3, #192	; 0xc0
 8007560:	d814      	bhi.n	800758c <UART_SetConfig+0x1c0>
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d009      	beq.n	800757a <UART_SetConfig+0x1ae>
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d810      	bhi.n	800758c <UART_SetConfig+0x1c0>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <UART_SetConfig+0x1a8>
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d006      	beq.n	8007580 <UART_SetConfig+0x1b4>
 8007572:	e00b      	b.n	800758c <UART_SetConfig+0x1c0>
 8007574:	2300      	movs	r3, #0
 8007576:	77fb      	strb	r3, [r7, #31]
 8007578:	e0cc      	b.n	8007714 <UART_SetConfig+0x348>
 800757a:	2302      	movs	r3, #2
 800757c:	77fb      	strb	r3, [r7, #31]
 800757e:	e0c9      	b.n	8007714 <UART_SetConfig+0x348>
 8007580:	2304      	movs	r3, #4
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e0c6      	b.n	8007714 <UART_SetConfig+0x348>
 8007586:	2308      	movs	r3, #8
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e0c3      	b.n	8007714 <UART_SetConfig+0x348>
 800758c:	2310      	movs	r3, #16
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e0c0      	b.n	8007714 <UART_SetConfig+0x348>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a44      	ldr	r2, [pc, #272]	; (80076a8 <UART_SetConfig+0x2dc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d125      	bne.n	80075e8 <UART_SetConfig+0x21c>
 800759c:	4b3e      	ldr	r3, [pc, #248]	; (8007698 <UART_SetConfig+0x2cc>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075aa:	d017      	beq.n	80075dc <UART_SetConfig+0x210>
 80075ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b0:	d817      	bhi.n	80075e2 <UART_SetConfig+0x216>
 80075b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b6:	d00b      	beq.n	80075d0 <UART_SetConfig+0x204>
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075bc:	d811      	bhi.n	80075e2 <UART_SetConfig+0x216>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <UART_SetConfig+0x1fe>
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d006      	beq.n	80075d6 <UART_SetConfig+0x20a>
 80075c8:	e00b      	b.n	80075e2 <UART_SetConfig+0x216>
 80075ca:	2300      	movs	r3, #0
 80075cc:	77fb      	strb	r3, [r7, #31]
 80075ce:	e0a1      	b.n	8007714 <UART_SetConfig+0x348>
 80075d0:	2302      	movs	r3, #2
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e09e      	b.n	8007714 <UART_SetConfig+0x348>
 80075d6:	2304      	movs	r3, #4
 80075d8:	77fb      	strb	r3, [r7, #31]
 80075da:	e09b      	b.n	8007714 <UART_SetConfig+0x348>
 80075dc:	2308      	movs	r3, #8
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e098      	b.n	8007714 <UART_SetConfig+0x348>
 80075e2:	2310      	movs	r3, #16
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e095      	b.n	8007714 <UART_SetConfig+0x348>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a2f      	ldr	r2, [pc, #188]	; (80076ac <UART_SetConfig+0x2e0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d125      	bne.n	800763e <UART_SetConfig+0x272>
 80075f2:	4b29      	ldr	r3, [pc, #164]	; (8007698 <UART_SetConfig+0x2cc>)
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007600:	d017      	beq.n	8007632 <UART_SetConfig+0x266>
 8007602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007606:	d817      	bhi.n	8007638 <UART_SetConfig+0x26c>
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760c:	d00b      	beq.n	8007626 <UART_SetConfig+0x25a>
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d811      	bhi.n	8007638 <UART_SetConfig+0x26c>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <UART_SetConfig+0x254>
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d006      	beq.n	800762c <UART_SetConfig+0x260>
 800761e:	e00b      	b.n	8007638 <UART_SetConfig+0x26c>
 8007620:	2301      	movs	r3, #1
 8007622:	77fb      	strb	r3, [r7, #31]
 8007624:	e076      	b.n	8007714 <UART_SetConfig+0x348>
 8007626:	2302      	movs	r3, #2
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	e073      	b.n	8007714 <UART_SetConfig+0x348>
 800762c:	2304      	movs	r3, #4
 800762e:	77fb      	strb	r3, [r7, #31]
 8007630:	e070      	b.n	8007714 <UART_SetConfig+0x348>
 8007632:	2308      	movs	r3, #8
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e06d      	b.n	8007714 <UART_SetConfig+0x348>
 8007638:	2310      	movs	r3, #16
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e06a      	b.n	8007714 <UART_SetConfig+0x348>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <UART_SetConfig+0x2e4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d138      	bne.n	80076ba <UART_SetConfig+0x2ee>
 8007648:	4b13      	ldr	r3, [pc, #76]	; (8007698 <UART_SetConfig+0x2cc>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007656:	d017      	beq.n	8007688 <UART_SetConfig+0x2bc>
 8007658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800765c:	d82a      	bhi.n	80076b4 <UART_SetConfig+0x2e8>
 800765e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007662:	d00b      	beq.n	800767c <UART_SetConfig+0x2b0>
 8007664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007668:	d824      	bhi.n	80076b4 <UART_SetConfig+0x2e8>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <UART_SetConfig+0x2aa>
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007672:	d006      	beq.n	8007682 <UART_SetConfig+0x2b6>
 8007674:	e01e      	b.n	80076b4 <UART_SetConfig+0x2e8>
 8007676:	2300      	movs	r3, #0
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e04b      	b.n	8007714 <UART_SetConfig+0x348>
 800767c:	2302      	movs	r3, #2
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e048      	b.n	8007714 <UART_SetConfig+0x348>
 8007682:	2304      	movs	r3, #4
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e045      	b.n	8007714 <UART_SetConfig+0x348>
 8007688:	2308      	movs	r3, #8
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e042      	b.n	8007714 <UART_SetConfig+0x348>
 800768e:	bf00      	nop
 8007690:	efff69f3 	.word	0xefff69f3
 8007694:	40011000 	.word	0x40011000
 8007698:	40023800 	.word	0x40023800
 800769c:	40004400 	.word	0x40004400
 80076a0:	40004800 	.word	0x40004800
 80076a4:	40004c00 	.word	0x40004c00
 80076a8:	40005000 	.word	0x40005000
 80076ac:	40011400 	.word	0x40011400
 80076b0:	40007800 	.word	0x40007800
 80076b4:	2310      	movs	r3, #16
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e02c      	b.n	8007714 <UART_SetConfig+0x348>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a72      	ldr	r2, [pc, #456]	; (8007888 <UART_SetConfig+0x4bc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d125      	bne.n	8007710 <UART_SetConfig+0x344>
 80076c4:	4b71      	ldr	r3, [pc, #452]	; (800788c <UART_SetConfig+0x4c0>)
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076d2:	d017      	beq.n	8007704 <UART_SetConfig+0x338>
 80076d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076d8:	d817      	bhi.n	800770a <UART_SetConfig+0x33e>
 80076da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076de:	d00b      	beq.n	80076f8 <UART_SetConfig+0x32c>
 80076e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e4:	d811      	bhi.n	800770a <UART_SetConfig+0x33e>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <UART_SetConfig+0x326>
 80076ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ee:	d006      	beq.n	80076fe <UART_SetConfig+0x332>
 80076f0:	e00b      	b.n	800770a <UART_SetConfig+0x33e>
 80076f2:	2300      	movs	r3, #0
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e00d      	b.n	8007714 <UART_SetConfig+0x348>
 80076f8:	2302      	movs	r3, #2
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e00a      	b.n	8007714 <UART_SetConfig+0x348>
 80076fe:	2304      	movs	r3, #4
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e007      	b.n	8007714 <UART_SetConfig+0x348>
 8007704:	2308      	movs	r3, #8
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e004      	b.n	8007714 <UART_SetConfig+0x348>
 800770a:	2310      	movs	r3, #16
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e001      	b.n	8007714 <UART_SetConfig+0x348>
 8007710:	2310      	movs	r3, #16
 8007712:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771c:	d15b      	bne.n	80077d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d828      	bhi.n	8007776 <UART_SetConfig+0x3aa>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0x360>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007751 	.word	0x08007751
 8007730:	08007759 	.word	0x08007759
 8007734:	08007761 	.word	0x08007761
 8007738:	08007777 	.word	0x08007777
 800773c:	08007767 	.word	0x08007767
 8007740:	08007777 	.word	0x08007777
 8007744:	08007777 	.word	0x08007777
 8007748:	08007777 	.word	0x08007777
 800774c:	0800776f 	.word	0x0800776f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007750:	f7fe f976 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 8007754:	61b8      	str	r0, [r7, #24]
        break;
 8007756:	e013      	b.n	8007780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007758:	f7fe f986 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 800775c:	61b8      	str	r0, [r7, #24]
        break;
 800775e:	e00f      	b.n	8007780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007760:	4b4b      	ldr	r3, [pc, #300]	; (8007890 <UART_SetConfig+0x4c4>)
 8007762:	61bb      	str	r3, [r7, #24]
        break;
 8007764:	e00c      	b.n	8007780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007766:	f7fe f859 	bl	800581c <HAL_RCC_GetSysClockFreq>
 800776a:	61b8      	str	r0, [r7, #24]
        break;
 800776c:	e008      	b.n	8007780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007772:	61bb      	str	r3, [r7, #24]
        break;
 8007774:	e004      	b.n	8007780 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	77bb      	strb	r3, [r7, #30]
        break;
 800777e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d074      	beq.n	8007870 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	005a      	lsls	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	441a      	add	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	d916      	bls.n	80077d0 <UART_SetConfig+0x404>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a8:	d212      	bcs.n	80077d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f023 030f 	bic.w	r3, r3, #15
 80077b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	b29a      	uxth	r2, r3
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	89fa      	ldrh	r2, [r7, #14]
 80077cc:	60da      	str	r2, [r3, #12]
 80077ce:	e04f      	b.n	8007870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	77bb      	strb	r3, [r7, #30]
 80077d4:	e04c      	b.n	8007870 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077d6:	7ffb      	ldrb	r3, [r7, #31]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d828      	bhi.n	800782e <UART_SetConfig+0x462>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x418>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007819 	.word	0x08007819
 80077f0:	0800782f 	.word	0x0800782f
 80077f4:	0800781f 	.word	0x0800781f
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	0800782f 	.word	0x0800782f
 8007804:	08007827 	.word	0x08007827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fe f91a 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 800780c:	61b8      	str	r0, [r7, #24]
        break;
 800780e:	e013      	b.n	8007838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007810:	f7fe f92a 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8007814:	61b8      	str	r0, [r7, #24]
        break;
 8007816:	e00f      	b.n	8007838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007818:	4b1d      	ldr	r3, [pc, #116]	; (8007890 <UART_SetConfig+0x4c4>)
 800781a:	61bb      	str	r3, [r7, #24]
        break;
 800781c:	e00c      	b.n	8007838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7fd fffd 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8007822:	61b8      	str	r0, [r7, #24]
        break;
 8007824:	e008      	b.n	8007838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782a:	61bb      	str	r3, [r7, #24]
        break;
 800782c:	e004      	b.n	8007838 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	77bb      	strb	r3, [r7, #30]
        break;
 8007836:	bf00      	nop
    }

    if (pclk != 0U)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d018      	beq.n	8007870 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	085a      	lsrs	r2, r3, #1
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	441a      	add	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d909      	bls.n	800786c <UART_SetConfig+0x4a0>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785e:	d205      	bcs.n	800786c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	b29a      	uxth	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60da      	str	r2, [r3, #12]
 800786a:	e001      	b.n	8007870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800787c:	7fbb      	ldrb	r3, [r7, #30]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3720      	adds	r7, #32
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40007c00 	.word	0x40007c00
 800788c:	40023800 	.word	0x40023800
 8007890:	00f42400 	.word	0x00f42400

08007894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d01a      	beq.n	80079aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007992:	d10a      	bne.n	80079aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af02      	add	r7, sp, #8
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079e8:	f7fb fa42 	bl	8002e70 <HAL_GetTick>
 80079ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d10e      	bne.n	8007a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f81b 	bl	8007a46 <UART_WaitOnFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e011      	b.n	8007a3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b09c      	sub	sp, #112	; 0x70
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	603b      	str	r3, [r7, #0]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a56:	e0a7      	b.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5e:	f000 80a3 	beq.w	8007ba8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a62:	f7fb fa05 	bl	8002e70 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d302      	bcc.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d13f      	bne.n	8007af8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e6      	bne.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aca:	64ba      	str	r2, [r7, #72]	; 0x48
 8007acc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e5      	bne.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e068      	b.n	8007bca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d050      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b14:	d148      	bne.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	613b      	str	r3, [r7, #16]
   return(result);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b72:	623a      	str	r2, [r7, #32]
 8007b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	69f9      	ldr	r1, [r7, #28]
 8007b78:	6a3a      	ldr	r2, [r7, #32]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e010      	b.n	8007bca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	69da      	ldr	r2, [r3, #28]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	bf0c      	ite	eq
 8007bb8:	2301      	moveq	r3, #1
 8007bba:	2300      	movne	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	f43f af48 	beq.w	8007a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3770      	adds	r7, #112	; 0x70
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	f107 001c 	add.w	r0, r7, #28
 8007be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d120      	bne.n	8007c2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	4b20      	ldr	r3, [pc, #128]	; (8007c80 <USB_CoreInit+0xac>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d105      	bne.n	8007c22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa96 	bl	8008154 <USB_CoreReset>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
 8007c2c:	e010      	b.n	8007c50 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa8a 	bl	8008154 <USB_CoreReset>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10b      	bne.n	8007c6e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f043 0206 	orr.w	r2, r3, #6
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c7a:	b004      	add	sp, #16
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	ffbdffbf 	.word	0xffbdffbf

08007c84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f023 0201 	bic.w	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d115      	bne.n	8007cf4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f7fb f8d7 	bl	8002e88 <HAL_Delay>
      ms++;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa29 	bl	8008138 <USB_GetMode>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d01e      	beq.n	8007d2a <USB_SetCurrentMode+0x84>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b31      	cmp	r3, #49	; 0x31
 8007cf0:	d9f0      	bls.n	8007cd4 <USB_SetCurrentMode+0x2e>
 8007cf2:	e01a      	b.n	8007d2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d115      	bne.n	8007d26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d06:	2001      	movs	r0, #1
 8007d08:	f7fb f8be 	bl	8002e88 <HAL_Delay>
      ms++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa10 	bl	8008138 <USB_GetMode>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <USB_SetCurrentMode+0x84>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b31      	cmp	r3, #49	; 0x31
 8007d22:	d9f0      	bls.n	8007d06 <USB_SetCurrentMode+0x60>
 8007d24:	e001      	b.n	8007d2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e005      	b.n	8007d36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b32      	cmp	r3, #50	; 0x32
 8007d2e:	d101      	bne.n	8007d34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d40:	b084      	sub	sp, #16
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	e009      	b.n	8007d74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3340      	adds	r3, #64	; 0x40
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3301      	adds	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2b0e      	cmp	r3, #14
 8007d78:	d9f2      	bls.n	8007d60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d11c      	bne.n	8007dba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e005      	b.n	8007dc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	4619      	mov	r1, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de0:	461a      	mov	r2, r3
 8007de2:	680b      	ldr	r3, [r1, #0]
 8007de4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d10c      	bne.n	8007e06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007df2:	2100      	movs	r1, #0
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f965 	bl	80080c4 <USB_SetDevSpeed>
 8007dfa:	e008      	b.n	8007e0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f960 	bl	80080c4 <USB_SetDevSpeed>
 8007e04:	e003      	b.n	8007e0e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e06:	2103      	movs	r1, #3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f95b 	bl	80080c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e0e:	2110      	movs	r1, #16
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8f3 	bl	8007ffc <USB_FlushTxFifo>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f91f 	bl	8008064 <USB_FlushRxFifo>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e36:	461a      	mov	r2, r3
 8007e38:	2300      	movs	r3, #0
 8007e3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e42:	461a      	mov	r2, r3
 8007e44:	2300      	movs	r3, #0
 8007e46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	461a      	mov	r2, r3
 8007e50:	2300      	movs	r3, #0
 8007e52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e54:	2300      	movs	r3, #0
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	e043      	b.n	8007ee2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e70:	d118      	bne.n	8007ea4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e84:	461a      	mov	r2, r3
 8007e86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e013      	b.n	8007eb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e008      	b.n	8007eb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d3b7      	bcc.n	8007e5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	e043      	b.n	8007f78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f06:	d118      	bne.n	8007f3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	e013      	b.n	8007f4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	461a      	mov	r2, r3
 8007f32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	e008      	b.n	8007f4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f46:	461a      	mov	r2, r3
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3301      	adds	r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d3b7      	bcc.n	8007ef0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f043 0210 	orr.w	r2, r3, #16
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <USB_DevInit+0x2b4>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d005      	beq.n	8007fd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f043 0208 	orr.w	r2, r3, #8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d105      	bne.n	8007fe4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699a      	ldr	r2, [r3, #24]
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <USB_DevInit+0x2b8>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff0:	b004      	add	sp, #16
 8007ff2:	4770      	bx	lr
 8007ff4:	803c3800 	.word	0x803c3800
 8007ff8:	40000004 	.word	0x40000004

08007ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4a13      	ldr	r2, [pc, #76]	; (8008060 <USB_FlushTxFifo+0x64>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d901      	bls.n	800801c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e01b      	b.n	8008054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	daf2      	bge.n	800800a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	019b      	lsls	r3, r3, #6
 800802c:	f043 0220 	orr.w	r2, r3, #32
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4a08      	ldr	r2, [pc, #32]	; (8008060 <USB_FlushTxFifo+0x64>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d901      	bls.n	8008046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e006      	b.n	8008054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b20      	cmp	r3, #32
 8008050:	d0f0      	beq.n	8008034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	00030d40 	.word	0x00030d40

08008064 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3301      	adds	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a11      	ldr	r2, [pc, #68]	; (80080c0 <USB_FlushRxFifo+0x5c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d901      	bls.n	8008082 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e018      	b.n	80080b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	daf2      	bge.n	8008070 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2210      	movs	r2, #16
 8008092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a08      	ldr	r2, [pc, #32]	; (80080c0 <USB_FlushRxFifo+0x5c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e006      	b.n	80080b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b10      	cmp	r3, #16
 80080b0:	d0f0      	beq.n	8008094 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	00030d40 	.word	0x00030d40

080080c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	68f9      	ldr	r1, [r7, #12]
 80080e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080e4:	4313      	orrs	r3, r2
 80080e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008110:	f023 0303 	bic.w	r3, r3, #3
 8008114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008124:	f043 0302 	orr.w	r3, r3, #2
 8008128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f003 0301 	and.w	r3, r3, #1
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <USB_CoreReset+0x64>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d901      	bls.n	8008172 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e01b      	b.n	80081aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	daf2      	bge.n	8008160 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a09      	ldr	r2, [pc, #36]	; (80081b8 <USB_CoreReset+0x64>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d901      	bls.n	800819c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e006      	b.n	80081aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d0f0      	beq.n	800818a <USB_CoreReset+0x36>

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	00030d40 	.word	0x00030d40

080081bc <__cvt>:
 80081bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	ec55 4b10 	vmov	r4, r5, d0
 80081c4:	2d00      	cmp	r5, #0
 80081c6:	460e      	mov	r6, r1
 80081c8:	4619      	mov	r1, r3
 80081ca:	462b      	mov	r3, r5
 80081cc:	bfbb      	ittet	lt
 80081ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081d2:	461d      	movlt	r5, r3
 80081d4:	2300      	movge	r3, #0
 80081d6:	232d      	movlt	r3, #45	; 0x2d
 80081d8:	700b      	strb	r3, [r1, #0]
 80081da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081e0:	4691      	mov	r9, r2
 80081e2:	f023 0820 	bic.w	r8, r3, #32
 80081e6:	bfbc      	itt	lt
 80081e8:	4622      	movlt	r2, r4
 80081ea:	4614      	movlt	r4, r2
 80081ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081f0:	d005      	beq.n	80081fe <__cvt+0x42>
 80081f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081f6:	d100      	bne.n	80081fa <__cvt+0x3e>
 80081f8:	3601      	adds	r6, #1
 80081fa:	2102      	movs	r1, #2
 80081fc:	e000      	b.n	8008200 <__cvt+0x44>
 80081fe:	2103      	movs	r1, #3
 8008200:	ab03      	add	r3, sp, #12
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	ab02      	add	r3, sp, #8
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	ec45 4b10 	vmov	d0, r4, r5
 800820c:	4653      	mov	r3, sl
 800820e:	4632      	mov	r2, r6
 8008210:	f000 fe6a 	bl	8008ee8 <_dtoa_r>
 8008214:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008218:	4607      	mov	r7, r0
 800821a:	d102      	bne.n	8008222 <__cvt+0x66>
 800821c:	f019 0f01 	tst.w	r9, #1
 8008220:	d022      	beq.n	8008268 <__cvt+0xac>
 8008222:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008226:	eb07 0906 	add.w	r9, r7, r6
 800822a:	d110      	bne.n	800824e <__cvt+0x92>
 800822c:	783b      	ldrb	r3, [r7, #0]
 800822e:	2b30      	cmp	r3, #48	; 0x30
 8008230:	d10a      	bne.n	8008248 <__cvt+0x8c>
 8008232:	2200      	movs	r2, #0
 8008234:	2300      	movs	r3, #0
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800823e:	b918      	cbnz	r0, 8008248 <__cvt+0x8c>
 8008240:	f1c6 0601 	rsb	r6, r6, #1
 8008244:	f8ca 6000 	str.w	r6, [sl]
 8008248:	f8da 3000 	ldr.w	r3, [sl]
 800824c:	4499      	add	r9, r3
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800825a:	b108      	cbz	r0, 8008260 <__cvt+0xa4>
 800825c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008260:	2230      	movs	r2, #48	; 0x30
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	454b      	cmp	r3, r9
 8008266:	d307      	bcc.n	8008278 <__cvt+0xbc>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800826c:	1bdb      	subs	r3, r3, r7
 800826e:	4638      	mov	r0, r7
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	b004      	add	sp, #16
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	1c59      	adds	r1, r3, #1
 800827a:	9103      	str	r1, [sp, #12]
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	e7f0      	b.n	8008262 <__cvt+0xa6>

08008280 <__exponent>:
 8008280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008282:	4603      	mov	r3, r0
 8008284:	2900      	cmp	r1, #0
 8008286:	bfb8      	it	lt
 8008288:	4249      	neglt	r1, r1
 800828a:	f803 2b02 	strb.w	r2, [r3], #2
 800828e:	bfb4      	ite	lt
 8008290:	222d      	movlt	r2, #45	; 0x2d
 8008292:	222b      	movge	r2, #43	; 0x2b
 8008294:	2909      	cmp	r1, #9
 8008296:	7042      	strb	r2, [r0, #1]
 8008298:	dd2a      	ble.n	80082f0 <__exponent+0x70>
 800829a:	f10d 0207 	add.w	r2, sp, #7
 800829e:	4617      	mov	r7, r2
 80082a0:	260a      	movs	r6, #10
 80082a2:	4694      	mov	ip, r2
 80082a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80082a8:	fb06 1415 	mls	r4, r6, r5, r1
 80082ac:	3430      	adds	r4, #48	; 0x30
 80082ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80082b2:	460c      	mov	r4, r1
 80082b4:	2c63      	cmp	r4, #99	; 0x63
 80082b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80082ba:	4629      	mov	r1, r5
 80082bc:	dcf1      	bgt.n	80082a2 <__exponent+0x22>
 80082be:	3130      	adds	r1, #48	; 0x30
 80082c0:	f1ac 0402 	sub.w	r4, ip, #2
 80082c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80082c8:	1c41      	adds	r1, r0, #1
 80082ca:	4622      	mov	r2, r4
 80082cc:	42ba      	cmp	r2, r7
 80082ce:	d30a      	bcc.n	80082e6 <__exponent+0x66>
 80082d0:	f10d 0209 	add.w	r2, sp, #9
 80082d4:	eba2 020c 	sub.w	r2, r2, ip
 80082d8:	42bc      	cmp	r4, r7
 80082da:	bf88      	it	hi
 80082dc:	2200      	movhi	r2, #0
 80082de:	4413      	add	r3, r2
 80082e0:	1a18      	subs	r0, r3, r0
 80082e2:	b003      	add	sp, #12
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80082ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80082ee:	e7ed      	b.n	80082cc <__exponent+0x4c>
 80082f0:	2330      	movs	r3, #48	; 0x30
 80082f2:	3130      	adds	r1, #48	; 0x30
 80082f4:	7083      	strb	r3, [r0, #2]
 80082f6:	70c1      	strb	r1, [r0, #3]
 80082f8:	1d03      	adds	r3, r0, #4
 80082fa:	e7f1      	b.n	80082e0 <__exponent+0x60>

080082fc <_printf_float>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	ed2d 8b02 	vpush	{d8}
 8008304:	b08d      	sub	sp, #52	; 0x34
 8008306:	460c      	mov	r4, r1
 8008308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800830c:	4616      	mov	r6, r2
 800830e:	461f      	mov	r7, r3
 8008310:	4605      	mov	r5, r0
 8008312:	f000 fce7 	bl	8008ce4 <_localeconv_r>
 8008316:	f8d0 a000 	ldr.w	sl, [r0]
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ffc8 	bl	80002b0 <strlen>
 8008320:	2300      	movs	r3, #0
 8008322:	930a      	str	r3, [sp, #40]	; 0x28
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	9305      	str	r3, [sp, #20]
 8008328:	f8d8 3000 	ldr.w	r3, [r8]
 800832c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008330:	3307      	adds	r3, #7
 8008332:	f023 0307 	bic.w	r3, r3, #7
 8008336:	f103 0208 	add.w	r2, r3, #8
 800833a:	f8c8 2000 	str.w	r2, [r8]
 800833e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008346:	9307      	str	r3, [sp, #28]
 8008348:	f8cd 8018 	str.w	r8, [sp, #24]
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008358:	4b9e      	ldr	r3, [pc, #632]	; (80085d4 <_printf_float+0x2d8>)
 800835a:	f04f 32ff 	mov.w	r2, #4294967295
 800835e:	f7f8 fc05 	bl	8000b6c <__aeabi_dcmpun>
 8008362:	bb88      	cbnz	r0, 80083c8 <_printf_float+0xcc>
 8008364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008368:	4b9a      	ldr	r3, [pc, #616]	; (80085d4 <_printf_float+0x2d8>)
 800836a:	f04f 32ff 	mov.w	r2, #4294967295
 800836e:	f7f8 fbdf 	bl	8000b30 <__aeabi_dcmple>
 8008372:	bb48      	cbnz	r0, 80083c8 <_printf_float+0xcc>
 8008374:	2200      	movs	r2, #0
 8008376:	2300      	movs	r3, #0
 8008378:	4640      	mov	r0, r8
 800837a:	4649      	mov	r1, r9
 800837c:	f7f8 fbce 	bl	8000b1c <__aeabi_dcmplt>
 8008380:	b110      	cbz	r0, 8008388 <_printf_float+0x8c>
 8008382:	232d      	movs	r3, #45	; 0x2d
 8008384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008388:	4a93      	ldr	r2, [pc, #588]	; (80085d8 <_printf_float+0x2dc>)
 800838a:	4b94      	ldr	r3, [pc, #592]	; (80085dc <_printf_float+0x2e0>)
 800838c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008390:	bf94      	ite	ls
 8008392:	4690      	movls	r8, r2
 8008394:	4698      	movhi	r8, r3
 8008396:	2303      	movs	r3, #3
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	9b05      	ldr	r3, [sp, #20]
 800839c:	f023 0304 	bic.w	r3, r3, #4
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	f04f 0900 	mov.w	r9, #0
 80083a6:	9700      	str	r7, [sp, #0]
 80083a8:	4633      	mov	r3, r6
 80083aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f9da 	bl	8008768 <_printf_common>
 80083b4:	3001      	adds	r0, #1
 80083b6:	f040 8090 	bne.w	80084da <_printf_float+0x1de>
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	b00d      	add	sp, #52	; 0x34
 80083c0:	ecbd 8b02 	vpop	{d8}
 80083c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	4649      	mov	r1, r9
 80083d0:	f7f8 fbcc 	bl	8000b6c <__aeabi_dcmpun>
 80083d4:	b140      	cbz	r0, 80083e8 <_printf_float+0xec>
 80083d6:	464b      	mov	r3, r9
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfbc      	itt	lt
 80083dc:	232d      	movlt	r3, #45	; 0x2d
 80083de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083e2:	4a7f      	ldr	r2, [pc, #508]	; (80085e0 <_printf_float+0x2e4>)
 80083e4:	4b7f      	ldr	r3, [pc, #508]	; (80085e4 <_printf_float+0x2e8>)
 80083e6:	e7d1      	b.n	800838c <_printf_float+0x90>
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083ee:	9206      	str	r2, [sp, #24]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	d13f      	bne.n	8008474 <_printf_float+0x178>
 80083f4:	2306      	movs	r3, #6
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	9b05      	ldr	r3, [sp, #20]
 80083fa:	6861      	ldr	r1, [r4, #4]
 80083fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008400:	2300      	movs	r3, #0
 8008402:	9303      	str	r3, [sp, #12]
 8008404:	ab0a      	add	r3, sp, #40	; 0x28
 8008406:	e9cd b301 	strd	fp, r3, [sp, #4]
 800840a:	ab09      	add	r3, sp, #36	; 0x24
 800840c:	ec49 8b10 	vmov	d0, r8, r9
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008418:	4628      	mov	r0, r5
 800841a:	f7ff fecf 	bl	80081bc <__cvt>
 800841e:	9b06      	ldr	r3, [sp, #24]
 8008420:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008422:	2b47      	cmp	r3, #71	; 0x47
 8008424:	4680      	mov	r8, r0
 8008426:	d108      	bne.n	800843a <_printf_float+0x13e>
 8008428:	1cc8      	adds	r0, r1, #3
 800842a:	db02      	blt.n	8008432 <_printf_float+0x136>
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	4299      	cmp	r1, r3
 8008430:	dd41      	ble.n	80084b6 <_printf_float+0x1ba>
 8008432:	f1ab 0302 	sub.w	r3, fp, #2
 8008436:	fa5f fb83 	uxtb.w	fp, r3
 800843a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800843e:	d820      	bhi.n	8008482 <_printf_float+0x186>
 8008440:	3901      	subs	r1, #1
 8008442:	465a      	mov	r2, fp
 8008444:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008448:	9109      	str	r1, [sp, #36]	; 0x24
 800844a:	f7ff ff19 	bl	8008280 <__exponent>
 800844e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008450:	1813      	adds	r3, r2, r0
 8008452:	2a01      	cmp	r2, #1
 8008454:	4681      	mov	r9, r0
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	dc02      	bgt.n	8008460 <_printf_float+0x164>
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	07d2      	lsls	r2, r2, #31
 800845e:	d501      	bpl.n	8008464 <_printf_float+0x168>
 8008460:	3301      	adds	r3, #1
 8008462:	6123      	str	r3, [r4, #16]
 8008464:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008468:	2b00      	cmp	r3, #0
 800846a:	d09c      	beq.n	80083a6 <_printf_float+0xaa>
 800846c:	232d      	movs	r3, #45	; 0x2d
 800846e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008472:	e798      	b.n	80083a6 <_printf_float+0xaa>
 8008474:	9a06      	ldr	r2, [sp, #24]
 8008476:	2a47      	cmp	r2, #71	; 0x47
 8008478:	d1be      	bne.n	80083f8 <_printf_float+0xfc>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1bc      	bne.n	80083f8 <_printf_float+0xfc>
 800847e:	2301      	movs	r3, #1
 8008480:	e7b9      	b.n	80083f6 <_printf_float+0xfa>
 8008482:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008486:	d118      	bne.n	80084ba <_printf_float+0x1be>
 8008488:	2900      	cmp	r1, #0
 800848a:	6863      	ldr	r3, [r4, #4]
 800848c:	dd0b      	ble.n	80084a6 <_printf_float+0x1aa>
 800848e:	6121      	str	r1, [r4, #16]
 8008490:	b913      	cbnz	r3, 8008498 <_printf_float+0x19c>
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	07d0      	lsls	r0, r2, #31
 8008496:	d502      	bpl.n	800849e <_printf_float+0x1a2>
 8008498:	3301      	adds	r3, #1
 800849a:	440b      	add	r3, r1
 800849c:	6123      	str	r3, [r4, #16]
 800849e:	65a1      	str	r1, [r4, #88]	; 0x58
 80084a0:	f04f 0900 	mov.w	r9, #0
 80084a4:	e7de      	b.n	8008464 <_printf_float+0x168>
 80084a6:	b913      	cbnz	r3, 80084ae <_printf_float+0x1b2>
 80084a8:	6822      	ldr	r2, [r4, #0]
 80084aa:	07d2      	lsls	r2, r2, #31
 80084ac:	d501      	bpl.n	80084b2 <_printf_float+0x1b6>
 80084ae:	3302      	adds	r3, #2
 80084b0:	e7f4      	b.n	800849c <_printf_float+0x1a0>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7f2      	b.n	800849c <_printf_float+0x1a0>
 80084b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084bc:	4299      	cmp	r1, r3
 80084be:	db05      	blt.n	80084cc <_printf_float+0x1d0>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	6121      	str	r1, [r4, #16]
 80084c4:	07d8      	lsls	r0, r3, #31
 80084c6:	d5ea      	bpl.n	800849e <_printf_float+0x1a2>
 80084c8:	1c4b      	adds	r3, r1, #1
 80084ca:	e7e7      	b.n	800849c <_printf_float+0x1a0>
 80084cc:	2900      	cmp	r1, #0
 80084ce:	bfd4      	ite	le
 80084d0:	f1c1 0202 	rsble	r2, r1, #2
 80084d4:	2201      	movgt	r2, #1
 80084d6:	4413      	add	r3, r2
 80084d8:	e7e0      	b.n	800849c <_printf_float+0x1a0>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	055a      	lsls	r2, r3, #21
 80084de:	d407      	bmi.n	80084f0 <_printf_float+0x1f4>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	4642      	mov	r2, r8
 80084e4:	4631      	mov	r1, r6
 80084e6:	4628      	mov	r0, r5
 80084e8:	47b8      	blx	r7
 80084ea:	3001      	adds	r0, #1
 80084ec:	d12c      	bne.n	8008548 <_printf_float+0x24c>
 80084ee:	e764      	b.n	80083ba <_printf_float+0xbe>
 80084f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084f4:	f240 80e0 	bls.w	80086b8 <_printf_float+0x3bc>
 80084f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084fc:	2200      	movs	r2, #0
 80084fe:	2300      	movs	r3, #0
 8008500:	f7f8 fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8008504:	2800      	cmp	r0, #0
 8008506:	d034      	beq.n	8008572 <_printf_float+0x276>
 8008508:	4a37      	ldr	r2, [pc, #220]	; (80085e8 <_printf_float+0x2ec>)
 800850a:	2301      	movs	r3, #1
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f af51 	beq.w	80083ba <_printf_float+0xbe>
 8008518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800851c:	429a      	cmp	r2, r3
 800851e:	db02      	blt.n	8008526 <_printf_float+0x22a>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07d8      	lsls	r0, r3, #31
 8008524:	d510      	bpl.n	8008548 <_printf_float+0x24c>
 8008526:	ee18 3a10 	vmov	r3, s16
 800852a:	4652      	mov	r2, sl
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f af41 	beq.w	80083ba <_printf_float+0xbe>
 8008538:	f04f 0800 	mov.w	r8, #0
 800853c:	f104 091a 	add.w	r9, r4, #26
 8008540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008542:	3b01      	subs	r3, #1
 8008544:	4543      	cmp	r3, r8
 8008546:	dc09      	bgt.n	800855c <_printf_float+0x260>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	079b      	lsls	r3, r3, #30
 800854c:	f100 8107 	bmi.w	800875e <_printf_float+0x462>
 8008550:	68e0      	ldr	r0, [r4, #12]
 8008552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008554:	4298      	cmp	r0, r3
 8008556:	bfb8      	it	lt
 8008558:	4618      	movlt	r0, r3
 800855a:	e730      	b.n	80083be <_printf_float+0xc2>
 800855c:	2301      	movs	r3, #1
 800855e:	464a      	mov	r2, r9
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af27 	beq.w	80083ba <_printf_float+0xbe>
 800856c:	f108 0801 	add.w	r8, r8, #1
 8008570:	e7e6      	b.n	8008540 <_printf_float+0x244>
 8008572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	dc39      	bgt.n	80085ec <_printf_float+0x2f0>
 8008578:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <_printf_float+0x2ec>)
 800857a:	2301      	movs	r3, #1
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f af19 	beq.w	80083ba <_printf_float+0xbe>
 8008588:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800858c:	4313      	orrs	r3, r2
 800858e:	d102      	bne.n	8008596 <_printf_float+0x29a>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	07d9      	lsls	r1, r3, #31
 8008594:	d5d8      	bpl.n	8008548 <_printf_float+0x24c>
 8008596:	ee18 3a10 	vmov	r3, s16
 800859a:	4652      	mov	r2, sl
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af09 	beq.w	80083ba <_printf_float+0xbe>
 80085a8:	f04f 0900 	mov.w	r9, #0
 80085ac:	f104 0a1a 	add.w	sl, r4, #26
 80085b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b2:	425b      	negs	r3, r3
 80085b4:	454b      	cmp	r3, r9
 80085b6:	dc01      	bgt.n	80085bc <_printf_float+0x2c0>
 80085b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ba:	e792      	b.n	80084e2 <_printf_float+0x1e6>
 80085bc:	2301      	movs	r3, #1
 80085be:	4652      	mov	r2, sl
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f aef7 	beq.w	80083ba <_printf_float+0xbe>
 80085cc:	f109 0901 	add.w	r9, r9, #1
 80085d0:	e7ee      	b.n	80085b0 <_printf_float+0x2b4>
 80085d2:	bf00      	nop
 80085d4:	7fefffff 	.word	0x7fefffff
 80085d8:	0800af28 	.word	0x0800af28
 80085dc:	0800af2c 	.word	0x0800af2c
 80085e0:	0800af30 	.word	0x0800af30
 80085e4:	0800af34 	.word	0x0800af34
 80085e8:	0800af38 	.word	0x0800af38
 80085ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085f0:	429a      	cmp	r2, r3
 80085f2:	bfa8      	it	ge
 80085f4:	461a      	movge	r2, r3
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	4691      	mov	r9, r2
 80085fa:	dc37      	bgt.n	800866c <_printf_float+0x370>
 80085fc:	f04f 0b00 	mov.w	fp, #0
 8008600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008604:	f104 021a 	add.w	r2, r4, #26
 8008608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	eba3 0309 	sub.w	r3, r3, r9
 8008610:	455b      	cmp	r3, fp
 8008612:	dc33      	bgt.n	800867c <_printf_float+0x380>
 8008614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008618:	429a      	cmp	r2, r3
 800861a:	db3b      	blt.n	8008694 <_printf_float+0x398>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07da      	lsls	r2, r3, #31
 8008620:	d438      	bmi.n	8008694 <_printf_float+0x398>
 8008622:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008626:	eba2 0903 	sub.w	r9, r2, r3
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	1ad2      	subs	r2, r2, r3
 800862e:	4591      	cmp	r9, r2
 8008630:	bfa8      	it	ge
 8008632:	4691      	movge	r9, r2
 8008634:	f1b9 0f00 	cmp.w	r9, #0
 8008638:	dc35      	bgt.n	80086a6 <_printf_float+0x3aa>
 800863a:	f04f 0800 	mov.w	r8, #0
 800863e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008642:	f104 0a1a 	add.w	sl, r4, #26
 8008646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	eba3 0309 	sub.w	r3, r3, r9
 8008650:	4543      	cmp	r3, r8
 8008652:	f77f af79 	ble.w	8008548 <_printf_float+0x24c>
 8008656:	2301      	movs	r3, #1
 8008658:	4652      	mov	r2, sl
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f aeaa 	beq.w	80083ba <_printf_float+0xbe>
 8008666:	f108 0801 	add.w	r8, r8, #1
 800866a:	e7ec      	b.n	8008646 <_printf_float+0x34a>
 800866c:	4613      	mov	r3, r2
 800866e:	4631      	mov	r1, r6
 8008670:	4642      	mov	r2, r8
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	d1c0      	bne.n	80085fc <_printf_float+0x300>
 800867a:	e69e      	b.n	80083ba <_printf_float+0xbe>
 800867c:	2301      	movs	r3, #1
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	9205      	str	r2, [sp, #20]
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f ae97 	beq.w	80083ba <_printf_float+0xbe>
 800868c:	9a05      	ldr	r2, [sp, #20]
 800868e:	f10b 0b01 	add.w	fp, fp, #1
 8008692:	e7b9      	b.n	8008608 <_printf_float+0x30c>
 8008694:	ee18 3a10 	vmov	r3, s16
 8008698:	4652      	mov	r2, sl
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1be      	bne.n	8008622 <_printf_float+0x326>
 80086a4:	e689      	b.n	80083ba <_printf_float+0xbe>
 80086a6:	9a05      	ldr	r2, [sp, #20]
 80086a8:	464b      	mov	r3, r9
 80086aa:	4442      	add	r2, r8
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1c1      	bne.n	800863a <_printf_float+0x33e>
 80086b6:	e680      	b.n	80083ba <_printf_float+0xbe>
 80086b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ba:	2a01      	cmp	r2, #1
 80086bc:	dc01      	bgt.n	80086c2 <_printf_float+0x3c6>
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d53a      	bpl.n	8008738 <_printf_float+0x43c>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4642      	mov	r2, r8
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae74 	beq.w	80083ba <_printf_float+0xbe>
 80086d2:	ee18 3a10 	vmov	r3, s16
 80086d6:	4652      	mov	r2, sl
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f43f ae6b 	beq.w	80083ba <_printf_float+0xbe>
 80086e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80086f0:	f7f8 fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80086f4:	b9d8      	cbnz	r0, 800872e <_printf_float+0x432>
 80086f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80086fa:	f108 0201 	add.w	r2, r8, #1
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	d10e      	bne.n	8008726 <_printf_float+0x42a>
 8008708:	e657      	b.n	80083ba <_printf_float+0xbe>
 800870a:	2301      	movs	r3, #1
 800870c:	4652      	mov	r2, sl
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f ae50 	beq.w	80083ba <_printf_float+0xbe>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008720:	3b01      	subs	r3, #1
 8008722:	4543      	cmp	r3, r8
 8008724:	dcf1      	bgt.n	800870a <_printf_float+0x40e>
 8008726:	464b      	mov	r3, r9
 8008728:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800872c:	e6da      	b.n	80084e4 <_printf_float+0x1e8>
 800872e:	f04f 0800 	mov.w	r8, #0
 8008732:	f104 0a1a 	add.w	sl, r4, #26
 8008736:	e7f2      	b.n	800871e <_printf_float+0x422>
 8008738:	2301      	movs	r3, #1
 800873a:	4642      	mov	r2, r8
 800873c:	e7df      	b.n	80086fe <_printf_float+0x402>
 800873e:	2301      	movs	r3, #1
 8008740:	464a      	mov	r2, r9
 8008742:	4631      	mov	r1, r6
 8008744:	4628      	mov	r0, r5
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	f43f ae36 	beq.w	80083ba <_printf_float+0xbe>
 800874e:	f108 0801 	add.w	r8, r8, #1
 8008752:	68e3      	ldr	r3, [r4, #12]
 8008754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008756:	1a5b      	subs	r3, r3, r1
 8008758:	4543      	cmp	r3, r8
 800875a:	dcf0      	bgt.n	800873e <_printf_float+0x442>
 800875c:	e6f8      	b.n	8008550 <_printf_float+0x254>
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	f104 0919 	add.w	r9, r4, #25
 8008766:	e7f4      	b.n	8008752 <_printf_float+0x456>

08008768 <_printf_common>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	4616      	mov	r6, r2
 800876e:	4699      	mov	r9, r3
 8008770:	688a      	ldr	r2, [r1, #8]
 8008772:	690b      	ldr	r3, [r1, #16]
 8008774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008778:	4293      	cmp	r3, r2
 800877a:	bfb8      	it	lt
 800877c:	4613      	movlt	r3, r2
 800877e:	6033      	str	r3, [r6, #0]
 8008780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008784:	4607      	mov	r7, r0
 8008786:	460c      	mov	r4, r1
 8008788:	b10a      	cbz	r2, 800878e <_printf_common+0x26>
 800878a:	3301      	adds	r3, #1
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	0699      	lsls	r1, r3, #26
 8008792:	bf42      	ittt	mi
 8008794:	6833      	ldrmi	r3, [r6, #0]
 8008796:	3302      	addmi	r3, #2
 8008798:	6033      	strmi	r3, [r6, #0]
 800879a:	6825      	ldr	r5, [r4, #0]
 800879c:	f015 0506 	ands.w	r5, r5, #6
 80087a0:	d106      	bne.n	80087b0 <_printf_common+0x48>
 80087a2:	f104 0a19 	add.w	sl, r4, #25
 80087a6:	68e3      	ldr	r3, [r4, #12]
 80087a8:	6832      	ldr	r2, [r6, #0]
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	dc26      	bgt.n	80087fe <_printf_common+0x96>
 80087b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087b4:	1e13      	subs	r3, r2, #0
 80087b6:	6822      	ldr	r2, [r4, #0]
 80087b8:	bf18      	it	ne
 80087ba:	2301      	movne	r3, #1
 80087bc:	0692      	lsls	r2, r2, #26
 80087be:	d42b      	bmi.n	8008818 <_printf_common+0xb0>
 80087c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c4:	4649      	mov	r1, r9
 80087c6:	4638      	mov	r0, r7
 80087c8:	47c0      	blx	r8
 80087ca:	3001      	adds	r0, #1
 80087cc:	d01e      	beq.n	800880c <_printf_common+0xa4>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	6922      	ldr	r2, [r4, #16]
 80087d2:	f003 0306 	and.w	r3, r3, #6
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	bf02      	ittt	eq
 80087da:	68e5      	ldreq	r5, [r4, #12]
 80087dc:	6833      	ldreq	r3, [r6, #0]
 80087de:	1aed      	subeq	r5, r5, r3
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	bf0c      	ite	eq
 80087e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087e8:	2500      	movne	r5, #0
 80087ea:	4293      	cmp	r3, r2
 80087ec:	bfc4      	itt	gt
 80087ee:	1a9b      	subgt	r3, r3, r2
 80087f0:	18ed      	addgt	r5, r5, r3
 80087f2:	2600      	movs	r6, #0
 80087f4:	341a      	adds	r4, #26
 80087f6:	42b5      	cmp	r5, r6
 80087f8:	d11a      	bne.n	8008830 <_printf_common+0xc8>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e008      	b.n	8008810 <_printf_common+0xa8>
 80087fe:	2301      	movs	r3, #1
 8008800:	4652      	mov	r2, sl
 8008802:	4649      	mov	r1, r9
 8008804:	4638      	mov	r0, r7
 8008806:	47c0      	blx	r8
 8008808:	3001      	adds	r0, #1
 800880a:	d103      	bne.n	8008814 <_printf_common+0xac>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008814:	3501      	adds	r5, #1
 8008816:	e7c6      	b.n	80087a6 <_printf_common+0x3e>
 8008818:	18e1      	adds	r1, r4, r3
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	2030      	movs	r0, #48	; 0x30
 800881e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008822:	4422      	add	r2, r4
 8008824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800882c:	3302      	adds	r3, #2
 800882e:	e7c7      	b.n	80087c0 <_printf_common+0x58>
 8008830:	2301      	movs	r3, #1
 8008832:	4622      	mov	r2, r4
 8008834:	4649      	mov	r1, r9
 8008836:	4638      	mov	r0, r7
 8008838:	47c0      	blx	r8
 800883a:	3001      	adds	r0, #1
 800883c:	d0e6      	beq.n	800880c <_printf_common+0xa4>
 800883e:	3601      	adds	r6, #1
 8008840:	e7d9      	b.n	80087f6 <_printf_common+0x8e>
	...

08008844 <_printf_i>:
 8008844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	7e0f      	ldrb	r7, [r1, #24]
 800884a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800884c:	2f78      	cmp	r7, #120	; 0x78
 800884e:	4691      	mov	r9, r2
 8008850:	4680      	mov	r8, r0
 8008852:	460c      	mov	r4, r1
 8008854:	469a      	mov	sl, r3
 8008856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800885a:	d807      	bhi.n	800886c <_printf_i+0x28>
 800885c:	2f62      	cmp	r7, #98	; 0x62
 800885e:	d80a      	bhi.n	8008876 <_printf_i+0x32>
 8008860:	2f00      	cmp	r7, #0
 8008862:	f000 80d4 	beq.w	8008a0e <_printf_i+0x1ca>
 8008866:	2f58      	cmp	r7, #88	; 0x58
 8008868:	f000 80c0 	beq.w	80089ec <_printf_i+0x1a8>
 800886c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008874:	e03a      	b.n	80088ec <_printf_i+0xa8>
 8008876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800887a:	2b15      	cmp	r3, #21
 800887c:	d8f6      	bhi.n	800886c <_printf_i+0x28>
 800887e:	a101      	add	r1, pc, #4	; (adr r1, 8008884 <_printf_i+0x40>)
 8008880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008884:	080088dd 	.word	0x080088dd
 8008888:	080088f1 	.word	0x080088f1
 800888c:	0800886d 	.word	0x0800886d
 8008890:	0800886d 	.word	0x0800886d
 8008894:	0800886d 	.word	0x0800886d
 8008898:	0800886d 	.word	0x0800886d
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	0800886d 	.word	0x0800886d
 80088a4:	0800886d 	.word	0x0800886d
 80088a8:	0800886d 	.word	0x0800886d
 80088ac:	0800886d 	.word	0x0800886d
 80088b0:	080089f5 	.word	0x080089f5
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	080089af 	.word	0x080089af
 80088bc:	0800886d 	.word	0x0800886d
 80088c0:	0800886d 	.word	0x0800886d
 80088c4:	08008a17 	.word	0x08008a17
 80088c8:	0800886d 	.word	0x0800886d
 80088cc:	0800891d 	.word	0x0800891d
 80088d0:	0800886d 	.word	0x0800886d
 80088d4:	0800886d 	.word	0x0800886d
 80088d8:	080089b7 	.word	0x080089b7
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ec:	2301      	movs	r3, #1
 80088ee:	e09f      	b.n	8008a30 <_printf_i+0x1ec>
 80088f0:	6820      	ldr	r0, [r4, #0]
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	0607      	lsls	r7, r0, #24
 80088f6:	f103 0104 	add.w	r1, r3, #4
 80088fa:	6029      	str	r1, [r5, #0]
 80088fc:	d501      	bpl.n	8008902 <_printf_i+0xbe>
 80088fe:	681e      	ldr	r6, [r3, #0]
 8008900:	e003      	b.n	800890a <_printf_i+0xc6>
 8008902:	0646      	lsls	r6, r0, #25
 8008904:	d5fb      	bpl.n	80088fe <_printf_i+0xba>
 8008906:	f9b3 6000 	ldrsh.w	r6, [r3]
 800890a:	2e00      	cmp	r6, #0
 800890c:	da03      	bge.n	8008916 <_printf_i+0xd2>
 800890e:	232d      	movs	r3, #45	; 0x2d
 8008910:	4276      	negs	r6, r6
 8008912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008916:	485a      	ldr	r0, [pc, #360]	; (8008a80 <_printf_i+0x23c>)
 8008918:	230a      	movs	r3, #10
 800891a:	e012      	b.n	8008942 <_printf_i+0xfe>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	1d19      	adds	r1, r3, #4
 8008922:	6029      	str	r1, [r5, #0]
 8008924:	0605      	lsls	r5, r0, #24
 8008926:	d501      	bpl.n	800892c <_printf_i+0xe8>
 8008928:	681e      	ldr	r6, [r3, #0]
 800892a:	e002      	b.n	8008932 <_printf_i+0xee>
 800892c:	0641      	lsls	r1, r0, #25
 800892e:	d5fb      	bpl.n	8008928 <_printf_i+0xe4>
 8008930:	881e      	ldrh	r6, [r3, #0]
 8008932:	4853      	ldr	r0, [pc, #332]	; (8008a80 <_printf_i+0x23c>)
 8008934:	2f6f      	cmp	r7, #111	; 0x6f
 8008936:	bf0c      	ite	eq
 8008938:	2308      	moveq	r3, #8
 800893a:	230a      	movne	r3, #10
 800893c:	2100      	movs	r1, #0
 800893e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008942:	6865      	ldr	r5, [r4, #4]
 8008944:	60a5      	str	r5, [r4, #8]
 8008946:	2d00      	cmp	r5, #0
 8008948:	bfa2      	ittt	ge
 800894a:	6821      	ldrge	r1, [r4, #0]
 800894c:	f021 0104 	bicge.w	r1, r1, #4
 8008950:	6021      	strge	r1, [r4, #0]
 8008952:	b90e      	cbnz	r6, 8008958 <_printf_i+0x114>
 8008954:	2d00      	cmp	r5, #0
 8008956:	d04b      	beq.n	80089f0 <_printf_i+0x1ac>
 8008958:	4615      	mov	r5, r2
 800895a:	fbb6 f1f3 	udiv	r1, r6, r3
 800895e:	fb03 6711 	mls	r7, r3, r1, r6
 8008962:	5dc7      	ldrb	r7, [r0, r7]
 8008964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008968:	4637      	mov	r7, r6
 800896a:	42bb      	cmp	r3, r7
 800896c:	460e      	mov	r6, r1
 800896e:	d9f4      	bls.n	800895a <_printf_i+0x116>
 8008970:	2b08      	cmp	r3, #8
 8008972:	d10b      	bne.n	800898c <_printf_i+0x148>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	07de      	lsls	r6, r3, #31
 8008978:	d508      	bpl.n	800898c <_printf_i+0x148>
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6861      	ldr	r1, [r4, #4]
 800897e:	4299      	cmp	r1, r3
 8008980:	bfde      	ittt	le
 8008982:	2330      	movle	r3, #48	; 0x30
 8008984:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008988:	f105 35ff 	addle.w	r5, r5, #4294967295
 800898c:	1b52      	subs	r2, r2, r5
 800898e:	6122      	str	r2, [r4, #16]
 8008990:	f8cd a000 	str.w	sl, [sp]
 8008994:	464b      	mov	r3, r9
 8008996:	aa03      	add	r2, sp, #12
 8008998:	4621      	mov	r1, r4
 800899a:	4640      	mov	r0, r8
 800899c:	f7ff fee4 	bl	8008768 <_printf_common>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d14a      	bne.n	8008a3a <_printf_i+0x1f6>
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	b004      	add	sp, #16
 80089aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	f043 0320 	orr.w	r3, r3, #32
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	4833      	ldr	r0, [pc, #204]	; (8008a84 <_printf_i+0x240>)
 80089b8:	2778      	movs	r7, #120	; 0x78
 80089ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	6829      	ldr	r1, [r5, #0]
 80089c2:	061f      	lsls	r7, r3, #24
 80089c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80089c8:	d402      	bmi.n	80089d0 <_printf_i+0x18c>
 80089ca:	065f      	lsls	r7, r3, #25
 80089cc:	bf48      	it	mi
 80089ce:	b2b6      	uxthmi	r6, r6
 80089d0:	07df      	lsls	r7, r3, #31
 80089d2:	bf48      	it	mi
 80089d4:	f043 0320 	orrmi.w	r3, r3, #32
 80089d8:	6029      	str	r1, [r5, #0]
 80089da:	bf48      	it	mi
 80089dc:	6023      	strmi	r3, [r4, #0]
 80089de:	b91e      	cbnz	r6, 80089e8 <_printf_i+0x1a4>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	f023 0320 	bic.w	r3, r3, #32
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	2310      	movs	r3, #16
 80089ea:	e7a7      	b.n	800893c <_printf_i+0xf8>
 80089ec:	4824      	ldr	r0, [pc, #144]	; (8008a80 <_printf_i+0x23c>)
 80089ee:	e7e4      	b.n	80089ba <_printf_i+0x176>
 80089f0:	4615      	mov	r5, r2
 80089f2:	e7bd      	b.n	8008970 <_printf_i+0x12c>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	6826      	ldr	r6, [r4, #0]
 80089f8:	6961      	ldr	r1, [r4, #20]
 80089fa:	1d18      	adds	r0, r3, #4
 80089fc:	6028      	str	r0, [r5, #0]
 80089fe:	0635      	lsls	r5, r6, #24
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	d501      	bpl.n	8008a08 <_printf_i+0x1c4>
 8008a04:	6019      	str	r1, [r3, #0]
 8008a06:	e002      	b.n	8008a0e <_printf_i+0x1ca>
 8008a08:	0670      	lsls	r0, r6, #25
 8008a0a:	d5fb      	bpl.n	8008a04 <_printf_i+0x1c0>
 8008a0c:	8019      	strh	r1, [r3, #0]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6123      	str	r3, [r4, #16]
 8008a12:	4615      	mov	r5, r2
 8008a14:	e7bc      	b.n	8008990 <_printf_i+0x14c>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	602a      	str	r2, [r5, #0]
 8008a1c:	681d      	ldr	r5, [r3, #0]
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	2100      	movs	r1, #0
 8008a22:	4628      	mov	r0, r5
 8008a24:	f7f7 fbf4 	bl	8000210 <memchr>
 8008a28:	b108      	cbz	r0, 8008a2e <_printf_i+0x1ea>
 8008a2a:	1b40      	subs	r0, r0, r5
 8008a2c:	6060      	str	r0, [r4, #4]
 8008a2e:	6863      	ldr	r3, [r4, #4]
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	2300      	movs	r3, #0
 8008a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a38:	e7aa      	b.n	8008990 <_printf_i+0x14c>
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	47d0      	blx	sl
 8008a44:	3001      	adds	r0, #1
 8008a46:	d0ad      	beq.n	80089a4 <_printf_i+0x160>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	079b      	lsls	r3, r3, #30
 8008a4c:	d413      	bmi.n	8008a76 <_printf_i+0x232>
 8008a4e:	68e0      	ldr	r0, [r4, #12]
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	4298      	cmp	r0, r3
 8008a54:	bfb8      	it	lt
 8008a56:	4618      	movlt	r0, r3
 8008a58:	e7a6      	b.n	80089a8 <_printf_i+0x164>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	4649      	mov	r1, r9
 8008a60:	4640      	mov	r0, r8
 8008a62:	47d0      	blx	sl
 8008a64:	3001      	adds	r0, #1
 8008a66:	d09d      	beq.n	80089a4 <_printf_i+0x160>
 8008a68:	3501      	adds	r5, #1
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	9903      	ldr	r1, [sp, #12]
 8008a6e:	1a5b      	subs	r3, r3, r1
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	dcf2      	bgt.n	8008a5a <_printf_i+0x216>
 8008a74:	e7eb      	b.n	8008a4e <_printf_i+0x20a>
 8008a76:	2500      	movs	r5, #0
 8008a78:	f104 0619 	add.w	r6, r4, #25
 8008a7c:	e7f5      	b.n	8008a6a <_printf_i+0x226>
 8008a7e:	bf00      	nop
 8008a80:	0800af3a 	.word	0x0800af3a
 8008a84:	0800af4b 	.word	0x0800af4b

08008a88 <std>:
 8008a88:	2300      	movs	r3, #0
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a96:	6083      	str	r3, [r0, #8]
 8008a98:	8181      	strh	r1, [r0, #12]
 8008a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a9c:	81c2      	strh	r2, [r0, #14]
 8008a9e:	6183      	str	r3, [r0, #24]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	2208      	movs	r2, #8
 8008aa4:	305c      	adds	r0, #92	; 0x5c
 8008aa6:	f000 f914 	bl	8008cd2 <memset>
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <std+0x58>)
 8008aac:	6263      	str	r3, [r4, #36]	; 0x24
 8008aae:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <std+0x5c>)
 8008ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <std+0x60>)
 8008ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <std+0x64>)
 8008ab8:	6323      	str	r3, [r4, #48]	; 0x30
 8008aba:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <std+0x68>)
 8008abc:	6224      	str	r4, [r4, #32]
 8008abe:	429c      	cmp	r4, r3
 8008ac0:	d006      	beq.n	8008ad0 <std+0x48>
 8008ac2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008ac6:	4294      	cmp	r4, r2
 8008ac8:	d002      	beq.n	8008ad0 <std+0x48>
 8008aca:	33d0      	adds	r3, #208	; 0xd0
 8008acc:	429c      	cmp	r4, r3
 8008ace:	d105      	bne.n	8008adc <std+0x54>
 8008ad0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad8:	f000 b978 	b.w	8008dcc <__retarget_lock_init_recursive>
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	bf00      	nop
 8008ae0:	08008c4d 	.word	0x08008c4d
 8008ae4:	08008c6f 	.word	0x08008c6f
 8008ae8:	08008ca7 	.word	0x08008ca7
 8008aec:	08008ccb 	.word	0x08008ccb
 8008af0:	20000920 	.word	0x20000920

08008af4 <stdio_exit_handler>:
 8008af4:	4a02      	ldr	r2, [pc, #8]	; (8008b00 <stdio_exit_handler+0xc>)
 8008af6:	4903      	ldr	r1, [pc, #12]	; (8008b04 <stdio_exit_handler+0x10>)
 8008af8:	4803      	ldr	r0, [pc, #12]	; (8008b08 <stdio_exit_handler+0x14>)
 8008afa:	f000 b869 	b.w	8008bd0 <_fwalk_sglue>
 8008afe:	bf00      	nop
 8008b00:	20000018 	.word	0x20000018
 8008b04:	0800a781 	.word	0x0800a781
 8008b08:	20000024 	.word	0x20000024

08008b0c <cleanup_stdio>:
 8008b0c:	6841      	ldr	r1, [r0, #4]
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <cleanup_stdio+0x34>)
 8008b10:	4299      	cmp	r1, r3
 8008b12:	b510      	push	{r4, lr}
 8008b14:	4604      	mov	r4, r0
 8008b16:	d001      	beq.n	8008b1c <cleanup_stdio+0x10>
 8008b18:	f001 fe32 	bl	800a780 <_fflush_r>
 8008b1c:	68a1      	ldr	r1, [r4, #8]
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <cleanup_stdio+0x38>)
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d002      	beq.n	8008b2a <cleanup_stdio+0x1e>
 8008b24:	4620      	mov	r0, r4
 8008b26:	f001 fe2b 	bl	800a780 <_fflush_r>
 8008b2a:	68e1      	ldr	r1, [r4, #12]
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <cleanup_stdio+0x3c>)
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d004      	beq.n	8008b3c <cleanup_stdio+0x30>
 8008b32:	4620      	mov	r0, r4
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	f001 be22 	b.w	800a780 <_fflush_r>
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	bf00      	nop
 8008b40:	20000920 	.word	0x20000920
 8008b44:	20000988 	.word	0x20000988
 8008b48:	200009f0 	.word	0x200009f0

08008b4c <global_stdio_init.part.0>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <global_stdio_init.part.0+0x30>)
 8008b50:	4c0b      	ldr	r4, [pc, #44]	; (8008b80 <global_stdio_init.part.0+0x34>)
 8008b52:	4a0c      	ldr	r2, [pc, #48]	; (8008b84 <global_stdio_init.part.0+0x38>)
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	4620      	mov	r0, r4
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2104      	movs	r1, #4
 8008b5c:	f7ff ff94 	bl	8008a88 <std>
 8008b60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008b64:	2201      	movs	r2, #1
 8008b66:	2109      	movs	r1, #9
 8008b68:	f7ff ff8e 	bl	8008a88 <std>
 8008b6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b70:	2202      	movs	r2, #2
 8008b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b76:	2112      	movs	r1, #18
 8008b78:	f7ff bf86 	b.w	8008a88 <std>
 8008b7c:	20000a58 	.word	0x20000a58
 8008b80:	20000920 	.word	0x20000920
 8008b84:	08008af5 	.word	0x08008af5

08008b88 <__sfp_lock_acquire>:
 8008b88:	4801      	ldr	r0, [pc, #4]	; (8008b90 <__sfp_lock_acquire+0x8>)
 8008b8a:	f000 b920 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8008b8e:	bf00      	nop
 8008b90:	20000a61 	.word	0x20000a61

08008b94 <__sfp_lock_release>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__sfp_lock_release+0x8>)
 8008b96:	f000 b91b 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20000a61 	.word	0x20000a61

08008ba0 <__sinit>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	f7ff fff0 	bl	8008b88 <__sfp_lock_acquire>
 8008ba8:	6a23      	ldr	r3, [r4, #32]
 8008baa:	b11b      	cbz	r3, 8008bb4 <__sinit+0x14>
 8008bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb0:	f7ff bff0 	b.w	8008b94 <__sfp_lock_release>
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <__sinit+0x28>)
 8008bb6:	6223      	str	r3, [r4, #32]
 8008bb8:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <__sinit+0x2c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f5      	bne.n	8008bac <__sinit+0xc>
 8008bc0:	f7ff ffc4 	bl	8008b4c <global_stdio_init.part.0>
 8008bc4:	e7f2      	b.n	8008bac <__sinit+0xc>
 8008bc6:	bf00      	nop
 8008bc8:	08008b0d 	.word	0x08008b0d
 8008bcc:	20000a58 	.word	0x20000a58

08008bd0 <_fwalk_sglue>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4607      	mov	r7, r0
 8008bd6:	4688      	mov	r8, r1
 8008bd8:	4614      	mov	r4, r2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008be0:	f1b9 0901 	subs.w	r9, r9, #1
 8008be4:	d505      	bpl.n	8008bf2 <_fwalk_sglue+0x22>
 8008be6:	6824      	ldr	r4, [r4, #0]
 8008be8:	2c00      	cmp	r4, #0
 8008bea:	d1f7      	bne.n	8008bdc <_fwalk_sglue+0xc>
 8008bec:	4630      	mov	r0, r6
 8008bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf2:	89ab      	ldrh	r3, [r5, #12]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d907      	bls.n	8008c08 <_fwalk_sglue+0x38>
 8008bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	d003      	beq.n	8008c08 <_fwalk_sglue+0x38>
 8008c00:	4629      	mov	r1, r5
 8008c02:	4638      	mov	r0, r7
 8008c04:	47c0      	blx	r8
 8008c06:	4306      	orrs	r6, r0
 8008c08:	3568      	adds	r5, #104	; 0x68
 8008c0a:	e7e9      	b.n	8008be0 <_fwalk_sglue+0x10>

08008c0c <siprintf>:
 8008c0c:	b40e      	push	{r1, r2, r3}
 8008c0e:	b500      	push	{lr}
 8008c10:	b09c      	sub	sp, #112	; 0x70
 8008c12:	ab1d      	add	r3, sp, #116	; 0x74
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	9006      	str	r0, [sp, #24]
 8008c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c1c:	4809      	ldr	r0, [pc, #36]	; (8008c44 <siprintf+0x38>)
 8008c1e:	9107      	str	r1, [sp, #28]
 8008c20:	9104      	str	r1, [sp, #16]
 8008c22:	4909      	ldr	r1, [pc, #36]	; (8008c48 <siprintf+0x3c>)
 8008c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c28:	9105      	str	r1, [sp, #20]
 8008c2a:	6800      	ldr	r0, [r0, #0]
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	a902      	add	r1, sp, #8
 8008c30:	f001 fc22 	bl	800a478 <_svfiprintf_r>
 8008c34:	9b02      	ldr	r3, [sp, #8]
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	b01c      	add	sp, #112	; 0x70
 8008c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c40:	b003      	add	sp, #12
 8008c42:	4770      	bx	lr
 8008c44:	20000070 	.word	0x20000070
 8008c48:	ffff0208 	.word	0xffff0208

08008c4c <__sread>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	460c      	mov	r4, r1
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	f000 f86c 	bl	8008d30 <_read_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	bfab      	itete	ge
 8008c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c60:	181b      	addge	r3, r3, r0
 8008c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c66:	bfac      	ite	ge
 8008c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c6a:	81a3      	strhlt	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__swrite>:
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	461f      	mov	r7, r3
 8008c74:	898b      	ldrh	r3, [r1, #12]
 8008c76:	05db      	lsls	r3, r3, #23
 8008c78:	4605      	mov	r5, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	d505      	bpl.n	8008c8c <__swrite+0x1e>
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	2302      	movs	r3, #2
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f840 	bl	8008d0c <_lseek_r>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	f000 b857 	b.w	8008d54 <_write_r>

08008ca6 <__sseek>:
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cae:	f000 f82d 	bl	8008d0c <_lseek_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	bf15      	itete	ne
 8008cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cc2:	81a3      	strheq	r3, [r4, #12]
 8008cc4:	bf18      	it	ne
 8008cc6:	81a3      	strhne	r3, [r4, #12]
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <__sclose>:
 8008cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cce:	f000 b80d 	b.w	8008cec <_close_r>

08008cd2 <memset>:
 8008cd2:	4402      	add	r2, r0
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d100      	bne.n	8008cdc <memset+0xa>
 8008cda:	4770      	bx	lr
 8008cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce0:	e7f9      	b.n	8008cd6 <memset+0x4>
	...

08008ce4 <_localeconv_r>:
 8008ce4:	4800      	ldr	r0, [pc, #0]	; (8008ce8 <_localeconv_r+0x4>)
 8008ce6:	4770      	bx	lr
 8008ce8:	20000164 	.word	0x20000164

08008cec <_close_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_close_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f9 ffc3 	bl	8002c82 <_close>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_close_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_close_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000a5c 	.word	0x20000a5c

08008d0c <_lseek_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	; (8008d2c <_lseek_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7f9 ffd8 	bl	8002cd0 <_lseek>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_lseek_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_lseek_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000a5c 	.word	0x20000a5c

08008d30 <_read_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	; (8008d50 <_read_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7f9 ff66 	bl	8002c10 <_read>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_read_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_read_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000a5c 	.word	0x20000a5c

08008d54 <_write_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	; (8008d74 <_write_r+0x20>)
 8008d58:	4604      	mov	r4, r0
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	2200      	movs	r2, #0
 8008d60:	602a      	str	r2, [r5, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f7f9 ff71 	bl	8002c4a <_write>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_write_r+0x1e>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_write_r+0x1e>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	20000a5c 	.word	0x20000a5c

08008d78 <__errno>:
 8008d78:	4b01      	ldr	r3, [pc, #4]	; (8008d80 <__errno+0x8>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000070 	.word	0x20000070

08008d84 <__libc_init_array>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4d0d      	ldr	r5, [pc, #52]	; (8008dbc <__libc_init_array+0x38>)
 8008d88:	4c0d      	ldr	r4, [pc, #52]	; (8008dc0 <__libc_init_array+0x3c>)
 8008d8a:	1b64      	subs	r4, r4, r5
 8008d8c:	10a4      	asrs	r4, r4, #2
 8008d8e:	2600      	movs	r6, #0
 8008d90:	42a6      	cmp	r6, r4
 8008d92:	d109      	bne.n	8008da8 <__libc_init_array+0x24>
 8008d94:	4d0b      	ldr	r5, [pc, #44]	; (8008dc4 <__libc_init_array+0x40>)
 8008d96:	4c0c      	ldr	r4, [pc, #48]	; (8008dc8 <__libc_init_array+0x44>)
 8008d98:	f002 f896 	bl	800aec8 <_init>
 8008d9c:	1b64      	subs	r4, r4, r5
 8008d9e:	10a4      	asrs	r4, r4, #2
 8008da0:	2600      	movs	r6, #0
 8008da2:	42a6      	cmp	r6, r4
 8008da4:	d105      	bne.n	8008db2 <__libc_init_array+0x2e>
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dac:	4798      	blx	r3
 8008dae:	3601      	adds	r6, #1
 8008db0:	e7ee      	b.n	8008d90 <__libc_init_array+0xc>
 8008db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db6:	4798      	blx	r3
 8008db8:	3601      	adds	r6, #1
 8008dba:	e7f2      	b.n	8008da2 <__libc_init_array+0x1e>
 8008dbc:	0800b2a4 	.word	0x0800b2a4
 8008dc0:	0800b2a4 	.word	0x0800b2a4
 8008dc4:	0800b2a4 	.word	0x0800b2a4
 8008dc8:	0800b2a8 	.word	0x0800b2a8

08008dcc <__retarget_lock_init_recursive>:
 8008dcc:	4770      	bx	lr

08008dce <__retarget_lock_acquire_recursive>:
 8008dce:	4770      	bx	lr

08008dd0 <__retarget_lock_release_recursive>:
 8008dd0:	4770      	bx	lr

08008dd2 <quorem>:
 8008dd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd6:	6903      	ldr	r3, [r0, #16]
 8008dd8:	690c      	ldr	r4, [r1, #16]
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	4607      	mov	r7, r0
 8008dde:	db7e      	blt.n	8008ede <quorem+0x10c>
 8008de0:	3c01      	subs	r4, #1
 8008de2:	f101 0814 	add.w	r8, r1, #20
 8008de6:	f100 0514 	add.w	r5, r0, #20
 8008dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e08:	d331      	bcc.n	8008e6e <quorem+0x9c>
 8008e0a:	f04f 0e00 	mov.w	lr, #0
 8008e0e:	4640      	mov	r0, r8
 8008e10:	46ac      	mov	ip, r5
 8008e12:	46f2      	mov	sl, lr
 8008e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e18:	b293      	uxth	r3, r2
 8008e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008e1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e22:	0c1a      	lsrs	r2, r3, #16
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	ebaa 0303 	sub.w	r3, sl, r3
 8008e2a:	f8dc a000 	ldr.w	sl, [ip]
 8008e2e:	fa13 f38a 	uxtah	r3, r3, sl
 8008e32:	fb06 220e 	mla	r2, r6, lr, r2
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e3e:	b292      	uxth	r2, r2
 8008e40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e48:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e4c:	4581      	cmp	r9, r0
 8008e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e52:	f84c 3b04 	str.w	r3, [ip], #4
 8008e56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e5a:	d2db      	bcs.n	8008e14 <quorem+0x42>
 8008e5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e60:	b92b      	cbnz	r3, 8008e6e <quorem+0x9c>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	429d      	cmp	r5, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	d32c      	bcc.n	8008ec6 <quorem+0xf4>
 8008e6c:	613c      	str	r4, [r7, #16]
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f001 f9a8 	bl	800a1c4 <__mcmp>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	db22      	blt.n	8008ebe <quorem+0xec>
 8008e78:	3601      	adds	r6, #1
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e82:	f8d1 c000 	ldr.w	ip, [r1]
 8008e86:	b293      	uxth	r3, r2
 8008e88:	1ac3      	subs	r3, r0, r3
 8008e8a:	0c12      	lsrs	r2, r2, #16
 8008e8c:	fa13 f38c 	uxtah	r3, r3, ip
 8008e90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e9e:	45c1      	cmp	r9, r8
 8008ea0:	f841 3b04 	str.w	r3, [r1], #4
 8008ea4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ea8:	d2e9      	bcs.n	8008e7e <quorem+0xac>
 8008eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eb2:	b922      	cbnz	r2, 8008ebe <quorem+0xec>
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	429d      	cmp	r5, r3
 8008eb8:	461a      	mov	r2, r3
 8008eba:	d30a      	bcc.n	8008ed2 <quorem+0x100>
 8008ebc:	613c      	str	r4, [r7, #16]
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	b003      	add	sp, #12
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	6812      	ldr	r2, [r2, #0]
 8008ec8:	3b04      	subs	r3, #4
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d1ce      	bne.n	8008e6c <quorem+0x9a>
 8008ece:	3c01      	subs	r4, #1
 8008ed0:	e7c9      	b.n	8008e66 <quorem+0x94>
 8008ed2:	6812      	ldr	r2, [r2, #0]
 8008ed4:	3b04      	subs	r3, #4
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	d1f0      	bne.n	8008ebc <quorem+0xea>
 8008eda:	3c01      	subs	r4, #1
 8008edc:	e7eb      	b.n	8008eb6 <quorem+0xe4>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e7ee      	b.n	8008ec0 <quorem+0xee>
 8008ee2:	0000      	movs	r0, r0
 8008ee4:	0000      	movs	r0, r0
	...

08008ee8 <_dtoa_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ed2d 8b04 	vpush	{d8-d9}
 8008ef0:	69c5      	ldr	r5, [r0, #28]
 8008ef2:	b093      	sub	sp, #76	; 0x4c
 8008ef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ef8:	ec57 6b10 	vmov	r6, r7, d0
 8008efc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f00:	9107      	str	r1, [sp, #28]
 8008f02:	4604      	mov	r4, r0
 8008f04:	920a      	str	r2, [sp, #40]	; 0x28
 8008f06:	930d      	str	r3, [sp, #52]	; 0x34
 8008f08:	b975      	cbnz	r5, 8008f28 <_dtoa_r+0x40>
 8008f0a:	2010      	movs	r0, #16
 8008f0c:	f000 fe2a 	bl	8009b64 <malloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	61e0      	str	r0, [r4, #28]
 8008f14:	b920      	cbnz	r0, 8008f20 <_dtoa_r+0x38>
 8008f16:	4bae      	ldr	r3, [pc, #696]	; (80091d0 <_dtoa_r+0x2e8>)
 8008f18:	21ef      	movs	r1, #239	; 0xef
 8008f1a:	48ae      	ldr	r0, [pc, #696]	; (80091d4 <_dtoa_r+0x2ec>)
 8008f1c:	f001 fc90 	bl	800a840 <__assert_func>
 8008f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f24:	6005      	str	r5, [r0, #0]
 8008f26:	60c5      	str	r5, [r0, #12]
 8008f28:	69e3      	ldr	r3, [r4, #28]
 8008f2a:	6819      	ldr	r1, [r3, #0]
 8008f2c:	b151      	cbz	r1, 8008f44 <_dtoa_r+0x5c>
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	604a      	str	r2, [r1, #4]
 8008f32:	2301      	movs	r3, #1
 8008f34:	4093      	lsls	r3, r2
 8008f36:	608b      	str	r3, [r1, #8]
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 ff07 	bl	8009d4c <_Bfree>
 8008f3e:	69e3      	ldr	r3, [r4, #28]
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	1e3b      	subs	r3, r7, #0
 8008f46:	bfbb      	ittet	lt
 8008f48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f4c:	9303      	strlt	r3, [sp, #12]
 8008f4e:	2300      	movge	r3, #0
 8008f50:	2201      	movlt	r2, #1
 8008f52:	bfac      	ite	ge
 8008f54:	f8c8 3000 	strge.w	r3, [r8]
 8008f58:	f8c8 2000 	strlt.w	r2, [r8]
 8008f5c:	4b9e      	ldr	r3, [pc, #632]	; (80091d8 <_dtoa_r+0x2f0>)
 8008f5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f62:	ea33 0308 	bics.w	r3, r3, r8
 8008f66:	d11b      	bne.n	8008fa0 <_dtoa_r+0xb8>
 8008f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f74:	4333      	orrs	r3, r6
 8008f76:	f000 8593 	beq.w	8009aa0 <_dtoa_r+0xbb8>
 8008f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7c:	b963      	cbnz	r3, 8008f98 <_dtoa_r+0xb0>
 8008f7e:	4b97      	ldr	r3, [pc, #604]	; (80091dc <_dtoa_r+0x2f4>)
 8008f80:	e027      	b.n	8008fd2 <_dtoa_r+0xea>
 8008f82:	4b97      	ldr	r3, [pc, #604]	; (80091e0 <_dtoa_r+0x2f8>)
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	9800      	ldr	r0, [sp, #0]
 8008f8e:	b013      	add	sp, #76	; 0x4c
 8008f90:	ecbd 8b04 	vpop	{d8-d9}
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f98:	4b90      	ldr	r3, [pc, #576]	; (80091dc <_dtoa_r+0x2f4>)
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	3303      	adds	r3, #3
 8008f9e:	e7f3      	b.n	8008f88 <_dtoa_r+0xa0>
 8008fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	ec51 0b17 	vmov	r0, r1, d7
 8008faa:	eeb0 8a47 	vmov.f32	s16, s14
 8008fae:	eef0 8a67 	vmov.f32	s17, s15
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f7f7 fda8 	bl	8000b08 <__aeabi_dcmpeq>
 8008fb8:	4681      	mov	r9, r0
 8008fba:	b160      	cbz	r0, 8008fd6 <_dtoa_r+0xee>
 8008fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8568 	beq.w	8009a9a <_dtoa_r+0xbb2>
 8008fca:	4b86      	ldr	r3, [pc, #536]	; (80091e4 <_dtoa_r+0x2fc>)
 8008fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	e7da      	b.n	8008f8c <_dtoa_r+0xa4>
 8008fd6:	aa10      	add	r2, sp, #64	; 0x40
 8008fd8:	a911      	add	r1, sp, #68	; 0x44
 8008fda:	4620      	mov	r0, r4
 8008fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8008fe0:	eef0 0a68 	vmov.f32	s1, s17
 8008fe4:	f001 f994 	bl	800a310 <__d2b>
 8008fe8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fec:	4682      	mov	sl, r0
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	d07f      	beq.n	80090f2 <_dtoa_r+0x20a>
 8008ff2:	ee18 3a90 	vmov	r3, s17
 8008ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ffa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ffe:	ec51 0b18 	vmov	r0, r1, d8
 8009002:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800900a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800900e:	4619      	mov	r1, r3
 8009010:	2200      	movs	r2, #0
 8009012:	4b75      	ldr	r3, [pc, #468]	; (80091e8 <_dtoa_r+0x300>)
 8009014:	f7f7 f958 	bl	80002c8 <__aeabi_dsub>
 8009018:	a367      	add	r3, pc, #412	; (adr r3, 80091b8 <_dtoa_r+0x2d0>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 fb0b 	bl	8000638 <__aeabi_dmul>
 8009022:	a367      	add	r3, pc, #412	; (adr r3, 80091c0 <_dtoa_r+0x2d8>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f950 	bl	80002cc <__adddf3>
 800902c:	4606      	mov	r6, r0
 800902e:	4628      	mov	r0, r5
 8009030:	460f      	mov	r7, r1
 8009032:	f7f7 fa97 	bl	8000564 <__aeabi_i2d>
 8009036:	a364      	add	r3, pc, #400	; (adr r3, 80091c8 <_dtoa_r+0x2e0>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 fafc 	bl	8000638 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 f940 	bl	80002cc <__adddf3>
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	f7f7 fda2 	bl	8000b98 <__aeabi_d2iz>
 8009054:	2200      	movs	r2, #0
 8009056:	4683      	mov	fp, r0
 8009058:	2300      	movs	r3, #0
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	f7f7 fd5d 	bl	8000b1c <__aeabi_dcmplt>
 8009062:	b148      	cbz	r0, 8009078 <_dtoa_r+0x190>
 8009064:	4658      	mov	r0, fp
 8009066:	f7f7 fa7d 	bl	8000564 <__aeabi_i2d>
 800906a:	4632      	mov	r2, r6
 800906c:	463b      	mov	r3, r7
 800906e:	f7f7 fd4b 	bl	8000b08 <__aeabi_dcmpeq>
 8009072:	b908      	cbnz	r0, 8009078 <_dtoa_r+0x190>
 8009074:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009078:	f1bb 0f16 	cmp.w	fp, #22
 800907c:	d857      	bhi.n	800912e <_dtoa_r+0x246>
 800907e:	4b5b      	ldr	r3, [pc, #364]	; (80091ec <_dtoa_r+0x304>)
 8009080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	ec51 0b18 	vmov	r0, r1, d8
 800908c:	f7f7 fd46 	bl	8000b1c <__aeabi_dcmplt>
 8009090:	2800      	cmp	r0, #0
 8009092:	d04e      	beq.n	8009132 <_dtoa_r+0x24a>
 8009094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009098:	2300      	movs	r3, #0
 800909a:	930c      	str	r3, [sp, #48]	; 0x30
 800909c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800909e:	1b5b      	subs	r3, r3, r5
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	bf45      	ittet	mi
 80090a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80090a8:	9305      	strmi	r3, [sp, #20]
 80090aa:	2300      	movpl	r3, #0
 80090ac:	2300      	movmi	r3, #0
 80090ae:	9206      	str	r2, [sp, #24]
 80090b0:	bf54      	ite	pl
 80090b2:	9305      	strpl	r3, [sp, #20]
 80090b4:	9306      	strmi	r3, [sp, #24]
 80090b6:	f1bb 0f00 	cmp.w	fp, #0
 80090ba:	db3c      	blt.n	8009136 <_dtoa_r+0x24e>
 80090bc:	9b06      	ldr	r3, [sp, #24]
 80090be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090c2:	445b      	add	r3, fp
 80090c4:	9306      	str	r3, [sp, #24]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9308      	str	r3, [sp, #32]
 80090ca:	9b07      	ldr	r3, [sp, #28]
 80090cc:	2b09      	cmp	r3, #9
 80090ce:	d868      	bhi.n	80091a2 <_dtoa_r+0x2ba>
 80090d0:	2b05      	cmp	r3, #5
 80090d2:	bfc4      	itt	gt
 80090d4:	3b04      	subgt	r3, #4
 80090d6:	9307      	strgt	r3, [sp, #28]
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	f1a3 0302 	sub.w	r3, r3, #2
 80090de:	bfcc      	ite	gt
 80090e0:	2500      	movgt	r5, #0
 80090e2:	2501      	movle	r5, #1
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	f200 8085 	bhi.w	80091f4 <_dtoa_r+0x30c>
 80090ea:	e8df f003 	tbb	[pc, r3]
 80090ee:	3b2e      	.short	0x3b2e
 80090f0:	5839      	.short	0x5839
 80090f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090f6:	441d      	add	r5, r3
 80090f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	bfc1      	itttt	gt
 8009100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009104:	fa08 f803 	lslgt.w	r8, r8, r3
 8009108:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800910c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009110:	bfd6      	itet	le
 8009112:	f1c3 0320 	rsble	r3, r3, #32
 8009116:	ea48 0003 	orrgt.w	r0, r8, r3
 800911a:	fa06 f003 	lslle.w	r0, r6, r3
 800911e:	f7f7 fa11 	bl	8000544 <__aeabi_ui2d>
 8009122:	2201      	movs	r2, #1
 8009124:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009128:	3d01      	subs	r5, #1
 800912a:	920e      	str	r2, [sp, #56]	; 0x38
 800912c:	e76f      	b.n	800900e <_dtoa_r+0x126>
 800912e:	2301      	movs	r3, #1
 8009130:	e7b3      	b.n	800909a <_dtoa_r+0x1b2>
 8009132:	900c      	str	r0, [sp, #48]	; 0x30
 8009134:	e7b2      	b.n	800909c <_dtoa_r+0x1b4>
 8009136:	9b05      	ldr	r3, [sp, #20]
 8009138:	eba3 030b 	sub.w	r3, r3, fp
 800913c:	9305      	str	r3, [sp, #20]
 800913e:	f1cb 0300 	rsb	r3, fp, #0
 8009142:	9308      	str	r3, [sp, #32]
 8009144:	2300      	movs	r3, #0
 8009146:	930b      	str	r3, [sp, #44]	; 0x2c
 8009148:	e7bf      	b.n	80090ca <_dtoa_r+0x1e2>
 800914a:	2300      	movs	r3, #0
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009150:	2b00      	cmp	r3, #0
 8009152:	dc52      	bgt.n	80091fa <_dtoa_r+0x312>
 8009154:	2301      	movs	r3, #1
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	9304      	str	r3, [sp, #16]
 800915a:	461a      	mov	r2, r3
 800915c:	920a      	str	r2, [sp, #40]	; 0x28
 800915e:	e00b      	b.n	8009178 <_dtoa_r+0x290>
 8009160:	2301      	movs	r3, #1
 8009162:	e7f3      	b.n	800914c <_dtoa_r+0x264>
 8009164:	2300      	movs	r3, #0
 8009166:	9309      	str	r3, [sp, #36]	; 0x24
 8009168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916a:	445b      	add	r3, fp
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	3301      	adds	r3, #1
 8009170:	2b01      	cmp	r3, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	bfb8      	it	lt
 8009176:	2301      	movlt	r3, #1
 8009178:	69e0      	ldr	r0, [r4, #28]
 800917a:	2100      	movs	r1, #0
 800917c:	2204      	movs	r2, #4
 800917e:	f102 0614 	add.w	r6, r2, #20
 8009182:	429e      	cmp	r6, r3
 8009184:	d93d      	bls.n	8009202 <_dtoa_r+0x31a>
 8009186:	6041      	str	r1, [r0, #4]
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fd9f 	bl	8009ccc <_Balloc>
 800918e:	9000      	str	r0, [sp, #0]
 8009190:	2800      	cmp	r0, #0
 8009192:	d139      	bne.n	8009208 <_dtoa_r+0x320>
 8009194:	4b16      	ldr	r3, [pc, #88]	; (80091f0 <_dtoa_r+0x308>)
 8009196:	4602      	mov	r2, r0
 8009198:	f240 11af 	movw	r1, #431	; 0x1af
 800919c:	e6bd      	b.n	8008f1a <_dtoa_r+0x32>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7e1      	b.n	8009166 <_dtoa_r+0x27e>
 80091a2:	2501      	movs	r5, #1
 80091a4:	2300      	movs	r3, #0
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	9509      	str	r5, [sp, #36]	; 0x24
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	2200      	movs	r2, #0
 80091b4:	2312      	movs	r3, #18
 80091b6:	e7d1      	b.n	800915c <_dtoa_r+0x274>
 80091b8:	636f4361 	.word	0x636f4361
 80091bc:	3fd287a7 	.word	0x3fd287a7
 80091c0:	8b60c8b3 	.word	0x8b60c8b3
 80091c4:	3fc68a28 	.word	0x3fc68a28
 80091c8:	509f79fb 	.word	0x509f79fb
 80091cc:	3fd34413 	.word	0x3fd34413
 80091d0:	0800af69 	.word	0x0800af69
 80091d4:	0800af80 	.word	0x0800af80
 80091d8:	7ff00000 	.word	0x7ff00000
 80091dc:	0800af65 	.word	0x0800af65
 80091e0:	0800af5c 	.word	0x0800af5c
 80091e4:	0800af39 	.word	0x0800af39
 80091e8:	3ff80000 	.word	0x3ff80000
 80091ec:	0800b070 	.word	0x0800b070
 80091f0:	0800afd8 	.word	0x0800afd8
 80091f4:	2301      	movs	r3, #1
 80091f6:	9309      	str	r3, [sp, #36]	; 0x24
 80091f8:	e7d7      	b.n	80091aa <_dtoa_r+0x2c2>
 80091fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	e7ba      	b.n	8009178 <_dtoa_r+0x290>
 8009202:	3101      	adds	r1, #1
 8009204:	0052      	lsls	r2, r2, #1
 8009206:	e7ba      	b.n	800917e <_dtoa_r+0x296>
 8009208:	69e3      	ldr	r3, [r4, #28]
 800920a:	9a00      	ldr	r2, [sp, #0]
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	2b0e      	cmp	r3, #14
 8009212:	f200 80a8 	bhi.w	8009366 <_dtoa_r+0x47e>
 8009216:	2d00      	cmp	r5, #0
 8009218:	f000 80a5 	beq.w	8009366 <_dtoa_r+0x47e>
 800921c:	f1bb 0f00 	cmp.w	fp, #0
 8009220:	dd38      	ble.n	8009294 <_dtoa_r+0x3ac>
 8009222:	4bc0      	ldr	r3, [pc, #768]	; (8009524 <_dtoa_r+0x63c>)
 8009224:	f00b 020f 	and.w	r2, fp, #15
 8009228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800922c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009230:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009234:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009238:	d019      	beq.n	800926e <_dtoa_r+0x386>
 800923a:	4bbb      	ldr	r3, [pc, #748]	; (8009528 <_dtoa_r+0x640>)
 800923c:	ec51 0b18 	vmov	r0, r1, d8
 8009240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009244:	f7f7 fb22 	bl	800088c <__aeabi_ddiv>
 8009248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800924c:	f008 080f 	and.w	r8, r8, #15
 8009250:	2503      	movs	r5, #3
 8009252:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009528 <_dtoa_r+0x640>
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	d10a      	bne.n	8009272 <_dtoa_r+0x38a>
 800925c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009260:	4632      	mov	r2, r6
 8009262:	463b      	mov	r3, r7
 8009264:	f7f7 fb12 	bl	800088c <__aeabi_ddiv>
 8009268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800926c:	e02b      	b.n	80092c6 <_dtoa_r+0x3de>
 800926e:	2502      	movs	r5, #2
 8009270:	e7ef      	b.n	8009252 <_dtoa_r+0x36a>
 8009272:	f018 0f01 	tst.w	r8, #1
 8009276:	d008      	beq.n	800928a <_dtoa_r+0x3a2>
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009280:	f7f7 f9da 	bl	8000638 <__aeabi_dmul>
 8009284:	3501      	adds	r5, #1
 8009286:	4606      	mov	r6, r0
 8009288:	460f      	mov	r7, r1
 800928a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800928e:	f109 0908 	add.w	r9, r9, #8
 8009292:	e7e0      	b.n	8009256 <_dtoa_r+0x36e>
 8009294:	f000 809f 	beq.w	80093d6 <_dtoa_r+0x4ee>
 8009298:	f1cb 0600 	rsb	r6, fp, #0
 800929c:	4ba1      	ldr	r3, [pc, #644]	; (8009524 <_dtoa_r+0x63c>)
 800929e:	4fa2      	ldr	r7, [pc, #648]	; (8009528 <_dtoa_r+0x640>)
 80092a0:	f006 020f 	and.w	r2, r6, #15
 80092a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	ec51 0b18 	vmov	r0, r1, d8
 80092b0:	f7f7 f9c2 	bl	8000638 <__aeabi_dmul>
 80092b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b8:	1136      	asrs	r6, r6, #4
 80092ba:	2300      	movs	r3, #0
 80092bc:	2502      	movs	r5, #2
 80092be:	2e00      	cmp	r6, #0
 80092c0:	d17e      	bne.n	80093c0 <_dtoa_r+0x4d8>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1d0      	bne.n	8009268 <_dtoa_r+0x380>
 80092c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 8084 	beq.w	80093da <_dtoa_r+0x4f2>
 80092d2:	4b96      	ldr	r3, [pc, #600]	; (800952c <_dtoa_r+0x644>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f7 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d07b      	beq.n	80093da <_dtoa_r+0x4f2>
 80092e2:	9b04      	ldr	r3, [sp, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d078      	beq.n	80093da <_dtoa_r+0x4f2>
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd39      	ble.n	8009362 <_dtoa_r+0x47a>
 80092ee:	4b90      	ldr	r3, [pc, #576]	; (8009530 <_dtoa_r+0x648>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f7 f99f 	bl	8000638 <__aeabi_dmul>
 80092fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fe:	9e01      	ldr	r6, [sp, #4]
 8009300:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009304:	3501      	adds	r5, #1
 8009306:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800930a:	4628      	mov	r0, r5
 800930c:	f7f7 f92a 	bl	8000564 <__aeabi_i2d>
 8009310:	4642      	mov	r2, r8
 8009312:	464b      	mov	r3, r9
 8009314:	f7f7 f990 	bl	8000638 <__aeabi_dmul>
 8009318:	4b86      	ldr	r3, [pc, #536]	; (8009534 <_dtoa_r+0x64c>)
 800931a:	2200      	movs	r2, #0
 800931c:	f7f6 ffd6 	bl	80002cc <__adddf3>
 8009320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009328:	9303      	str	r3, [sp, #12]
 800932a:	2e00      	cmp	r6, #0
 800932c:	d158      	bne.n	80093e0 <_dtoa_r+0x4f8>
 800932e:	4b82      	ldr	r3, [pc, #520]	; (8009538 <_dtoa_r+0x650>)
 8009330:	2200      	movs	r2, #0
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	f7f6 ffc7 	bl	80002c8 <__aeabi_dsub>
 800933a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800933e:	4680      	mov	r8, r0
 8009340:	4689      	mov	r9, r1
 8009342:	f7f7 fc09 	bl	8000b58 <__aeabi_dcmpgt>
 8009346:	2800      	cmp	r0, #0
 8009348:	f040 8296 	bne.w	8009878 <_dtoa_r+0x990>
 800934c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009350:	4640      	mov	r0, r8
 8009352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009356:	4649      	mov	r1, r9
 8009358:	f7f7 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 8289 	bne.w	8009874 <_dtoa_r+0x98c>
 8009362:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009368:	2b00      	cmp	r3, #0
 800936a:	f2c0 814e 	blt.w	800960a <_dtoa_r+0x722>
 800936e:	f1bb 0f0e 	cmp.w	fp, #14
 8009372:	f300 814a 	bgt.w	800960a <_dtoa_r+0x722>
 8009376:	4b6b      	ldr	r3, [pc, #428]	; (8009524 <_dtoa_r+0x63c>)
 8009378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800937c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	f280 80dc 	bge.w	8009540 <_dtoa_r+0x658>
 8009388:	9b04      	ldr	r3, [sp, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f300 80d8 	bgt.w	8009540 <_dtoa_r+0x658>
 8009390:	f040 826f 	bne.w	8009872 <_dtoa_r+0x98a>
 8009394:	4b68      	ldr	r3, [pc, #416]	; (8009538 <_dtoa_r+0x650>)
 8009396:	2200      	movs	r2, #0
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f7 f94c 	bl	8000638 <__aeabi_dmul>
 80093a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093a4:	f7f7 fbce 	bl	8000b44 <__aeabi_dcmpge>
 80093a8:	9e04      	ldr	r6, [sp, #16]
 80093aa:	4637      	mov	r7, r6
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f040 8245 	bne.w	800983c <_dtoa_r+0x954>
 80093b2:	9d00      	ldr	r5, [sp, #0]
 80093b4:	2331      	movs	r3, #49	; 0x31
 80093b6:	f805 3b01 	strb.w	r3, [r5], #1
 80093ba:	f10b 0b01 	add.w	fp, fp, #1
 80093be:	e241      	b.n	8009844 <_dtoa_r+0x95c>
 80093c0:	07f2      	lsls	r2, r6, #31
 80093c2:	d505      	bpl.n	80093d0 <_dtoa_r+0x4e8>
 80093c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c8:	f7f7 f936 	bl	8000638 <__aeabi_dmul>
 80093cc:	3501      	adds	r5, #1
 80093ce:	2301      	movs	r3, #1
 80093d0:	1076      	asrs	r6, r6, #1
 80093d2:	3708      	adds	r7, #8
 80093d4:	e773      	b.n	80092be <_dtoa_r+0x3d6>
 80093d6:	2502      	movs	r5, #2
 80093d8:	e775      	b.n	80092c6 <_dtoa_r+0x3de>
 80093da:	9e04      	ldr	r6, [sp, #16]
 80093dc:	465f      	mov	r7, fp
 80093de:	e792      	b.n	8009306 <_dtoa_r+0x41e>
 80093e0:	9900      	ldr	r1, [sp, #0]
 80093e2:	4b50      	ldr	r3, [pc, #320]	; (8009524 <_dtoa_r+0x63c>)
 80093e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e8:	4431      	add	r1, r6
 80093ea:	9102      	str	r1, [sp, #8]
 80093ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093ee:	eeb0 9a47 	vmov.f32	s18, s14
 80093f2:	eef0 9a67 	vmov.f32	s19, s15
 80093f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093fe:	2900      	cmp	r1, #0
 8009400:	d044      	beq.n	800948c <_dtoa_r+0x5a4>
 8009402:	494e      	ldr	r1, [pc, #312]	; (800953c <_dtoa_r+0x654>)
 8009404:	2000      	movs	r0, #0
 8009406:	f7f7 fa41 	bl	800088c <__aeabi_ddiv>
 800940a:	ec53 2b19 	vmov	r2, r3, d9
 800940e:	f7f6 ff5b 	bl	80002c8 <__aeabi_dsub>
 8009412:	9d00      	ldr	r5, [sp, #0]
 8009414:	ec41 0b19 	vmov	d9, r0, r1
 8009418:	4649      	mov	r1, r9
 800941a:	4640      	mov	r0, r8
 800941c:	f7f7 fbbc 	bl	8000b98 <__aeabi_d2iz>
 8009420:	4606      	mov	r6, r0
 8009422:	f7f7 f89f 	bl	8000564 <__aeabi_i2d>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4640      	mov	r0, r8
 800942c:	4649      	mov	r1, r9
 800942e:	f7f6 ff4b 	bl	80002c8 <__aeabi_dsub>
 8009432:	3630      	adds	r6, #48	; 0x30
 8009434:	f805 6b01 	strb.w	r6, [r5], #1
 8009438:	ec53 2b19 	vmov	r2, r3, d9
 800943c:	4680      	mov	r8, r0
 800943e:	4689      	mov	r9, r1
 8009440:	f7f7 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8009444:	2800      	cmp	r0, #0
 8009446:	d164      	bne.n	8009512 <_dtoa_r+0x62a>
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	4937      	ldr	r1, [pc, #220]	; (800952c <_dtoa_r+0x644>)
 800944e:	2000      	movs	r0, #0
 8009450:	f7f6 ff3a 	bl	80002c8 <__aeabi_dsub>
 8009454:	ec53 2b19 	vmov	r2, r3, d9
 8009458:	f7f7 fb60 	bl	8000b1c <__aeabi_dcmplt>
 800945c:	2800      	cmp	r0, #0
 800945e:	f040 80b6 	bne.w	80095ce <_dtoa_r+0x6e6>
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	429d      	cmp	r5, r3
 8009466:	f43f af7c 	beq.w	8009362 <_dtoa_r+0x47a>
 800946a:	4b31      	ldr	r3, [pc, #196]	; (8009530 <_dtoa_r+0x648>)
 800946c:	ec51 0b19 	vmov	r0, r1, d9
 8009470:	2200      	movs	r2, #0
 8009472:	f7f7 f8e1 	bl	8000638 <__aeabi_dmul>
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <_dtoa_r+0x648>)
 8009478:	ec41 0b19 	vmov	d9, r0, r1
 800947c:	2200      	movs	r2, #0
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 f8d9 	bl	8000638 <__aeabi_dmul>
 8009486:	4680      	mov	r8, r0
 8009488:	4689      	mov	r9, r1
 800948a:	e7c5      	b.n	8009418 <_dtoa_r+0x530>
 800948c:	ec51 0b17 	vmov	r0, r1, d7
 8009490:	f7f7 f8d2 	bl	8000638 <__aeabi_dmul>
 8009494:	9b02      	ldr	r3, [sp, #8]
 8009496:	9d00      	ldr	r5, [sp, #0]
 8009498:	930f      	str	r3, [sp, #60]	; 0x3c
 800949a:	ec41 0b19 	vmov	d9, r0, r1
 800949e:	4649      	mov	r1, r9
 80094a0:	4640      	mov	r0, r8
 80094a2:	f7f7 fb79 	bl	8000b98 <__aeabi_d2iz>
 80094a6:	4606      	mov	r6, r0
 80094a8:	f7f7 f85c 	bl	8000564 <__aeabi_i2d>
 80094ac:	3630      	adds	r6, #48	; 0x30
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4640      	mov	r0, r8
 80094b4:	4649      	mov	r1, r9
 80094b6:	f7f6 ff07 	bl	80002c8 <__aeabi_dsub>
 80094ba:	f805 6b01 	strb.w	r6, [r5], #1
 80094be:	9b02      	ldr	r3, [sp, #8]
 80094c0:	429d      	cmp	r5, r3
 80094c2:	4680      	mov	r8, r0
 80094c4:	4689      	mov	r9, r1
 80094c6:	f04f 0200 	mov.w	r2, #0
 80094ca:	d124      	bne.n	8009516 <_dtoa_r+0x62e>
 80094cc:	4b1b      	ldr	r3, [pc, #108]	; (800953c <_dtoa_r+0x654>)
 80094ce:	ec51 0b19 	vmov	r0, r1, d9
 80094d2:	f7f6 fefb 	bl	80002cc <__adddf3>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 fb3b 	bl	8000b58 <__aeabi_dcmpgt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d173      	bne.n	80095ce <_dtoa_r+0x6e6>
 80094e6:	ec53 2b19 	vmov	r2, r3, d9
 80094ea:	4914      	ldr	r1, [pc, #80]	; (800953c <_dtoa_r+0x654>)
 80094ec:	2000      	movs	r0, #0
 80094ee:	f7f6 feeb 	bl	80002c8 <__aeabi_dsub>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f7 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f af2f 	beq.w	8009362 <_dtoa_r+0x47a>
 8009504:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009506:	1e6b      	subs	r3, r5, #1
 8009508:	930f      	str	r3, [sp, #60]	; 0x3c
 800950a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800950e:	2b30      	cmp	r3, #48	; 0x30
 8009510:	d0f8      	beq.n	8009504 <_dtoa_r+0x61c>
 8009512:	46bb      	mov	fp, r7
 8009514:	e04a      	b.n	80095ac <_dtoa_r+0x6c4>
 8009516:	4b06      	ldr	r3, [pc, #24]	; (8009530 <_dtoa_r+0x648>)
 8009518:	f7f7 f88e 	bl	8000638 <__aeabi_dmul>
 800951c:	4680      	mov	r8, r0
 800951e:	4689      	mov	r9, r1
 8009520:	e7bd      	b.n	800949e <_dtoa_r+0x5b6>
 8009522:	bf00      	nop
 8009524:	0800b070 	.word	0x0800b070
 8009528:	0800b048 	.word	0x0800b048
 800952c:	3ff00000 	.word	0x3ff00000
 8009530:	40240000 	.word	0x40240000
 8009534:	401c0000 	.word	0x401c0000
 8009538:	40140000 	.word	0x40140000
 800953c:	3fe00000 	.word	0x3fe00000
 8009540:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009544:	9d00      	ldr	r5, [sp, #0]
 8009546:	4642      	mov	r2, r8
 8009548:	464b      	mov	r3, r9
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f7 f99d 	bl	800088c <__aeabi_ddiv>
 8009552:	f7f7 fb21 	bl	8000b98 <__aeabi_d2iz>
 8009556:	9001      	str	r0, [sp, #4]
 8009558:	f7f7 f804 	bl	8000564 <__aeabi_i2d>
 800955c:	4642      	mov	r2, r8
 800955e:	464b      	mov	r3, r9
 8009560:	f7f7 f86a 	bl	8000638 <__aeabi_dmul>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f6 feac 	bl	80002c8 <__aeabi_dsub>
 8009570:	9e01      	ldr	r6, [sp, #4]
 8009572:	9f04      	ldr	r7, [sp, #16]
 8009574:	3630      	adds	r6, #48	; 0x30
 8009576:	f805 6b01 	strb.w	r6, [r5], #1
 800957a:	9e00      	ldr	r6, [sp, #0]
 800957c:	1bae      	subs	r6, r5, r6
 800957e:	42b7      	cmp	r7, r6
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	d134      	bne.n	80095f0 <_dtoa_r+0x708>
 8009586:	f7f6 fea1 	bl	80002cc <__adddf3>
 800958a:	4642      	mov	r2, r8
 800958c:	464b      	mov	r3, r9
 800958e:	4606      	mov	r6, r0
 8009590:	460f      	mov	r7, r1
 8009592:	f7f7 fae1 	bl	8000b58 <__aeabi_dcmpgt>
 8009596:	b9c8      	cbnz	r0, 80095cc <_dtoa_r+0x6e4>
 8009598:	4642      	mov	r2, r8
 800959a:	464b      	mov	r3, r9
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f7 fab2 	bl	8000b08 <__aeabi_dcmpeq>
 80095a4:	b110      	cbz	r0, 80095ac <_dtoa_r+0x6c4>
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	07db      	lsls	r3, r3, #31
 80095aa:	d40f      	bmi.n	80095cc <_dtoa_r+0x6e4>
 80095ac:	4651      	mov	r1, sl
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 fbcc 	bl	8009d4c <_Bfree>
 80095b4:	2300      	movs	r3, #0
 80095b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095b8:	702b      	strb	r3, [r5, #0]
 80095ba:	f10b 0301 	add.w	r3, fp, #1
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f43f ace2 	beq.w	8008f8c <_dtoa_r+0xa4>
 80095c8:	601d      	str	r5, [r3, #0]
 80095ca:	e4df      	b.n	8008f8c <_dtoa_r+0xa4>
 80095cc:	465f      	mov	r7, fp
 80095ce:	462b      	mov	r3, r5
 80095d0:	461d      	mov	r5, r3
 80095d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d6:	2a39      	cmp	r2, #57	; 0x39
 80095d8:	d106      	bne.n	80095e8 <_dtoa_r+0x700>
 80095da:	9a00      	ldr	r2, [sp, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d1f7      	bne.n	80095d0 <_dtoa_r+0x6e8>
 80095e0:	9900      	ldr	r1, [sp, #0]
 80095e2:	2230      	movs	r2, #48	; 0x30
 80095e4:	3701      	adds	r7, #1
 80095e6:	700a      	strb	r2, [r1, #0]
 80095e8:	781a      	ldrb	r2, [r3, #0]
 80095ea:	3201      	adds	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	e790      	b.n	8009512 <_dtoa_r+0x62a>
 80095f0:	4ba3      	ldr	r3, [pc, #652]	; (8009880 <_dtoa_r+0x998>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	f7f7 f820 	bl	8000638 <__aeabi_dmul>
 80095f8:	2200      	movs	r2, #0
 80095fa:	2300      	movs	r3, #0
 80095fc:	4606      	mov	r6, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	f7f7 fa82 	bl	8000b08 <__aeabi_dcmpeq>
 8009604:	2800      	cmp	r0, #0
 8009606:	d09e      	beq.n	8009546 <_dtoa_r+0x65e>
 8009608:	e7d0      	b.n	80095ac <_dtoa_r+0x6c4>
 800960a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960c:	2a00      	cmp	r2, #0
 800960e:	f000 80ca 	beq.w	80097a6 <_dtoa_r+0x8be>
 8009612:	9a07      	ldr	r2, [sp, #28]
 8009614:	2a01      	cmp	r2, #1
 8009616:	f300 80ad 	bgt.w	8009774 <_dtoa_r+0x88c>
 800961a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800961c:	2a00      	cmp	r2, #0
 800961e:	f000 80a5 	beq.w	800976c <_dtoa_r+0x884>
 8009622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009626:	9e08      	ldr	r6, [sp, #32]
 8009628:	9d05      	ldr	r5, [sp, #20]
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	441a      	add	r2, r3
 800962e:	9205      	str	r2, [sp, #20]
 8009630:	9a06      	ldr	r2, [sp, #24]
 8009632:	2101      	movs	r1, #1
 8009634:	441a      	add	r2, r3
 8009636:	4620      	mov	r0, r4
 8009638:	9206      	str	r2, [sp, #24]
 800963a:	f000 fc3d 	bl	8009eb8 <__i2b>
 800963e:	4607      	mov	r7, r0
 8009640:	b165      	cbz	r5, 800965c <_dtoa_r+0x774>
 8009642:	9b06      	ldr	r3, [sp, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	dd09      	ble.n	800965c <_dtoa_r+0x774>
 8009648:	42ab      	cmp	r3, r5
 800964a:	9a05      	ldr	r2, [sp, #20]
 800964c:	bfa8      	it	ge
 800964e:	462b      	movge	r3, r5
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	9205      	str	r2, [sp, #20]
 8009654:	9a06      	ldr	r2, [sp, #24]
 8009656:	1aed      	subs	r5, r5, r3
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	9306      	str	r3, [sp, #24]
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	b1f3      	cbz	r3, 800969e <_dtoa_r+0x7b6>
 8009660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 80a3 	beq.w	80097ae <_dtoa_r+0x8c6>
 8009668:	2e00      	cmp	r6, #0
 800966a:	dd10      	ble.n	800968e <_dtoa_r+0x7a6>
 800966c:	4639      	mov	r1, r7
 800966e:	4632      	mov	r2, r6
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fce1 	bl	800a038 <__pow5mult>
 8009676:	4652      	mov	r2, sl
 8009678:	4601      	mov	r1, r0
 800967a:	4607      	mov	r7, r0
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fc31 	bl	8009ee4 <__multiply>
 8009682:	4651      	mov	r1, sl
 8009684:	4680      	mov	r8, r0
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fb60 	bl	8009d4c <_Bfree>
 800968c:	46c2      	mov	sl, r8
 800968e:	9b08      	ldr	r3, [sp, #32]
 8009690:	1b9a      	subs	r2, r3, r6
 8009692:	d004      	beq.n	800969e <_dtoa_r+0x7b6>
 8009694:	4651      	mov	r1, sl
 8009696:	4620      	mov	r0, r4
 8009698:	f000 fcce 	bl	800a038 <__pow5mult>
 800969c:	4682      	mov	sl, r0
 800969e:	2101      	movs	r1, #1
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fc09 	bl	8009eb8 <__i2b>
 80096a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	4606      	mov	r6, r0
 80096ac:	f340 8081 	ble.w	80097b2 <_dtoa_r+0x8ca>
 80096b0:	461a      	mov	r2, r3
 80096b2:	4601      	mov	r1, r0
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fcbf 	bl	800a038 <__pow5mult>
 80096ba:	9b07      	ldr	r3, [sp, #28]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	4606      	mov	r6, r0
 80096c0:	dd7a      	ble.n	80097b8 <_dtoa_r+0x8d0>
 80096c2:	f04f 0800 	mov.w	r8, #0
 80096c6:	6933      	ldr	r3, [r6, #16]
 80096c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096cc:	6918      	ldr	r0, [r3, #16]
 80096ce:	f000 fba5 	bl	8009e1c <__hi0bits>
 80096d2:	f1c0 0020 	rsb	r0, r0, #32
 80096d6:	9b06      	ldr	r3, [sp, #24]
 80096d8:	4418      	add	r0, r3
 80096da:	f010 001f 	ands.w	r0, r0, #31
 80096de:	f000 8094 	beq.w	800980a <_dtoa_r+0x922>
 80096e2:	f1c0 0320 	rsb	r3, r0, #32
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	f340 8085 	ble.w	80097f6 <_dtoa_r+0x90e>
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	f1c0 001c 	rsb	r0, r0, #28
 80096f2:	4403      	add	r3, r0
 80096f4:	9305      	str	r3, [sp, #20]
 80096f6:	9b06      	ldr	r3, [sp, #24]
 80096f8:	4403      	add	r3, r0
 80096fa:	4405      	add	r5, r0
 80096fc:	9306      	str	r3, [sp, #24]
 80096fe:	9b05      	ldr	r3, [sp, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	dd05      	ble.n	8009710 <_dtoa_r+0x828>
 8009704:	4651      	mov	r1, sl
 8009706:	461a      	mov	r2, r3
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fcef 	bl	800a0ec <__lshift>
 800970e:	4682      	mov	sl, r0
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	dd05      	ble.n	8009722 <_dtoa_r+0x83a>
 8009716:	4631      	mov	r1, r6
 8009718:	461a      	mov	r2, r3
 800971a:	4620      	mov	r0, r4
 800971c:	f000 fce6 	bl	800a0ec <__lshift>
 8009720:	4606      	mov	r6, r0
 8009722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009724:	2b00      	cmp	r3, #0
 8009726:	d072      	beq.n	800980e <_dtoa_r+0x926>
 8009728:	4631      	mov	r1, r6
 800972a:	4650      	mov	r0, sl
 800972c:	f000 fd4a 	bl	800a1c4 <__mcmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	da6c      	bge.n	800980e <_dtoa_r+0x926>
 8009734:	2300      	movs	r3, #0
 8009736:	4651      	mov	r1, sl
 8009738:	220a      	movs	r2, #10
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fb28 	bl	8009d90 <__multadd>
 8009740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009746:	4682      	mov	sl, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 81b0 	beq.w	8009aae <_dtoa_r+0xbc6>
 800974e:	2300      	movs	r3, #0
 8009750:	4639      	mov	r1, r7
 8009752:	220a      	movs	r2, #10
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fb1b 	bl	8009d90 <__multadd>
 800975a:	9b01      	ldr	r3, [sp, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	4607      	mov	r7, r0
 8009760:	f300 8096 	bgt.w	8009890 <_dtoa_r+0x9a8>
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	2b02      	cmp	r3, #2
 8009768:	dc59      	bgt.n	800981e <_dtoa_r+0x936>
 800976a:	e091      	b.n	8009890 <_dtoa_r+0x9a8>
 800976c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800976e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009772:	e758      	b.n	8009626 <_dtoa_r+0x73e>
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	1e5e      	subs	r6, r3, #1
 8009778:	9b08      	ldr	r3, [sp, #32]
 800977a:	42b3      	cmp	r3, r6
 800977c:	bfbf      	itttt	lt
 800977e:	9b08      	ldrlt	r3, [sp, #32]
 8009780:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009782:	9608      	strlt	r6, [sp, #32]
 8009784:	1af3      	sublt	r3, r6, r3
 8009786:	bfb4      	ite	lt
 8009788:	18d2      	addlt	r2, r2, r3
 800978a:	1b9e      	subge	r6, r3, r6
 800978c:	9b04      	ldr	r3, [sp, #16]
 800978e:	bfbc      	itt	lt
 8009790:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009792:	2600      	movlt	r6, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	bfb7      	itett	lt
 8009798:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800979c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80097a0:	1a9d      	sublt	r5, r3, r2
 80097a2:	2300      	movlt	r3, #0
 80097a4:	e741      	b.n	800962a <_dtoa_r+0x742>
 80097a6:	9e08      	ldr	r6, [sp, #32]
 80097a8:	9d05      	ldr	r5, [sp, #20]
 80097aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097ac:	e748      	b.n	8009640 <_dtoa_r+0x758>
 80097ae:	9a08      	ldr	r2, [sp, #32]
 80097b0:	e770      	b.n	8009694 <_dtoa_r+0x7ac>
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	dc19      	bgt.n	80097ec <_dtoa_r+0x904>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	b9bb      	cbnz	r3, 80097ec <_dtoa_r+0x904>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097c2:	b99b      	cbnz	r3, 80097ec <_dtoa_r+0x904>
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097ca:	0d1b      	lsrs	r3, r3, #20
 80097cc:	051b      	lsls	r3, r3, #20
 80097ce:	b183      	cbz	r3, 80097f2 <_dtoa_r+0x90a>
 80097d0:	9b05      	ldr	r3, [sp, #20]
 80097d2:	3301      	adds	r3, #1
 80097d4:	9305      	str	r3, [sp, #20]
 80097d6:	9b06      	ldr	r3, [sp, #24]
 80097d8:	3301      	adds	r3, #1
 80097da:	9306      	str	r3, [sp, #24]
 80097dc:	f04f 0801 	mov.w	r8, #1
 80097e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f47f af6f 	bne.w	80096c6 <_dtoa_r+0x7de>
 80097e8:	2001      	movs	r0, #1
 80097ea:	e774      	b.n	80096d6 <_dtoa_r+0x7ee>
 80097ec:	f04f 0800 	mov.w	r8, #0
 80097f0:	e7f6      	b.n	80097e0 <_dtoa_r+0x8f8>
 80097f2:	4698      	mov	r8, r3
 80097f4:	e7f4      	b.n	80097e0 <_dtoa_r+0x8f8>
 80097f6:	d082      	beq.n	80096fe <_dtoa_r+0x816>
 80097f8:	9a05      	ldr	r2, [sp, #20]
 80097fa:	331c      	adds	r3, #28
 80097fc:	441a      	add	r2, r3
 80097fe:	9205      	str	r2, [sp, #20]
 8009800:	9a06      	ldr	r2, [sp, #24]
 8009802:	441a      	add	r2, r3
 8009804:	441d      	add	r5, r3
 8009806:	9206      	str	r2, [sp, #24]
 8009808:	e779      	b.n	80096fe <_dtoa_r+0x816>
 800980a:	4603      	mov	r3, r0
 800980c:	e7f4      	b.n	80097f8 <_dtoa_r+0x910>
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	dc37      	bgt.n	8009884 <_dtoa_r+0x99c>
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	2b02      	cmp	r3, #2
 8009818:	dd34      	ble.n	8009884 <_dtoa_r+0x99c>
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	b963      	cbnz	r3, 800983c <_dtoa_r+0x954>
 8009822:	4631      	mov	r1, r6
 8009824:	2205      	movs	r2, #5
 8009826:	4620      	mov	r0, r4
 8009828:	f000 fab2 	bl	8009d90 <__multadd>
 800982c:	4601      	mov	r1, r0
 800982e:	4606      	mov	r6, r0
 8009830:	4650      	mov	r0, sl
 8009832:	f000 fcc7 	bl	800a1c4 <__mcmp>
 8009836:	2800      	cmp	r0, #0
 8009838:	f73f adbb 	bgt.w	80093b2 <_dtoa_r+0x4ca>
 800983c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800983e:	9d00      	ldr	r5, [sp, #0]
 8009840:	ea6f 0b03 	mvn.w	fp, r3
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	4631      	mov	r1, r6
 800984a:	4620      	mov	r0, r4
 800984c:	f000 fa7e 	bl	8009d4c <_Bfree>
 8009850:	2f00      	cmp	r7, #0
 8009852:	f43f aeab 	beq.w	80095ac <_dtoa_r+0x6c4>
 8009856:	f1b8 0f00 	cmp.w	r8, #0
 800985a:	d005      	beq.n	8009868 <_dtoa_r+0x980>
 800985c:	45b8      	cmp	r8, r7
 800985e:	d003      	beq.n	8009868 <_dtoa_r+0x980>
 8009860:	4641      	mov	r1, r8
 8009862:	4620      	mov	r0, r4
 8009864:	f000 fa72 	bl	8009d4c <_Bfree>
 8009868:	4639      	mov	r1, r7
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fa6e 	bl	8009d4c <_Bfree>
 8009870:	e69c      	b.n	80095ac <_dtoa_r+0x6c4>
 8009872:	2600      	movs	r6, #0
 8009874:	4637      	mov	r7, r6
 8009876:	e7e1      	b.n	800983c <_dtoa_r+0x954>
 8009878:	46bb      	mov	fp, r7
 800987a:	4637      	mov	r7, r6
 800987c:	e599      	b.n	80093b2 <_dtoa_r+0x4ca>
 800987e:	bf00      	nop
 8009880:	40240000 	.word	0x40240000
 8009884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 80c8 	beq.w	8009a1c <_dtoa_r+0xb34>
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	2d00      	cmp	r5, #0
 8009892:	dd05      	ble.n	80098a0 <_dtoa_r+0x9b8>
 8009894:	4639      	mov	r1, r7
 8009896:	462a      	mov	r2, r5
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fc27 	bl	800a0ec <__lshift>
 800989e:	4607      	mov	r7, r0
 80098a0:	f1b8 0f00 	cmp.w	r8, #0
 80098a4:	d05b      	beq.n	800995e <_dtoa_r+0xa76>
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fa0f 	bl	8009ccc <_Balloc>
 80098ae:	4605      	mov	r5, r0
 80098b0:	b928      	cbnz	r0, 80098be <_dtoa_r+0x9d6>
 80098b2:	4b83      	ldr	r3, [pc, #524]	; (8009ac0 <_dtoa_r+0xbd8>)
 80098b4:	4602      	mov	r2, r0
 80098b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098ba:	f7ff bb2e 	b.w	8008f1a <_dtoa_r+0x32>
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	3202      	adds	r2, #2
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	f107 010c 	add.w	r1, r7, #12
 80098c8:	300c      	adds	r0, #12
 80098ca:	f000 ffab 	bl	800a824 <memcpy>
 80098ce:	2201      	movs	r2, #1
 80098d0:	4629      	mov	r1, r5
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 fc0a 	bl	800a0ec <__lshift>
 80098d8:	9b00      	ldr	r3, [sp, #0]
 80098da:	3301      	adds	r3, #1
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098e2:	4413      	add	r3, r2
 80098e4:	9308      	str	r3, [sp, #32]
 80098e6:	9b02      	ldr	r3, [sp, #8]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	46b8      	mov	r8, r7
 80098ee:	9306      	str	r3, [sp, #24]
 80098f0:	4607      	mov	r7, r0
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	4631      	mov	r1, r6
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4650      	mov	r0, sl
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	f7ff fa69 	bl	8008dd2 <quorem>
 8009900:	4641      	mov	r1, r8
 8009902:	9002      	str	r0, [sp, #8]
 8009904:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009908:	4650      	mov	r0, sl
 800990a:	f000 fc5b 	bl	800a1c4 <__mcmp>
 800990e:	463a      	mov	r2, r7
 8009910:	9005      	str	r0, [sp, #20]
 8009912:	4631      	mov	r1, r6
 8009914:	4620      	mov	r0, r4
 8009916:	f000 fc71 	bl	800a1fc <__mdiff>
 800991a:	68c2      	ldr	r2, [r0, #12]
 800991c:	4605      	mov	r5, r0
 800991e:	bb02      	cbnz	r2, 8009962 <_dtoa_r+0xa7a>
 8009920:	4601      	mov	r1, r0
 8009922:	4650      	mov	r0, sl
 8009924:	f000 fc4e 	bl	800a1c4 <__mcmp>
 8009928:	4602      	mov	r2, r0
 800992a:	4629      	mov	r1, r5
 800992c:	4620      	mov	r0, r4
 800992e:	9209      	str	r2, [sp, #36]	; 0x24
 8009930:	f000 fa0c 	bl	8009d4c <_Bfree>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009938:	9d04      	ldr	r5, [sp, #16]
 800993a:	ea43 0102 	orr.w	r1, r3, r2
 800993e:	9b06      	ldr	r3, [sp, #24]
 8009940:	4319      	orrs	r1, r3
 8009942:	d110      	bne.n	8009966 <_dtoa_r+0xa7e>
 8009944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009948:	d029      	beq.n	800999e <_dtoa_r+0xab6>
 800994a:	9b05      	ldr	r3, [sp, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	dd02      	ble.n	8009956 <_dtoa_r+0xa6e>
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	f883 9000 	strb.w	r9, [r3]
 800995c:	e774      	b.n	8009848 <_dtoa_r+0x960>
 800995e:	4638      	mov	r0, r7
 8009960:	e7ba      	b.n	80098d8 <_dtoa_r+0x9f0>
 8009962:	2201      	movs	r2, #1
 8009964:	e7e1      	b.n	800992a <_dtoa_r+0xa42>
 8009966:	9b05      	ldr	r3, [sp, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	db04      	blt.n	8009976 <_dtoa_r+0xa8e>
 800996c:	9907      	ldr	r1, [sp, #28]
 800996e:	430b      	orrs	r3, r1
 8009970:	9906      	ldr	r1, [sp, #24]
 8009972:	430b      	orrs	r3, r1
 8009974:	d120      	bne.n	80099b8 <_dtoa_r+0xad0>
 8009976:	2a00      	cmp	r2, #0
 8009978:	dded      	ble.n	8009956 <_dtoa_r+0xa6e>
 800997a:	4651      	mov	r1, sl
 800997c:	2201      	movs	r2, #1
 800997e:	4620      	mov	r0, r4
 8009980:	f000 fbb4 	bl	800a0ec <__lshift>
 8009984:	4631      	mov	r1, r6
 8009986:	4682      	mov	sl, r0
 8009988:	f000 fc1c 	bl	800a1c4 <__mcmp>
 800998c:	2800      	cmp	r0, #0
 800998e:	dc03      	bgt.n	8009998 <_dtoa_r+0xab0>
 8009990:	d1e1      	bne.n	8009956 <_dtoa_r+0xa6e>
 8009992:	f019 0f01 	tst.w	r9, #1
 8009996:	d0de      	beq.n	8009956 <_dtoa_r+0xa6e>
 8009998:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800999c:	d1d8      	bne.n	8009950 <_dtoa_r+0xa68>
 800999e:	9a01      	ldr	r2, [sp, #4]
 80099a0:	2339      	movs	r3, #57	; 0x39
 80099a2:	7013      	strb	r3, [r2, #0]
 80099a4:	462b      	mov	r3, r5
 80099a6:	461d      	mov	r5, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099ae:	2a39      	cmp	r2, #57	; 0x39
 80099b0:	d06c      	beq.n	8009a8c <_dtoa_r+0xba4>
 80099b2:	3201      	adds	r2, #1
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	e747      	b.n	8009848 <_dtoa_r+0x960>
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	dd07      	ble.n	80099cc <_dtoa_r+0xae4>
 80099bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099c0:	d0ed      	beq.n	800999e <_dtoa_r+0xab6>
 80099c2:	9a01      	ldr	r2, [sp, #4]
 80099c4:	f109 0301 	add.w	r3, r9, #1
 80099c8:	7013      	strb	r3, [r2, #0]
 80099ca:	e73d      	b.n	8009848 <_dtoa_r+0x960>
 80099cc:	9b04      	ldr	r3, [sp, #16]
 80099ce:	9a08      	ldr	r2, [sp, #32]
 80099d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d043      	beq.n	8009a60 <_dtoa_r+0xb78>
 80099d8:	4651      	mov	r1, sl
 80099da:	2300      	movs	r3, #0
 80099dc:	220a      	movs	r2, #10
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 f9d6 	bl	8009d90 <__multadd>
 80099e4:	45b8      	cmp	r8, r7
 80099e6:	4682      	mov	sl, r0
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	f04f 020a 	mov.w	r2, #10
 80099f0:	4641      	mov	r1, r8
 80099f2:	4620      	mov	r0, r4
 80099f4:	d107      	bne.n	8009a06 <_dtoa_r+0xb1e>
 80099f6:	f000 f9cb 	bl	8009d90 <__multadd>
 80099fa:	4680      	mov	r8, r0
 80099fc:	4607      	mov	r7, r0
 80099fe:	9b04      	ldr	r3, [sp, #16]
 8009a00:	3301      	adds	r3, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	e775      	b.n	80098f2 <_dtoa_r+0xa0a>
 8009a06:	f000 f9c3 	bl	8009d90 <__multadd>
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	220a      	movs	r2, #10
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 f9bc 	bl	8009d90 <__multadd>
 8009a18:	4607      	mov	r7, r0
 8009a1a:	e7f0      	b.n	80099fe <_dtoa_r+0xb16>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	9d00      	ldr	r5, [sp, #0]
 8009a22:	4631      	mov	r1, r6
 8009a24:	4650      	mov	r0, sl
 8009a26:	f7ff f9d4 	bl	8008dd2 <quorem>
 8009a2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	f805 9b01 	strb.w	r9, [r5], #1
 8009a34:	1aea      	subs	r2, r5, r3
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	dd07      	ble.n	8009a4c <_dtoa_r+0xb64>
 8009a3c:	4651      	mov	r1, sl
 8009a3e:	2300      	movs	r3, #0
 8009a40:	220a      	movs	r2, #10
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f9a4 	bl	8009d90 <__multadd>
 8009a48:	4682      	mov	sl, r0
 8009a4a:	e7ea      	b.n	8009a22 <_dtoa_r+0xb3a>
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfc8      	it	gt
 8009a52:	461d      	movgt	r5, r3
 8009a54:	9b00      	ldr	r3, [sp, #0]
 8009a56:	bfd8      	it	le
 8009a58:	2501      	movle	r5, #1
 8009a5a:	441d      	add	r5, r3
 8009a5c:	f04f 0800 	mov.w	r8, #0
 8009a60:	4651      	mov	r1, sl
 8009a62:	2201      	movs	r2, #1
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 fb41 	bl	800a0ec <__lshift>
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	f000 fba9 	bl	800a1c4 <__mcmp>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	dc96      	bgt.n	80099a4 <_dtoa_r+0xabc>
 8009a76:	d102      	bne.n	8009a7e <_dtoa_r+0xb96>
 8009a78:	f019 0f01 	tst.w	r9, #1
 8009a7c:	d192      	bne.n	80099a4 <_dtoa_r+0xabc>
 8009a7e:	462b      	mov	r3, r5
 8009a80:	461d      	mov	r5, r3
 8009a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a86:	2a30      	cmp	r2, #48	; 0x30
 8009a88:	d0fa      	beq.n	8009a80 <_dtoa_r+0xb98>
 8009a8a:	e6dd      	b.n	8009848 <_dtoa_r+0x960>
 8009a8c:	9a00      	ldr	r2, [sp, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d189      	bne.n	80099a6 <_dtoa_r+0xabe>
 8009a92:	f10b 0b01 	add.w	fp, fp, #1
 8009a96:	2331      	movs	r3, #49	; 0x31
 8009a98:	e796      	b.n	80099c8 <_dtoa_r+0xae0>
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <_dtoa_r+0xbdc>)
 8009a9c:	f7ff ba99 	b.w	8008fd2 <_dtoa_r+0xea>
 8009aa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f47f aa6d 	bne.w	8008f82 <_dtoa_r+0x9a>
 8009aa8:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <_dtoa_r+0xbe0>)
 8009aaa:	f7ff ba92 	b.w	8008fd2 <_dtoa_r+0xea>
 8009aae:	9b01      	ldr	r3, [sp, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dcb5      	bgt.n	8009a20 <_dtoa_r+0xb38>
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	f73f aeb1 	bgt.w	800981e <_dtoa_r+0x936>
 8009abc:	e7b0      	b.n	8009a20 <_dtoa_r+0xb38>
 8009abe:	bf00      	nop
 8009ac0:	0800afd8 	.word	0x0800afd8
 8009ac4:	0800af38 	.word	0x0800af38
 8009ac8:	0800af5c 	.word	0x0800af5c

08009acc <_free_r>:
 8009acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d044      	beq.n	8009b5c <_free_r+0x90>
 8009ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad6:	9001      	str	r0, [sp, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f1a1 0404 	sub.w	r4, r1, #4
 8009ade:	bfb8      	it	lt
 8009ae0:	18e4      	addlt	r4, r4, r3
 8009ae2:	f000 f8e7 	bl	8009cb4 <__malloc_lock>
 8009ae6:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <_free_r+0x94>)
 8009ae8:	9801      	ldr	r0, [sp, #4]
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	b933      	cbnz	r3, 8009afc <_free_r+0x30>
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	6014      	str	r4, [r2, #0]
 8009af2:	b003      	add	sp, #12
 8009af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af8:	f000 b8e2 	b.w	8009cc0 <__malloc_unlock>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d908      	bls.n	8009b12 <_free_r+0x46>
 8009b00:	6825      	ldr	r5, [r4, #0]
 8009b02:	1961      	adds	r1, r4, r5
 8009b04:	428b      	cmp	r3, r1
 8009b06:	bf01      	itttt	eq
 8009b08:	6819      	ldreq	r1, [r3, #0]
 8009b0a:	685b      	ldreq	r3, [r3, #4]
 8009b0c:	1949      	addeq	r1, r1, r5
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	e7ed      	b.n	8009aee <_free_r+0x22>
 8009b12:	461a      	mov	r2, r3
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	b10b      	cbz	r3, 8009b1c <_free_r+0x50>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d9fa      	bls.n	8009b12 <_free_r+0x46>
 8009b1c:	6811      	ldr	r1, [r2, #0]
 8009b1e:	1855      	adds	r5, r2, r1
 8009b20:	42a5      	cmp	r5, r4
 8009b22:	d10b      	bne.n	8009b3c <_free_r+0x70>
 8009b24:	6824      	ldr	r4, [r4, #0]
 8009b26:	4421      	add	r1, r4
 8009b28:	1854      	adds	r4, r2, r1
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	d1e0      	bne.n	8009af2 <_free_r+0x26>
 8009b30:	681c      	ldr	r4, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	6053      	str	r3, [r2, #4]
 8009b36:	440c      	add	r4, r1
 8009b38:	6014      	str	r4, [r2, #0]
 8009b3a:	e7da      	b.n	8009af2 <_free_r+0x26>
 8009b3c:	d902      	bls.n	8009b44 <_free_r+0x78>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	e7d6      	b.n	8009af2 <_free_r+0x26>
 8009b44:	6825      	ldr	r5, [r4, #0]
 8009b46:	1961      	adds	r1, r4, r5
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf04      	itt	eq
 8009b4c:	6819      	ldreq	r1, [r3, #0]
 8009b4e:	685b      	ldreq	r3, [r3, #4]
 8009b50:	6063      	str	r3, [r4, #4]
 8009b52:	bf04      	itt	eq
 8009b54:	1949      	addeq	r1, r1, r5
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	6054      	str	r4, [r2, #4]
 8009b5a:	e7ca      	b.n	8009af2 <_free_r+0x26>
 8009b5c:	b003      	add	sp, #12
 8009b5e:	bd30      	pop	{r4, r5, pc}
 8009b60:	20000a64 	.word	0x20000a64

08009b64 <malloc>:
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <malloc+0xc>)
 8009b66:	4601      	mov	r1, r0
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f000 b823 	b.w	8009bb4 <_malloc_r>
 8009b6e:	bf00      	nop
 8009b70:	20000070 	.word	0x20000070

08009b74 <sbrk_aligned>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4e0e      	ldr	r6, [pc, #56]	; (8009bb0 <sbrk_aligned+0x3c>)
 8009b78:	460c      	mov	r4, r1
 8009b7a:	6831      	ldr	r1, [r6, #0]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	b911      	cbnz	r1, 8009b86 <sbrk_aligned+0x12>
 8009b80:	f000 fe40 	bl	800a804 <_sbrk_r>
 8009b84:	6030      	str	r0, [r6, #0]
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 fe3b 	bl	800a804 <_sbrk_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d00a      	beq.n	8009ba8 <sbrk_aligned+0x34>
 8009b92:	1cc4      	adds	r4, r0, #3
 8009b94:	f024 0403 	bic.w	r4, r4, #3
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d007      	beq.n	8009bac <sbrk_aligned+0x38>
 8009b9c:	1a21      	subs	r1, r4, r0
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 fe30 	bl	800a804 <_sbrk_r>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d101      	bne.n	8009bac <sbrk_aligned+0x38>
 8009ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	20000a68 	.word	0x20000a68

08009bb4 <_malloc_r>:
 8009bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	1ccd      	adds	r5, r1, #3
 8009bba:	f025 0503 	bic.w	r5, r5, #3
 8009bbe:	3508      	adds	r5, #8
 8009bc0:	2d0c      	cmp	r5, #12
 8009bc2:	bf38      	it	cc
 8009bc4:	250c      	movcc	r5, #12
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	4607      	mov	r7, r0
 8009bca:	db01      	blt.n	8009bd0 <_malloc_r+0x1c>
 8009bcc:	42a9      	cmp	r1, r5
 8009bce:	d905      	bls.n	8009bdc <_malloc_r+0x28>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cb0 <_malloc_r+0xfc>
 8009be0:	f000 f868 	bl	8009cb4 <__malloc_lock>
 8009be4:	f8d8 3000 	ldr.w	r3, [r8]
 8009be8:	461c      	mov	r4, r3
 8009bea:	bb5c      	cbnz	r4, 8009c44 <_malloc_r+0x90>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f7ff ffc0 	bl	8009b74 <sbrk_aligned>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	d155      	bne.n	8009ca6 <_malloc_r+0xf2>
 8009bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8009bfe:	4626      	mov	r6, r4
 8009c00:	2e00      	cmp	r6, #0
 8009c02:	d145      	bne.n	8009c90 <_malloc_r+0xdc>
 8009c04:	2c00      	cmp	r4, #0
 8009c06:	d048      	beq.n	8009c9a <_malloc_r+0xe6>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	eb04 0903 	add.w	r9, r4, r3
 8009c12:	f000 fdf7 	bl	800a804 <_sbrk_r>
 8009c16:	4581      	cmp	r9, r0
 8009c18:	d13f      	bne.n	8009c9a <_malloc_r+0xe6>
 8009c1a:	6821      	ldr	r1, [r4, #0]
 8009c1c:	1a6d      	subs	r5, r5, r1
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa7 	bl	8009b74 <sbrk_aligned>
 8009c26:	3001      	adds	r0, #1
 8009c28:	d037      	beq.n	8009c9a <_malloc_r+0xe6>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	442b      	add	r3, r5
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	f8d8 3000 	ldr.w	r3, [r8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d038      	beq.n	8009caa <_malloc_r+0xf6>
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	42a2      	cmp	r2, r4
 8009c3c:	d12b      	bne.n	8009c96 <_malloc_r+0xe2>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	605a      	str	r2, [r3, #4]
 8009c42:	e00f      	b.n	8009c64 <_malloc_r+0xb0>
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	1b52      	subs	r2, r2, r5
 8009c48:	d41f      	bmi.n	8009c8a <_malloc_r+0xd6>
 8009c4a:	2a0b      	cmp	r2, #11
 8009c4c:	d917      	bls.n	8009c7e <_malloc_r+0xca>
 8009c4e:	1961      	adds	r1, r4, r5
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	6025      	str	r5, [r4, #0]
 8009c54:	bf18      	it	ne
 8009c56:	6059      	strne	r1, [r3, #4]
 8009c58:	6863      	ldr	r3, [r4, #4]
 8009c5a:	bf08      	it	eq
 8009c5c:	f8c8 1000 	streq.w	r1, [r8]
 8009c60:	5162      	str	r2, [r4, r5]
 8009c62:	604b      	str	r3, [r1, #4]
 8009c64:	4638      	mov	r0, r7
 8009c66:	f104 060b 	add.w	r6, r4, #11
 8009c6a:	f000 f829 	bl	8009cc0 <__malloc_unlock>
 8009c6e:	f026 0607 	bic.w	r6, r6, #7
 8009c72:	1d23      	adds	r3, r4, #4
 8009c74:	1af2      	subs	r2, r6, r3
 8009c76:	d0ae      	beq.n	8009bd6 <_malloc_r+0x22>
 8009c78:	1b9b      	subs	r3, r3, r6
 8009c7a:	50a3      	str	r3, [r4, r2]
 8009c7c:	e7ab      	b.n	8009bd6 <_malloc_r+0x22>
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	6862      	ldr	r2, [r4, #4]
 8009c82:	d1dd      	bne.n	8009c40 <_malloc_r+0x8c>
 8009c84:	f8c8 2000 	str.w	r2, [r8]
 8009c88:	e7ec      	b.n	8009c64 <_malloc_r+0xb0>
 8009c8a:	4623      	mov	r3, r4
 8009c8c:	6864      	ldr	r4, [r4, #4]
 8009c8e:	e7ac      	b.n	8009bea <_malloc_r+0x36>
 8009c90:	4634      	mov	r4, r6
 8009c92:	6876      	ldr	r6, [r6, #4]
 8009c94:	e7b4      	b.n	8009c00 <_malloc_r+0x4c>
 8009c96:	4613      	mov	r3, r2
 8009c98:	e7cc      	b.n	8009c34 <_malloc_r+0x80>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f000 f80e 	bl	8009cc0 <__malloc_unlock>
 8009ca4:	e797      	b.n	8009bd6 <_malloc_r+0x22>
 8009ca6:	6025      	str	r5, [r4, #0]
 8009ca8:	e7dc      	b.n	8009c64 <_malloc_r+0xb0>
 8009caa:	605b      	str	r3, [r3, #4]
 8009cac:	deff      	udf	#255	; 0xff
 8009cae:	bf00      	nop
 8009cb0:	20000a64 	.word	0x20000a64

08009cb4 <__malloc_lock>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__malloc_lock+0x8>)
 8009cb6:	f7ff b88a 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8009cba:	bf00      	nop
 8009cbc:	20000a60 	.word	0x20000a60

08009cc0 <__malloc_unlock>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	; (8009cc8 <__malloc_unlock+0x8>)
 8009cc2:	f7ff b885 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	20000a60 	.word	0x20000a60

08009ccc <_Balloc>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	69c6      	ldr	r6, [r0, #28]
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	b976      	cbnz	r6, 8009cf4 <_Balloc+0x28>
 8009cd6:	2010      	movs	r0, #16
 8009cd8:	f7ff ff44 	bl	8009b64 <malloc>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	61e0      	str	r0, [r4, #28]
 8009ce0:	b920      	cbnz	r0, 8009cec <_Balloc+0x20>
 8009ce2:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <_Balloc+0x78>)
 8009ce4:	4818      	ldr	r0, [pc, #96]	; (8009d48 <_Balloc+0x7c>)
 8009ce6:	216b      	movs	r1, #107	; 0x6b
 8009ce8:	f000 fdaa 	bl	800a840 <__assert_func>
 8009cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cf0:	6006      	str	r6, [r0, #0]
 8009cf2:	60c6      	str	r6, [r0, #12]
 8009cf4:	69e6      	ldr	r6, [r4, #28]
 8009cf6:	68f3      	ldr	r3, [r6, #12]
 8009cf8:	b183      	cbz	r3, 8009d1c <_Balloc+0x50>
 8009cfa:	69e3      	ldr	r3, [r4, #28]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d02:	b9b8      	cbnz	r0, 8009d34 <_Balloc+0x68>
 8009d04:	2101      	movs	r1, #1
 8009d06:	fa01 f605 	lsl.w	r6, r1, r5
 8009d0a:	1d72      	adds	r2, r6, #5
 8009d0c:	0092      	lsls	r2, r2, #2
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 fdb4 	bl	800a87c <_calloc_r>
 8009d14:	b160      	cbz	r0, 8009d30 <_Balloc+0x64>
 8009d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d1a:	e00e      	b.n	8009d3a <_Balloc+0x6e>
 8009d1c:	2221      	movs	r2, #33	; 0x21
 8009d1e:	2104      	movs	r1, #4
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fdab 	bl	800a87c <_calloc_r>
 8009d26:	69e3      	ldr	r3, [r4, #28]
 8009d28:	60f0      	str	r0, [r6, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e4      	bne.n	8009cfa <_Balloc+0x2e>
 8009d30:	2000      	movs	r0, #0
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	6802      	ldr	r2, [r0, #0]
 8009d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d40:	e7f7      	b.n	8009d32 <_Balloc+0x66>
 8009d42:	bf00      	nop
 8009d44:	0800af69 	.word	0x0800af69
 8009d48:	0800afe9 	.word	0x0800afe9

08009d4c <_Bfree>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	69c6      	ldr	r6, [r0, #28]
 8009d50:	4605      	mov	r5, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	b976      	cbnz	r6, 8009d74 <_Bfree+0x28>
 8009d56:	2010      	movs	r0, #16
 8009d58:	f7ff ff04 	bl	8009b64 <malloc>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	61e8      	str	r0, [r5, #28]
 8009d60:	b920      	cbnz	r0, 8009d6c <_Bfree+0x20>
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <_Bfree+0x3c>)
 8009d64:	4809      	ldr	r0, [pc, #36]	; (8009d8c <_Bfree+0x40>)
 8009d66:	218f      	movs	r1, #143	; 0x8f
 8009d68:	f000 fd6a 	bl	800a840 <__assert_func>
 8009d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d70:	6006      	str	r6, [r0, #0]
 8009d72:	60c6      	str	r6, [r0, #12]
 8009d74:	b13c      	cbz	r4, 8009d86 <_Bfree+0x3a>
 8009d76:	69eb      	ldr	r3, [r5, #28]
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d80:	6021      	str	r1, [r4, #0]
 8009d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	0800af69 	.word	0x0800af69
 8009d8c:	0800afe9 	.word	0x0800afe9

08009d90 <__multadd>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	690d      	ldr	r5, [r1, #16]
 8009d96:	4607      	mov	r7, r0
 8009d98:	460c      	mov	r4, r1
 8009d9a:	461e      	mov	r6, r3
 8009d9c:	f101 0c14 	add.w	ip, r1, #20
 8009da0:	2000      	movs	r0, #0
 8009da2:	f8dc 3000 	ldr.w	r3, [ip]
 8009da6:	b299      	uxth	r1, r3
 8009da8:	fb02 6101 	mla	r1, r2, r1, r6
 8009dac:	0c1e      	lsrs	r6, r3, #16
 8009dae:	0c0b      	lsrs	r3, r1, #16
 8009db0:	fb02 3306 	mla	r3, r2, r6, r3
 8009db4:	b289      	uxth	r1, r1
 8009db6:	3001      	adds	r0, #1
 8009db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dbc:	4285      	cmp	r5, r0
 8009dbe:	f84c 1b04 	str.w	r1, [ip], #4
 8009dc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dc6:	dcec      	bgt.n	8009da2 <__multadd+0x12>
 8009dc8:	b30e      	cbz	r6, 8009e0e <__multadd+0x7e>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	dc19      	bgt.n	8009e04 <__multadd+0x74>
 8009dd0:	6861      	ldr	r1, [r4, #4]
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	f7ff ff79 	bl	8009ccc <_Balloc>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	b928      	cbnz	r0, 8009dea <__multadd+0x5a>
 8009dde:	4602      	mov	r2, r0
 8009de0:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <__multadd+0x84>)
 8009de2:	480d      	ldr	r0, [pc, #52]	; (8009e18 <__multadd+0x88>)
 8009de4:	21ba      	movs	r1, #186	; 0xba
 8009de6:	f000 fd2b 	bl	800a840 <__assert_func>
 8009dea:	6922      	ldr	r2, [r4, #16]
 8009dec:	3202      	adds	r2, #2
 8009dee:	f104 010c 	add.w	r1, r4, #12
 8009df2:	0092      	lsls	r2, r2, #2
 8009df4:	300c      	adds	r0, #12
 8009df6:	f000 fd15 	bl	800a824 <memcpy>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff ffa5 	bl	8009d4c <_Bfree>
 8009e02:	4644      	mov	r4, r8
 8009e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e08:	3501      	adds	r5, #1
 8009e0a:	615e      	str	r6, [r3, #20]
 8009e0c:	6125      	str	r5, [r4, #16]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	0800afd8 	.word	0x0800afd8
 8009e18:	0800afe9 	.word	0x0800afe9

08009e1c <__hi0bits>:
 8009e1c:	0c03      	lsrs	r3, r0, #16
 8009e1e:	041b      	lsls	r3, r3, #16
 8009e20:	b9d3      	cbnz	r3, 8009e58 <__hi0bits+0x3c>
 8009e22:	0400      	lsls	r0, r0, #16
 8009e24:	2310      	movs	r3, #16
 8009e26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e2a:	bf04      	itt	eq
 8009e2c:	0200      	lsleq	r0, r0, #8
 8009e2e:	3308      	addeq	r3, #8
 8009e30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e34:	bf04      	itt	eq
 8009e36:	0100      	lsleq	r0, r0, #4
 8009e38:	3304      	addeq	r3, #4
 8009e3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e3e:	bf04      	itt	eq
 8009e40:	0080      	lsleq	r0, r0, #2
 8009e42:	3302      	addeq	r3, #2
 8009e44:	2800      	cmp	r0, #0
 8009e46:	db05      	blt.n	8009e54 <__hi0bits+0x38>
 8009e48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e4c:	f103 0301 	add.w	r3, r3, #1
 8009e50:	bf08      	it	eq
 8009e52:	2320      	moveq	r3, #32
 8009e54:	4618      	mov	r0, r3
 8009e56:	4770      	bx	lr
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e7e4      	b.n	8009e26 <__hi0bits+0xa>

08009e5c <__lo0bits>:
 8009e5c:	6803      	ldr	r3, [r0, #0]
 8009e5e:	f013 0207 	ands.w	r2, r3, #7
 8009e62:	d00c      	beq.n	8009e7e <__lo0bits+0x22>
 8009e64:	07d9      	lsls	r1, r3, #31
 8009e66:	d422      	bmi.n	8009eae <__lo0bits+0x52>
 8009e68:	079a      	lsls	r2, r3, #30
 8009e6a:	bf49      	itett	mi
 8009e6c:	085b      	lsrmi	r3, r3, #1
 8009e6e:	089b      	lsrpl	r3, r3, #2
 8009e70:	6003      	strmi	r3, [r0, #0]
 8009e72:	2201      	movmi	r2, #1
 8009e74:	bf5c      	itt	pl
 8009e76:	6003      	strpl	r3, [r0, #0]
 8009e78:	2202      	movpl	r2, #2
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4770      	bx	lr
 8009e7e:	b299      	uxth	r1, r3
 8009e80:	b909      	cbnz	r1, 8009e86 <__lo0bits+0x2a>
 8009e82:	0c1b      	lsrs	r3, r3, #16
 8009e84:	2210      	movs	r2, #16
 8009e86:	b2d9      	uxtb	r1, r3
 8009e88:	b909      	cbnz	r1, 8009e8e <__lo0bits+0x32>
 8009e8a:	3208      	adds	r2, #8
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	0719      	lsls	r1, r3, #28
 8009e90:	bf04      	itt	eq
 8009e92:	091b      	lsreq	r3, r3, #4
 8009e94:	3204      	addeq	r2, #4
 8009e96:	0799      	lsls	r1, r3, #30
 8009e98:	bf04      	itt	eq
 8009e9a:	089b      	lsreq	r3, r3, #2
 8009e9c:	3202      	addeq	r2, #2
 8009e9e:	07d9      	lsls	r1, r3, #31
 8009ea0:	d403      	bmi.n	8009eaa <__lo0bits+0x4e>
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	f102 0201 	add.w	r2, r2, #1
 8009ea8:	d003      	beq.n	8009eb2 <__lo0bits+0x56>
 8009eaa:	6003      	str	r3, [r0, #0]
 8009eac:	e7e5      	b.n	8009e7a <__lo0bits+0x1e>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	e7e3      	b.n	8009e7a <__lo0bits+0x1e>
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	e7e1      	b.n	8009e7a <__lo0bits+0x1e>
	...

08009eb8 <__i2b>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	460c      	mov	r4, r1
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	f7ff ff05 	bl	8009ccc <_Balloc>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	b928      	cbnz	r0, 8009ed2 <__i2b+0x1a>
 8009ec6:	4b05      	ldr	r3, [pc, #20]	; (8009edc <__i2b+0x24>)
 8009ec8:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <__i2b+0x28>)
 8009eca:	f240 1145 	movw	r1, #325	; 0x145
 8009ece:	f000 fcb7 	bl	800a840 <__assert_func>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	6144      	str	r4, [r0, #20]
 8009ed6:	6103      	str	r3, [r0, #16]
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	bf00      	nop
 8009edc:	0800afd8 	.word	0x0800afd8
 8009ee0:	0800afe9 	.word	0x0800afe9

08009ee4 <__multiply>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	4691      	mov	r9, r2
 8009eea:	690a      	ldr	r2, [r1, #16]
 8009eec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	bfb8      	it	lt
 8009ef4:	460b      	movlt	r3, r1
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	bfbc      	itt	lt
 8009efa:	464c      	movlt	r4, r9
 8009efc:	4699      	movlt	r9, r3
 8009efe:	6927      	ldr	r7, [r4, #16]
 8009f00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f04:	68a3      	ldr	r3, [r4, #8]
 8009f06:	6861      	ldr	r1, [r4, #4]
 8009f08:	eb07 060a 	add.w	r6, r7, sl
 8009f0c:	42b3      	cmp	r3, r6
 8009f0e:	b085      	sub	sp, #20
 8009f10:	bfb8      	it	lt
 8009f12:	3101      	addlt	r1, #1
 8009f14:	f7ff feda 	bl	8009ccc <_Balloc>
 8009f18:	b930      	cbnz	r0, 8009f28 <__multiply+0x44>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	4b44      	ldr	r3, [pc, #272]	; (800a030 <__multiply+0x14c>)
 8009f1e:	4845      	ldr	r0, [pc, #276]	; (800a034 <__multiply+0x150>)
 8009f20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009f24:	f000 fc8c 	bl	800a840 <__assert_func>
 8009f28:	f100 0514 	add.w	r5, r0, #20
 8009f2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f30:	462b      	mov	r3, r5
 8009f32:	2200      	movs	r2, #0
 8009f34:	4543      	cmp	r3, r8
 8009f36:	d321      	bcc.n	8009f7c <__multiply+0x98>
 8009f38:	f104 0314 	add.w	r3, r4, #20
 8009f3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f40:	f109 0314 	add.w	r3, r9, #20
 8009f44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f48:	9202      	str	r2, [sp, #8]
 8009f4a:	1b3a      	subs	r2, r7, r4
 8009f4c:	3a15      	subs	r2, #21
 8009f4e:	f022 0203 	bic.w	r2, r2, #3
 8009f52:	3204      	adds	r2, #4
 8009f54:	f104 0115 	add.w	r1, r4, #21
 8009f58:	428f      	cmp	r7, r1
 8009f5a:	bf38      	it	cc
 8009f5c:	2204      	movcc	r2, #4
 8009f5e:	9201      	str	r2, [sp, #4]
 8009f60:	9a02      	ldr	r2, [sp, #8]
 8009f62:	9303      	str	r3, [sp, #12]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d80c      	bhi.n	8009f82 <__multiply+0x9e>
 8009f68:	2e00      	cmp	r6, #0
 8009f6a:	dd03      	ble.n	8009f74 <__multiply+0x90>
 8009f6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d05b      	beq.n	800a02c <__multiply+0x148>
 8009f74:	6106      	str	r6, [r0, #16]
 8009f76:	b005      	add	sp, #20
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	f843 2b04 	str.w	r2, [r3], #4
 8009f80:	e7d8      	b.n	8009f34 <__multiply+0x50>
 8009f82:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f86:	f1ba 0f00 	cmp.w	sl, #0
 8009f8a:	d024      	beq.n	8009fd6 <__multiply+0xf2>
 8009f8c:	f104 0e14 	add.w	lr, r4, #20
 8009f90:	46a9      	mov	r9, r5
 8009f92:	f04f 0c00 	mov.w	ip, #0
 8009f96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f9a:	f8d9 1000 	ldr.w	r1, [r9]
 8009f9e:	fa1f fb82 	uxth.w	fp, r2
 8009fa2:	b289      	uxth	r1, r1
 8009fa4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fac:	f8d9 2000 	ldr.w	r2, [r9]
 8009fb0:	4461      	add	r1, ip
 8009fb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fbe:	b289      	uxth	r1, r1
 8009fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fc4:	4577      	cmp	r7, lr
 8009fc6:	f849 1b04 	str.w	r1, [r9], #4
 8009fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fce:	d8e2      	bhi.n	8009f96 <__multiply+0xb2>
 8009fd0:	9a01      	ldr	r2, [sp, #4]
 8009fd2:	f845 c002 	str.w	ip, [r5, r2]
 8009fd6:	9a03      	ldr	r2, [sp, #12]
 8009fd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	f1b9 0f00 	cmp.w	r9, #0
 8009fe2:	d021      	beq.n	800a028 <__multiply+0x144>
 8009fe4:	6829      	ldr	r1, [r5, #0]
 8009fe6:	f104 0c14 	add.w	ip, r4, #20
 8009fea:	46ae      	mov	lr, r5
 8009fec:	f04f 0a00 	mov.w	sl, #0
 8009ff0:	f8bc b000 	ldrh.w	fp, [ip]
 8009ff4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ff8:	fb09 220b 	mla	r2, r9, fp, r2
 8009ffc:	4452      	add	r2, sl
 8009ffe:	b289      	uxth	r1, r1
 800a000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a004:	f84e 1b04 	str.w	r1, [lr], #4
 800a008:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a00c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a010:	f8be 1000 	ldrh.w	r1, [lr]
 800a014:	fb09 110a 	mla	r1, r9, sl, r1
 800a018:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a01c:	4567      	cmp	r7, ip
 800a01e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a022:	d8e5      	bhi.n	8009ff0 <__multiply+0x10c>
 800a024:	9a01      	ldr	r2, [sp, #4]
 800a026:	50a9      	str	r1, [r5, r2]
 800a028:	3504      	adds	r5, #4
 800a02a:	e799      	b.n	8009f60 <__multiply+0x7c>
 800a02c:	3e01      	subs	r6, #1
 800a02e:	e79b      	b.n	8009f68 <__multiply+0x84>
 800a030:	0800afd8 	.word	0x0800afd8
 800a034:	0800afe9 	.word	0x0800afe9

0800a038 <__pow5mult>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	4615      	mov	r5, r2
 800a03e:	f012 0203 	ands.w	r2, r2, #3
 800a042:	4606      	mov	r6, r0
 800a044:	460f      	mov	r7, r1
 800a046:	d007      	beq.n	800a058 <__pow5mult+0x20>
 800a048:	4c25      	ldr	r4, [pc, #148]	; (800a0e0 <__pow5mult+0xa8>)
 800a04a:	3a01      	subs	r2, #1
 800a04c:	2300      	movs	r3, #0
 800a04e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a052:	f7ff fe9d 	bl	8009d90 <__multadd>
 800a056:	4607      	mov	r7, r0
 800a058:	10ad      	asrs	r5, r5, #2
 800a05a:	d03d      	beq.n	800a0d8 <__pow5mult+0xa0>
 800a05c:	69f4      	ldr	r4, [r6, #28]
 800a05e:	b97c      	cbnz	r4, 800a080 <__pow5mult+0x48>
 800a060:	2010      	movs	r0, #16
 800a062:	f7ff fd7f 	bl	8009b64 <malloc>
 800a066:	4602      	mov	r2, r0
 800a068:	61f0      	str	r0, [r6, #28]
 800a06a:	b928      	cbnz	r0, 800a078 <__pow5mult+0x40>
 800a06c:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <__pow5mult+0xac>)
 800a06e:	481e      	ldr	r0, [pc, #120]	; (800a0e8 <__pow5mult+0xb0>)
 800a070:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a074:	f000 fbe4 	bl	800a840 <__assert_func>
 800a078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a07c:	6004      	str	r4, [r0, #0]
 800a07e:	60c4      	str	r4, [r0, #12]
 800a080:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a088:	b94c      	cbnz	r4, 800a09e <__pow5mult+0x66>
 800a08a:	f240 2171 	movw	r1, #625	; 0x271
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff12 	bl	8009eb8 <__i2b>
 800a094:	2300      	movs	r3, #0
 800a096:	f8c8 0008 	str.w	r0, [r8, #8]
 800a09a:	4604      	mov	r4, r0
 800a09c:	6003      	str	r3, [r0, #0]
 800a09e:	f04f 0900 	mov.w	r9, #0
 800a0a2:	07eb      	lsls	r3, r5, #31
 800a0a4:	d50a      	bpl.n	800a0bc <__pow5mult+0x84>
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ff1a 	bl	8009ee4 <__multiply>
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f7ff fe49 	bl	8009d4c <_Bfree>
 800a0ba:	4647      	mov	r7, r8
 800a0bc:	106d      	asrs	r5, r5, #1
 800a0be:	d00b      	beq.n	800a0d8 <__pow5mult+0xa0>
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	b938      	cbnz	r0, 800a0d4 <__pow5mult+0x9c>
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7ff ff0b 	bl	8009ee4 <__multiply>
 800a0ce:	6020      	str	r0, [r4, #0]
 800a0d0:	f8c0 9000 	str.w	r9, [r0]
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	e7e4      	b.n	800a0a2 <__pow5mult+0x6a>
 800a0d8:	4638      	mov	r0, r7
 800a0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0de:	bf00      	nop
 800a0e0:	0800b138 	.word	0x0800b138
 800a0e4:	0800af69 	.word	0x0800af69
 800a0e8:	0800afe9 	.word	0x0800afe9

0800a0ec <__lshift>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	6849      	ldr	r1, [r1, #4]
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0fa:	68a3      	ldr	r3, [r4, #8]
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	4691      	mov	r9, r2
 800a100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a104:	f108 0601 	add.w	r6, r8, #1
 800a108:	42b3      	cmp	r3, r6
 800a10a:	db0b      	blt.n	800a124 <__lshift+0x38>
 800a10c:	4638      	mov	r0, r7
 800a10e:	f7ff fddd 	bl	8009ccc <_Balloc>
 800a112:	4605      	mov	r5, r0
 800a114:	b948      	cbnz	r0, 800a12a <__lshift+0x3e>
 800a116:	4602      	mov	r2, r0
 800a118:	4b28      	ldr	r3, [pc, #160]	; (800a1bc <__lshift+0xd0>)
 800a11a:	4829      	ldr	r0, [pc, #164]	; (800a1c0 <__lshift+0xd4>)
 800a11c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a120:	f000 fb8e 	bl	800a840 <__assert_func>
 800a124:	3101      	adds	r1, #1
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	e7ee      	b.n	800a108 <__lshift+0x1c>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f100 0114 	add.w	r1, r0, #20
 800a130:	f100 0210 	add.w	r2, r0, #16
 800a134:	4618      	mov	r0, r3
 800a136:	4553      	cmp	r3, sl
 800a138:	db33      	blt.n	800a1a2 <__lshift+0xb6>
 800a13a:	6920      	ldr	r0, [r4, #16]
 800a13c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a140:	f104 0314 	add.w	r3, r4, #20
 800a144:	f019 091f 	ands.w	r9, r9, #31
 800a148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a14c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a150:	d02b      	beq.n	800a1aa <__lshift+0xbe>
 800a152:	f1c9 0e20 	rsb	lr, r9, #32
 800a156:	468a      	mov	sl, r1
 800a158:	2200      	movs	r2, #0
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	fa00 f009 	lsl.w	r0, r0, r9
 800a160:	4310      	orrs	r0, r2
 800a162:	f84a 0b04 	str.w	r0, [sl], #4
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	459c      	cmp	ip, r3
 800a16c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a170:	d8f3      	bhi.n	800a15a <__lshift+0x6e>
 800a172:	ebac 0304 	sub.w	r3, ip, r4
 800a176:	3b15      	subs	r3, #21
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	3304      	adds	r3, #4
 800a17e:	f104 0015 	add.w	r0, r4, #21
 800a182:	4584      	cmp	ip, r0
 800a184:	bf38      	it	cc
 800a186:	2304      	movcc	r3, #4
 800a188:	50ca      	str	r2, [r1, r3]
 800a18a:	b10a      	cbz	r2, 800a190 <__lshift+0xa4>
 800a18c:	f108 0602 	add.w	r6, r8, #2
 800a190:	3e01      	subs	r6, #1
 800a192:	4638      	mov	r0, r7
 800a194:	612e      	str	r6, [r5, #16]
 800a196:	4621      	mov	r1, r4
 800a198:	f7ff fdd8 	bl	8009d4c <_Bfree>
 800a19c:	4628      	mov	r0, r5
 800a19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	e7c5      	b.n	800a136 <__lshift+0x4a>
 800a1aa:	3904      	subs	r1, #4
 800a1ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1b4:	459c      	cmp	ip, r3
 800a1b6:	d8f9      	bhi.n	800a1ac <__lshift+0xc0>
 800a1b8:	e7ea      	b.n	800a190 <__lshift+0xa4>
 800a1ba:	bf00      	nop
 800a1bc:	0800afd8 	.word	0x0800afd8
 800a1c0:	0800afe9 	.word	0x0800afe9

0800a1c4 <__mcmp>:
 800a1c4:	b530      	push	{r4, r5, lr}
 800a1c6:	6902      	ldr	r2, [r0, #16]
 800a1c8:	690c      	ldr	r4, [r1, #16]
 800a1ca:	1b12      	subs	r2, r2, r4
 800a1cc:	d10e      	bne.n	800a1ec <__mcmp+0x28>
 800a1ce:	f100 0314 	add.w	r3, r0, #20
 800a1d2:	3114      	adds	r1, #20
 800a1d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1e4:	42a5      	cmp	r5, r4
 800a1e6:	d003      	beq.n	800a1f0 <__mcmp+0x2c>
 800a1e8:	d305      	bcc.n	800a1f6 <__mcmp+0x32>
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	bd30      	pop	{r4, r5, pc}
 800a1f0:	4283      	cmp	r3, r0
 800a1f2:	d3f3      	bcc.n	800a1dc <__mcmp+0x18>
 800a1f4:	e7fa      	b.n	800a1ec <__mcmp+0x28>
 800a1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fa:	e7f7      	b.n	800a1ec <__mcmp+0x28>

0800a1fc <__mdiff>:
 800a1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	460c      	mov	r4, r1
 800a202:	4606      	mov	r6, r0
 800a204:	4611      	mov	r1, r2
 800a206:	4620      	mov	r0, r4
 800a208:	4690      	mov	r8, r2
 800a20a:	f7ff ffdb 	bl	800a1c4 <__mcmp>
 800a20e:	1e05      	subs	r5, r0, #0
 800a210:	d110      	bne.n	800a234 <__mdiff+0x38>
 800a212:	4629      	mov	r1, r5
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff fd59 	bl	8009ccc <_Balloc>
 800a21a:	b930      	cbnz	r0, 800a22a <__mdiff+0x2e>
 800a21c:	4b3a      	ldr	r3, [pc, #232]	; (800a308 <__mdiff+0x10c>)
 800a21e:	4602      	mov	r2, r0
 800a220:	f240 2137 	movw	r1, #567	; 0x237
 800a224:	4839      	ldr	r0, [pc, #228]	; (800a30c <__mdiff+0x110>)
 800a226:	f000 fb0b 	bl	800a840 <__assert_func>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	bfa4      	itt	ge
 800a236:	4643      	movge	r3, r8
 800a238:	46a0      	movge	r8, r4
 800a23a:	4630      	mov	r0, r6
 800a23c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a240:	bfa6      	itte	ge
 800a242:	461c      	movge	r4, r3
 800a244:	2500      	movge	r5, #0
 800a246:	2501      	movlt	r5, #1
 800a248:	f7ff fd40 	bl	8009ccc <_Balloc>
 800a24c:	b920      	cbnz	r0, 800a258 <__mdiff+0x5c>
 800a24e:	4b2e      	ldr	r3, [pc, #184]	; (800a308 <__mdiff+0x10c>)
 800a250:	4602      	mov	r2, r0
 800a252:	f240 2145 	movw	r1, #581	; 0x245
 800a256:	e7e5      	b.n	800a224 <__mdiff+0x28>
 800a258:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a25c:	6926      	ldr	r6, [r4, #16]
 800a25e:	60c5      	str	r5, [r0, #12]
 800a260:	f104 0914 	add.w	r9, r4, #20
 800a264:	f108 0514 	add.w	r5, r8, #20
 800a268:	f100 0e14 	add.w	lr, r0, #20
 800a26c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a270:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a274:	f108 0210 	add.w	r2, r8, #16
 800a278:	46f2      	mov	sl, lr
 800a27a:	2100      	movs	r1, #0
 800a27c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a280:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a284:	fa11 f88b 	uxtah	r8, r1, fp
 800a288:	b299      	uxth	r1, r3
 800a28a:	0c1b      	lsrs	r3, r3, #16
 800a28c:	eba8 0801 	sub.w	r8, r8, r1
 800a290:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a294:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a298:	fa1f f888 	uxth.w	r8, r8
 800a29c:	1419      	asrs	r1, r3, #16
 800a29e:	454e      	cmp	r6, r9
 800a2a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a2a8:	d8e8      	bhi.n	800a27c <__mdiff+0x80>
 800a2aa:	1b33      	subs	r3, r6, r4
 800a2ac:	3b15      	subs	r3, #21
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	3415      	adds	r4, #21
 800a2b6:	42a6      	cmp	r6, r4
 800a2b8:	bf38      	it	cc
 800a2ba:	2304      	movcc	r3, #4
 800a2bc:	441d      	add	r5, r3
 800a2be:	4473      	add	r3, lr
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	462e      	mov	r6, r5
 800a2c4:	4566      	cmp	r6, ip
 800a2c6:	d30e      	bcc.n	800a2e6 <__mdiff+0xea>
 800a2c8:	f10c 0203 	add.w	r2, ip, #3
 800a2cc:	1b52      	subs	r2, r2, r5
 800a2ce:	f022 0203 	bic.w	r2, r2, #3
 800a2d2:	3d03      	subs	r5, #3
 800a2d4:	45ac      	cmp	ip, r5
 800a2d6:	bf38      	it	cc
 800a2d8:	2200      	movcc	r2, #0
 800a2da:	4413      	add	r3, r2
 800a2dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a2e0:	b17a      	cbz	r2, 800a302 <__mdiff+0x106>
 800a2e2:	6107      	str	r7, [r0, #16]
 800a2e4:	e7a4      	b.n	800a230 <__mdiff+0x34>
 800a2e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2ea:	fa11 f288 	uxtah	r2, r1, r8
 800a2ee:	1414      	asrs	r4, r2, #16
 800a2f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2f4:	b292      	uxth	r2, r2
 800a2f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a2fe:	1421      	asrs	r1, r4, #16
 800a300:	e7e0      	b.n	800a2c4 <__mdiff+0xc8>
 800a302:	3f01      	subs	r7, #1
 800a304:	e7ea      	b.n	800a2dc <__mdiff+0xe0>
 800a306:	bf00      	nop
 800a308:	0800afd8 	.word	0x0800afd8
 800a30c:	0800afe9 	.word	0x0800afe9

0800a310 <__d2b>:
 800a310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a314:	460f      	mov	r7, r1
 800a316:	2101      	movs	r1, #1
 800a318:	ec59 8b10 	vmov	r8, r9, d0
 800a31c:	4616      	mov	r6, r2
 800a31e:	f7ff fcd5 	bl	8009ccc <_Balloc>
 800a322:	4604      	mov	r4, r0
 800a324:	b930      	cbnz	r0, 800a334 <__d2b+0x24>
 800a326:	4602      	mov	r2, r0
 800a328:	4b24      	ldr	r3, [pc, #144]	; (800a3bc <__d2b+0xac>)
 800a32a:	4825      	ldr	r0, [pc, #148]	; (800a3c0 <__d2b+0xb0>)
 800a32c:	f240 310f 	movw	r1, #783	; 0x30f
 800a330:	f000 fa86 	bl	800a840 <__assert_func>
 800a334:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a33c:	bb2d      	cbnz	r5, 800a38a <__d2b+0x7a>
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	f1b8 0300 	subs.w	r3, r8, #0
 800a344:	d026      	beq.n	800a394 <__d2b+0x84>
 800a346:	4668      	mov	r0, sp
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	f7ff fd87 	bl	8009e5c <__lo0bits>
 800a34e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a352:	b1e8      	cbz	r0, 800a390 <__d2b+0x80>
 800a354:	f1c0 0320 	rsb	r3, r0, #32
 800a358:	fa02 f303 	lsl.w	r3, r2, r3
 800a35c:	430b      	orrs	r3, r1
 800a35e:	40c2      	lsrs	r2, r0
 800a360:	6163      	str	r3, [r4, #20]
 800a362:	9201      	str	r2, [sp, #4]
 800a364:	9b01      	ldr	r3, [sp, #4]
 800a366:	61a3      	str	r3, [r4, #24]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf14      	ite	ne
 800a36c:	2202      	movne	r2, #2
 800a36e:	2201      	moveq	r2, #1
 800a370:	6122      	str	r2, [r4, #16]
 800a372:	b1bd      	cbz	r5, 800a3a4 <__d2b+0x94>
 800a374:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a378:	4405      	add	r5, r0
 800a37a:	603d      	str	r5, [r7, #0]
 800a37c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a380:	6030      	str	r0, [r6, #0]
 800a382:	4620      	mov	r0, r4
 800a384:	b003      	add	sp, #12
 800a386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a38a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a38e:	e7d6      	b.n	800a33e <__d2b+0x2e>
 800a390:	6161      	str	r1, [r4, #20]
 800a392:	e7e7      	b.n	800a364 <__d2b+0x54>
 800a394:	a801      	add	r0, sp, #4
 800a396:	f7ff fd61 	bl	8009e5c <__lo0bits>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	6163      	str	r3, [r4, #20]
 800a39e:	3020      	adds	r0, #32
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	e7e5      	b.n	800a370 <__d2b+0x60>
 800a3a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3ac:	6038      	str	r0, [r7, #0]
 800a3ae:	6918      	ldr	r0, [r3, #16]
 800a3b0:	f7ff fd34 	bl	8009e1c <__hi0bits>
 800a3b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3b8:	e7e2      	b.n	800a380 <__d2b+0x70>
 800a3ba:	bf00      	nop
 800a3bc:	0800afd8 	.word	0x0800afd8
 800a3c0:	0800afe9 	.word	0x0800afe9

0800a3c4 <__ssputs_r>:
 800a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c8:	688e      	ldr	r6, [r1, #8]
 800a3ca:	461f      	mov	r7, r3
 800a3cc:	42be      	cmp	r6, r7
 800a3ce:	680b      	ldr	r3, [r1, #0]
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	4690      	mov	r8, r2
 800a3d6:	d82c      	bhi.n	800a432 <__ssputs_r+0x6e>
 800a3d8:	898a      	ldrh	r2, [r1, #12]
 800a3da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3de:	d026      	beq.n	800a42e <__ssputs_r+0x6a>
 800a3e0:	6965      	ldr	r5, [r4, #20]
 800a3e2:	6909      	ldr	r1, [r1, #16]
 800a3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3e8:	eba3 0901 	sub.w	r9, r3, r1
 800a3ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3f0:	1c7b      	adds	r3, r7, #1
 800a3f2:	444b      	add	r3, r9
 800a3f4:	106d      	asrs	r5, r5, #1
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	bf38      	it	cc
 800a3fa:	461d      	movcc	r5, r3
 800a3fc:	0553      	lsls	r3, r2, #21
 800a3fe:	d527      	bpl.n	800a450 <__ssputs_r+0x8c>
 800a400:	4629      	mov	r1, r5
 800a402:	f7ff fbd7 	bl	8009bb4 <_malloc_r>
 800a406:	4606      	mov	r6, r0
 800a408:	b360      	cbz	r0, 800a464 <__ssputs_r+0xa0>
 800a40a:	6921      	ldr	r1, [r4, #16]
 800a40c:	464a      	mov	r2, r9
 800a40e:	f000 fa09 	bl	800a824 <memcpy>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	6126      	str	r6, [r4, #16]
 800a420:	6165      	str	r5, [r4, #20]
 800a422:	444e      	add	r6, r9
 800a424:	eba5 0509 	sub.w	r5, r5, r9
 800a428:	6026      	str	r6, [r4, #0]
 800a42a:	60a5      	str	r5, [r4, #8]
 800a42c:	463e      	mov	r6, r7
 800a42e:	42be      	cmp	r6, r7
 800a430:	d900      	bls.n	800a434 <__ssputs_r+0x70>
 800a432:	463e      	mov	r6, r7
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	4632      	mov	r2, r6
 800a438:	4641      	mov	r1, r8
 800a43a:	f000 f9c9 	bl	800a7d0 <memmove>
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	1b9b      	subs	r3, r3, r6
 800a442:	60a3      	str	r3, [r4, #8]
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	4433      	add	r3, r6
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	2000      	movs	r0, #0
 800a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a450:	462a      	mov	r2, r5
 800a452:	f000 fa3b 	bl	800a8cc <_realloc_r>
 800a456:	4606      	mov	r6, r0
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1e0      	bne.n	800a41e <__ssputs_r+0x5a>
 800a45c:	6921      	ldr	r1, [r4, #16]
 800a45e:	4650      	mov	r0, sl
 800a460:	f7ff fb34 	bl	8009acc <_free_r>
 800a464:	230c      	movs	r3, #12
 800a466:	f8ca 3000 	str.w	r3, [sl]
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	f04f 30ff 	mov.w	r0, #4294967295
 800a476:	e7e9      	b.n	800a44c <__ssputs_r+0x88>

0800a478 <_svfiprintf_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4698      	mov	r8, r3
 800a47e:	898b      	ldrh	r3, [r1, #12]
 800a480:	061b      	lsls	r3, r3, #24
 800a482:	b09d      	sub	sp, #116	; 0x74
 800a484:	4607      	mov	r7, r0
 800a486:	460d      	mov	r5, r1
 800a488:	4614      	mov	r4, r2
 800a48a:	d50e      	bpl.n	800a4aa <_svfiprintf_r+0x32>
 800a48c:	690b      	ldr	r3, [r1, #16]
 800a48e:	b963      	cbnz	r3, 800a4aa <_svfiprintf_r+0x32>
 800a490:	2140      	movs	r1, #64	; 0x40
 800a492:	f7ff fb8f 	bl	8009bb4 <_malloc_r>
 800a496:	6028      	str	r0, [r5, #0]
 800a498:	6128      	str	r0, [r5, #16]
 800a49a:	b920      	cbnz	r0, 800a4a6 <_svfiprintf_r+0x2e>
 800a49c:	230c      	movs	r3, #12
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e0d0      	b.n	800a648 <_svfiprintf_r+0x1d0>
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	616b      	str	r3, [r5, #20]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	2320      	movs	r3, #32
 800a4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b8:	2330      	movs	r3, #48	; 0x30
 800a4ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a660 <_svfiprintf_r+0x1e8>
 800a4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4c2:	f04f 0901 	mov.w	r9, #1
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	469a      	mov	sl, r3
 800a4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ce:	b10a      	cbz	r2, 800a4d4 <_svfiprintf_r+0x5c>
 800a4d0:	2a25      	cmp	r2, #37	; 0x25
 800a4d2:	d1f9      	bne.n	800a4c8 <_svfiprintf_r+0x50>
 800a4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4d8:	d00b      	beq.n	800a4f2 <_svfiprintf_r+0x7a>
 800a4da:	465b      	mov	r3, fp
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff ff6f 	bl	800a3c4 <__ssputs_r>
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f000 80a9 	beq.w	800a63e <_svfiprintf_r+0x1c6>
 800a4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ee:	445a      	add	r2, fp
 800a4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 80a1 	beq.w	800a63e <_svfiprintf_r+0x1c6>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a506:	f10a 0a01 	add.w	sl, sl, #1
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	9307      	str	r3, [sp, #28]
 800a50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a512:	931a      	str	r3, [sp, #104]	; 0x68
 800a514:	4654      	mov	r4, sl
 800a516:	2205      	movs	r2, #5
 800a518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51c:	4850      	ldr	r0, [pc, #320]	; (800a660 <_svfiprintf_r+0x1e8>)
 800a51e:	f7f5 fe77 	bl	8000210 <memchr>
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	b9d8      	cbnz	r0, 800a55e <_svfiprintf_r+0xe6>
 800a526:	06d0      	lsls	r0, r2, #27
 800a528:	bf44      	itt	mi
 800a52a:	2320      	movmi	r3, #32
 800a52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a530:	0711      	lsls	r1, r2, #28
 800a532:	bf44      	itt	mi
 800a534:	232b      	movmi	r3, #43	; 0x2b
 800a536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a53a:	f89a 3000 	ldrb.w	r3, [sl]
 800a53e:	2b2a      	cmp	r3, #42	; 0x2a
 800a540:	d015      	beq.n	800a56e <_svfiprintf_r+0xf6>
 800a542:	9a07      	ldr	r2, [sp, #28]
 800a544:	4654      	mov	r4, sl
 800a546:	2000      	movs	r0, #0
 800a548:	f04f 0c0a 	mov.w	ip, #10
 800a54c:	4621      	mov	r1, r4
 800a54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a552:	3b30      	subs	r3, #48	; 0x30
 800a554:	2b09      	cmp	r3, #9
 800a556:	d94d      	bls.n	800a5f4 <_svfiprintf_r+0x17c>
 800a558:	b1b0      	cbz	r0, 800a588 <_svfiprintf_r+0x110>
 800a55a:	9207      	str	r2, [sp, #28]
 800a55c:	e014      	b.n	800a588 <_svfiprintf_r+0x110>
 800a55e:	eba0 0308 	sub.w	r3, r0, r8
 800a562:	fa09 f303 	lsl.w	r3, r9, r3
 800a566:	4313      	orrs	r3, r2
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	46a2      	mov	sl, r4
 800a56c:	e7d2      	b.n	800a514 <_svfiprintf_r+0x9c>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	1d19      	adds	r1, r3, #4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	9103      	str	r1, [sp, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	bfbb      	ittet	lt
 800a57a:	425b      	neglt	r3, r3
 800a57c:	f042 0202 	orrlt.w	r2, r2, #2
 800a580:	9307      	strge	r3, [sp, #28]
 800a582:	9307      	strlt	r3, [sp, #28]
 800a584:	bfb8      	it	lt
 800a586:	9204      	strlt	r2, [sp, #16]
 800a588:	7823      	ldrb	r3, [r4, #0]
 800a58a:	2b2e      	cmp	r3, #46	; 0x2e
 800a58c:	d10c      	bne.n	800a5a8 <_svfiprintf_r+0x130>
 800a58e:	7863      	ldrb	r3, [r4, #1]
 800a590:	2b2a      	cmp	r3, #42	; 0x2a
 800a592:	d134      	bne.n	800a5fe <_svfiprintf_r+0x186>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	1d1a      	adds	r2, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	9203      	str	r2, [sp, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bfb8      	it	lt
 800a5a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5a4:	3402      	adds	r4, #2
 800a5a6:	9305      	str	r3, [sp, #20]
 800a5a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a670 <_svfiprintf_r+0x1f8>
 800a5ac:	7821      	ldrb	r1, [r4, #0]
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	f7f5 fe2d 	bl	8000210 <memchr>
 800a5b6:	b138      	cbz	r0, 800a5c8 <_svfiprintf_r+0x150>
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	eba0 000a 	sub.w	r0, r0, sl
 800a5be:	2240      	movs	r2, #64	; 0x40
 800a5c0:	4082      	lsls	r2, r0
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	3401      	adds	r4, #1
 800a5c6:	9304      	str	r3, [sp, #16]
 800a5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5cc:	4825      	ldr	r0, [pc, #148]	; (800a664 <_svfiprintf_r+0x1ec>)
 800a5ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5d2:	2206      	movs	r2, #6
 800a5d4:	f7f5 fe1c 	bl	8000210 <memchr>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d038      	beq.n	800a64e <_svfiprintf_r+0x1d6>
 800a5dc:	4b22      	ldr	r3, [pc, #136]	; (800a668 <_svfiprintf_r+0x1f0>)
 800a5de:	bb1b      	cbnz	r3, 800a628 <_svfiprintf_r+0x1b0>
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	3307      	adds	r3, #7
 800a5e4:	f023 0307 	bic.w	r3, r3, #7
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	9303      	str	r3, [sp, #12]
 800a5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ee:	4433      	add	r3, r6
 800a5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f2:	e768      	b.n	800a4c6 <_svfiprintf_r+0x4e>
 800a5f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	e7a6      	b.n	800a54c <_svfiprintf_r+0xd4>
 800a5fe:	2300      	movs	r3, #0
 800a600:	3401      	adds	r4, #1
 800a602:	9305      	str	r3, [sp, #20]
 800a604:	4619      	mov	r1, r3
 800a606:	f04f 0c0a 	mov.w	ip, #10
 800a60a:	4620      	mov	r0, r4
 800a60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a610:	3a30      	subs	r2, #48	; 0x30
 800a612:	2a09      	cmp	r2, #9
 800a614:	d903      	bls.n	800a61e <_svfiprintf_r+0x1a6>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0c6      	beq.n	800a5a8 <_svfiprintf_r+0x130>
 800a61a:	9105      	str	r1, [sp, #20]
 800a61c:	e7c4      	b.n	800a5a8 <_svfiprintf_r+0x130>
 800a61e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a622:	4604      	mov	r4, r0
 800a624:	2301      	movs	r3, #1
 800a626:	e7f0      	b.n	800a60a <_svfiprintf_r+0x192>
 800a628:	ab03      	add	r3, sp, #12
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	462a      	mov	r2, r5
 800a62e:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <_svfiprintf_r+0x1f4>)
 800a630:	a904      	add	r1, sp, #16
 800a632:	4638      	mov	r0, r7
 800a634:	f7fd fe62 	bl	80082fc <_printf_float>
 800a638:	1c42      	adds	r2, r0, #1
 800a63a:	4606      	mov	r6, r0
 800a63c:	d1d6      	bne.n	800a5ec <_svfiprintf_r+0x174>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	065b      	lsls	r3, r3, #25
 800a642:	f53f af2d 	bmi.w	800a4a0 <_svfiprintf_r+0x28>
 800a646:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a648:	b01d      	add	sp, #116	; 0x74
 800a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	462a      	mov	r2, r5
 800a654:	4b05      	ldr	r3, [pc, #20]	; (800a66c <_svfiprintf_r+0x1f4>)
 800a656:	a904      	add	r1, sp, #16
 800a658:	4638      	mov	r0, r7
 800a65a:	f7fe f8f3 	bl	8008844 <_printf_i>
 800a65e:	e7eb      	b.n	800a638 <_svfiprintf_r+0x1c0>
 800a660:	0800b144 	.word	0x0800b144
 800a664:	0800b14e 	.word	0x0800b14e
 800a668:	080082fd 	.word	0x080082fd
 800a66c:	0800a3c5 	.word	0x0800a3c5
 800a670:	0800b14a 	.word	0x0800b14a

0800a674 <__sflush_r>:
 800a674:	898a      	ldrh	r2, [r1, #12]
 800a676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67a:	4605      	mov	r5, r0
 800a67c:	0710      	lsls	r0, r2, #28
 800a67e:	460c      	mov	r4, r1
 800a680:	d458      	bmi.n	800a734 <__sflush_r+0xc0>
 800a682:	684b      	ldr	r3, [r1, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	dc05      	bgt.n	800a694 <__sflush_r+0x20>
 800a688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dc02      	bgt.n	800a694 <__sflush_r+0x20>
 800a68e:	2000      	movs	r0, #0
 800a690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a696:	2e00      	cmp	r6, #0
 800a698:	d0f9      	beq.n	800a68e <__sflush_r+0x1a>
 800a69a:	2300      	movs	r3, #0
 800a69c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6a0:	682f      	ldr	r7, [r5, #0]
 800a6a2:	6a21      	ldr	r1, [r4, #32]
 800a6a4:	602b      	str	r3, [r5, #0]
 800a6a6:	d032      	beq.n	800a70e <__sflush_r+0x9a>
 800a6a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	075a      	lsls	r2, r3, #29
 800a6ae:	d505      	bpl.n	800a6bc <__sflush_r+0x48>
 800a6b0:	6863      	ldr	r3, [r4, #4]
 800a6b2:	1ac0      	subs	r0, r0, r3
 800a6b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6b6:	b10b      	cbz	r3, 800a6bc <__sflush_r+0x48>
 800a6b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ba:	1ac0      	subs	r0, r0, r3
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6c2:	6a21      	ldr	r1, [r4, #32]
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b0      	blx	r6
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	d106      	bne.n	800a6dc <__sflush_r+0x68>
 800a6ce:	6829      	ldr	r1, [r5, #0]
 800a6d0:	291d      	cmp	r1, #29
 800a6d2:	d82b      	bhi.n	800a72c <__sflush_r+0xb8>
 800a6d4:	4a29      	ldr	r2, [pc, #164]	; (800a77c <__sflush_r+0x108>)
 800a6d6:	410a      	asrs	r2, r1
 800a6d8:	07d6      	lsls	r6, r2, #31
 800a6da:	d427      	bmi.n	800a72c <__sflush_r+0xb8>
 800a6dc:	2200      	movs	r2, #0
 800a6de:	6062      	str	r2, [r4, #4]
 800a6e0:	04d9      	lsls	r1, r3, #19
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	d504      	bpl.n	800a6f2 <__sflush_r+0x7e>
 800a6e8:	1c42      	adds	r2, r0, #1
 800a6ea:	d101      	bne.n	800a6f0 <__sflush_r+0x7c>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b903      	cbnz	r3, 800a6f2 <__sflush_r+0x7e>
 800a6f0:	6560      	str	r0, [r4, #84]	; 0x54
 800a6f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6f4:	602f      	str	r7, [r5, #0]
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d0c9      	beq.n	800a68e <__sflush_r+0x1a>
 800a6fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6fe:	4299      	cmp	r1, r3
 800a700:	d002      	beq.n	800a708 <__sflush_r+0x94>
 800a702:	4628      	mov	r0, r5
 800a704:	f7ff f9e2 	bl	8009acc <_free_r>
 800a708:	2000      	movs	r0, #0
 800a70a:	6360      	str	r0, [r4, #52]	; 0x34
 800a70c:	e7c0      	b.n	800a690 <__sflush_r+0x1c>
 800a70e:	2301      	movs	r3, #1
 800a710:	4628      	mov	r0, r5
 800a712:	47b0      	blx	r6
 800a714:	1c41      	adds	r1, r0, #1
 800a716:	d1c8      	bne.n	800a6aa <__sflush_r+0x36>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0c5      	beq.n	800a6aa <__sflush_r+0x36>
 800a71e:	2b1d      	cmp	r3, #29
 800a720:	d001      	beq.n	800a726 <__sflush_r+0xb2>
 800a722:	2b16      	cmp	r3, #22
 800a724:	d101      	bne.n	800a72a <__sflush_r+0xb6>
 800a726:	602f      	str	r7, [r5, #0]
 800a728:	e7b1      	b.n	800a68e <__sflush_r+0x1a>
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	e7ad      	b.n	800a690 <__sflush_r+0x1c>
 800a734:	690f      	ldr	r7, [r1, #16]
 800a736:	2f00      	cmp	r7, #0
 800a738:	d0a9      	beq.n	800a68e <__sflush_r+0x1a>
 800a73a:	0793      	lsls	r3, r2, #30
 800a73c:	680e      	ldr	r6, [r1, #0]
 800a73e:	bf08      	it	eq
 800a740:	694b      	ldreq	r3, [r1, #20]
 800a742:	600f      	str	r7, [r1, #0]
 800a744:	bf18      	it	ne
 800a746:	2300      	movne	r3, #0
 800a748:	eba6 0807 	sub.w	r8, r6, r7
 800a74c:	608b      	str	r3, [r1, #8]
 800a74e:	f1b8 0f00 	cmp.w	r8, #0
 800a752:	dd9c      	ble.n	800a68e <__sflush_r+0x1a>
 800a754:	6a21      	ldr	r1, [r4, #32]
 800a756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a758:	4643      	mov	r3, r8
 800a75a:	463a      	mov	r2, r7
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b0      	blx	r6
 800a760:	2800      	cmp	r0, #0
 800a762:	dc06      	bgt.n	800a772 <__sflush_r+0xfe>
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	e78e      	b.n	800a690 <__sflush_r+0x1c>
 800a772:	4407      	add	r7, r0
 800a774:	eba8 0800 	sub.w	r8, r8, r0
 800a778:	e7e9      	b.n	800a74e <__sflush_r+0xda>
 800a77a:	bf00      	nop
 800a77c:	dfbffffe 	.word	0xdfbffffe

0800a780 <_fflush_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	690b      	ldr	r3, [r1, #16]
 800a784:	4605      	mov	r5, r0
 800a786:	460c      	mov	r4, r1
 800a788:	b913      	cbnz	r3, 800a790 <_fflush_r+0x10>
 800a78a:	2500      	movs	r5, #0
 800a78c:	4628      	mov	r0, r5
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	b118      	cbz	r0, 800a79a <_fflush_r+0x1a>
 800a792:	6a03      	ldr	r3, [r0, #32]
 800a794:	b90b      	cbnz	r3, 800a79a <_fflush_r+0x1a>
 800a796:	f7fe fa03 	bl	8008ba0 <__sinit>
 800a79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0f3      	beq.n	800a78a <_fflush_r+0xa>
 800a7a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7a4:	07d0      	lsls	r0, r2, #31
 800a7a6:	d404      	bmi.n	800a7b2 <_fflush_r+0x32>
 800a7a8:	0599      	lsls	r1, r3, #22
 800a7aa:	d402      	bmi.n	800a7b2 <_fflush_r+0x32>
 800a7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ae:	f7fe fb0e 	bl	8008dce <__retarget_lock_acquire_recursive>
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	f7ff ff5d 	bl	800a674 <__sflush_r>
 800a7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7bc:	07da      	lsls	r2, r3, #31
 800a7be:	4605      	mov	r5, r0
 800a7c0:	d4e4      	bmi.n	800a78c <_fflush_r+0xc>
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	059b      	lsls	r3, r3, #22
 800a7c6:	d4e1      	bmi.n	800a78c <_fflush_r+0xc>
 800a7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ca:	f7fe fb01 	bl	8008dd0 <__retarget_lock_release_recursive>
 800a7ce:	e7dd      	b.n	800a78c <_fflush_r+0xc>

0800a7d0 <memmove>:
 800a7d0:	4288      	cmp	r0, r1
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	eb01 0402 	add.w	r4, r1, r2
 800a7d8:	d902      	bls.n	800a7e0 <memmove+0x10>
 800a7da:	4284      	cmp	r4, r0
 800a7dc:	4623      	mov	r3, r4
 800a7de:	d807      	bhi.n	800a7f0 <memmove+0x20>
 800a7e0:	1e43      	subs	r3, r0, #1
 800a7e2:	42a1      	cmp	r1, r4
 800a7e4:	d008      	beq.n	800a7f8 <memmove+0x28>
 800a7e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ee:	e7f8      	b.n	800a7e2 <memmove+0x12>
 800a7f0:	4402      	add	r2, r0
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	428a      	cmp	r2, r1
 800a7f6:	d100      	bne.n	800a7fa <memmove+0x2a>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a802:	e7f7      	b.n	800a7f4 <memmove+0x24>

0800a804 <_sbrk_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d06      	ldr	r5, [pc, #24]	; (800a820 <_sbrk_r+0x1c>)
 800a808:	2300      	movs	r3, #0
 800a80a:	4604      	mov	r4, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	f7f8 fa6c 	bl	8002cec <_sbrk>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_sbrk_r+0x1a>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_sbrk_r+0x1a>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20000a5c 	.word	0x20000a5c

0800a824 <memcpy>:
 800a824:	440a      	add	r2, r1
 800a826:	4291      	cmp	r1, r2
 800a828:	f100 33ff 	add.w	r3, r0, #4294967295
 800a82c:	d100      	bne.n	800a830 <memcpy+0xc>
 800a82e:	4770      	bx	lr
 800a830:	b510      	push	{r4, lr}
 800a832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a83a:	4291      	cmp	r1, r2
 800a83c:	d1f9      	bne.n	800a832 <memcpy+0xe>
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <__assert_func>:
 800a840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a842:	4614      	mov	r4, r2
 800a844:	461a      	mov	r2, r3
 800a846:	4b09      	ldr	r3, [pc, #36]	; (800a86c <__assert_func+0x2c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4605      	mov	r5, r0
 800a84c:	68d8      	ldr	r0, [r3, #12]
 800a84e:	b14c      	cbz	r4, 800a864 <__assert_func+0x24>
 800a850:	4b07      	ldr	r3, [pc, #28]	; (800a870 <__assert_func+0x30>)
 800a852:	9100      	str	r1, [sp, #0]
 800a854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a858:	4906      	ldr	r1, [pc, #24]	; (800a874 <__assert_func+0x34>)
 800a85a:	462b      	mov	r3, r5
 800a85c:	f000 f872 	bl	800a944 <fiprintf>
 800a860:	f000 f882 	bl	800a968 <abort>
 800a864:	4b04      	ldr	r3, [pc, #16]	; (800a878 <__assert_func+0x38>)
 800a866:	461c      	mov	r4, r3
 800a868:	e7f3      	b.n	800a852 <__assert_func+0x12>
 800a86a:	bf00      	nop
 800a86c:	20000070 	.word	0x20000070
 800a870:	0800b15f 	.word	0x0800b15f
 800a874:	0800b16c 	.word	0x0800b16c
 800a878:	0800b19a 	.word	0x0800b19a

0800a87c <_calloc_r>:
 800a87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a87e:	fba1 2402 	umull	r2, r4, r1, r2
 800a882:	b94c      	cbnz	r4, 800a898 <_calloc_r+0x1c>
 800a884:	4611      	mov	r1, r2
 800a886:	9201      	str	r2, [sp, #4]
 800a888:	f7ff f994 	bl	8009bb4 <_malloc_r>
 800a88c:	9a01      	ldr	r2, [sp, #4]
 800a88e:	4605      	mov	r5, r0
 800a890:	b930      	cbnz	r0, 800a8a0 <_calloc_r+0x24>
 800a892:	4628      	mov	r0, r5
 800a894:	b003      	add	sp, #12
 800a896:	bd30      	pop	{r4, r5, pc}
 800a898:	220c      	movs	r2, #12
 800a89a:	6002      	str	r2, [r0, #0]
 800a89c:	2500      	movs	r5, #0
 800a89e:	e7f8      	b.n	800a892 <_calloc_r+0x16>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f7fe fa16 	bl	8008cd2 <memset>
 800a8a6:	e7f4      	b.n	800a892 <_calloc_r+0x16>

0800a8a8 <__ascii_mbtowc>:
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	b901      	cbnz	r1, 800a8ae <__ascii_mbtowc+0x6>
 800a8ac:	a901      	add	r1, sp, #4
 800a8ae:	b142      	cbz	r2, 800a8c2 <__ascii_mbtowc+0x1a>
 800a8b0:	b14b      	cbz	r3, 800a8c6 <__ascii_mbtowc+0x1e>
 800a8b2:	7813      	ldrb	r3, [r2, #0]
 800a8b4:	600b      	str	r3, [r1, #0]
 800a8b6:	7812      	ldrb	r2, [r2, #0]
 800a8b8:	1e10      	subs	r0, r2, #0
 800a8ba:	bf18      	it	ne
 800a8bc:	2001      	movne	r0, #1
 800a8be:	b002      	add	sp, #8
 800a8c0:	4770      	bx	lr
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	e7fb      	b.n	800a8be <__ascii_mbtowc+0x16>
 800a8c6:	f06f 0001 	mvn.w	r0, #1
 800a8ca:	e7f8      	b.n	800a8be <__ascii_mbtowc+0x16>

0800a8cc <_realloc_r>:
 800a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	460e      	mov	r6, r1
 800a8d6:	b921      	cbnz	r1, 800a8e2 <_realloc_r+0x16>
 800a8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	4611      	mov	r1, r2
 800a8de:	f7ff b969 	b.w	8009bb4 <_malloc_r>
 800a8e2:	b92a      	cbnz	r2, 800a8f0 <_realloc_r+0x24>
 800a8e4:	f7ff f8f2 	bl	8009acc <_free_r>
 800a8e8:	4625      	mov	r5, r4
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f0:	f000 f841 	bl	800a976 <_malloc_usable_size_r>
 800a8f4:	4284      	cmp	r4, r0
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	d802      	bhi.n	800a900 <_realloc_r+0x34>
 800a8fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8fe:	d812      	bhi.n	800a926 <_realloc_r+0x5a>
 800a900:	4621      	mov	r1, r4
 800a902:	4640      	mov	r0, r8
 800a904:	f7ff f956 	bl	8009bb4 <_malloc_r>
 800a908:	4605      	mov	r5, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d0ed      	beq.n	800a8ea <_realloc_r+0x1e>
 800a90e:	42bc      	cmp	r4, r7
 800a910:	4622      	mov	r2, r4
 800a912:	4631      	mov	r1, r6
 800a914:	bf28      	it	cs
 800a916:	463a      	movcs	r2, r7
 800a918:	f7ff ff84 	bl	800a824 <memcpy>
 800a91c:	4631      	mov	r1, r6
 800a91e:	4640      	mov	r0, r8
 800a920:	f7ff f8d4 	bl	8009acc <_free_r>
 800a924:	e7e1      	b.n	800a8ea <_realloc_r+0x1e>
 800a926:	4635      	mov	r5, r6
 800a928:	e7df      	b.n	800a8ea <_realloc_r+0x1e>

0800a92a <__ascii_wctomb>:
 800a92a:	b149      	cbz	r1, 800a940 <__ascii_wctomb+0x16>
 800a92c:	2aff      	cmp	r2, #255	; 0xff
 800a92e:	bf85      	ittet	hi
 800a930:	238a      	movhi	r3, #138	; 0x8a
 800a932:	6003      	strhi	r3, [r0, #0]
 800a934:	700a      	strbls	r2, [r1, #0]
 800a936:	f04f 30ff 	movhi.w	r0, #4294967295
 800a93a:	bf98      	it	ls
 800a93c:	2001      	movls	r0, #1
 800a93e:	4770      	bx	lr
 800a940:	4608      	mov	r0, r1
 800a942:	4770      	bx	lr

0800a944 <fiprintf>:
 800a944:	b40e      	push	{r1, r2, r3}
 800a946:	b503      	push	{r0, r1, lr}
 800a948:	4601      	mov	r1, r0
 800a94a:	ab03      	add	r3, sp, #12
 800a94c:	4805      	ldr	r0, [pc, #20]	; (800a964 <fiprintf+0x20>)
 800a94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a952:	6800      	ldr	r0, [r0, #0]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	f000 f83f 	bl	800a9d8 <_vfiprintf_r>
 800a95a:	b002      	add	sp, #8
 800a95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a960:	b003      	add	sp, #12
 800a962:	4770      	bx	lr
 800a964:	20000070 	.word	0x20000070

0800a968 <abort>:
 800a968:	b508      	push	{r3, lr}
 800a96a:	2006      	movs	r0, #6
 800a96c:	f000 fa0c 	bl	800ad88 <raise>
 800a970:	2001      	movs	r0, #1
 800a972:	f7f8 f943 	bl	8002bfc <_exit>

0800a976 <_malloc_usable_size_r>:
 800a976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97a:	1f18      	subs	r0, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfbc      	itt	lt
 800a980:	580b      	ldrlt	r3, [r1, r0]
 800a982:	18c0      	addlt	r0, r0, r3
 800a984:	4770      	bx	lr

0800a986 <__sfputc_r>:
 800a986:	6893      	ldr	r3, [r2, #8]
 800a988:	3b01      	subs	r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	b410      	push	{r4}
 800a98e:	6093      	str	r3, [r2, #8]
 800a990:	da08      	bge.n	800a9a4 <__sfputc_r+0x1e>
 800a992:	6994      	ldr	r4, [r2, #24]
 800a994:	42a3      	cmp	r3, r4
 800a996:	db01      	blt.n	800a99c <__sfputc_r+0x16>
 800a998:	290a      	cmp	r1, #10
 800a99a:	d103      	bne.n	800a9a4 <__sfputc_r+0x1e>
 800a99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a0:	f000 b934 	b.w	800ac0c <__swbuf_r>
 800a9a4:	6813      	ldr	r3, [r2, #0]
 800a9a6:	1c58      	adds	r0, r3, #1
 800a9a8:	6010      	str	r0, [r2, #0]
 800a9aa:	7019      	strb	r1, [r3, #0]
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <__sfputs_r>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	4614      	mov	r4, r2
 800a9bc:	18d5      	adds	r5, r2, r3
 800a9be:	42ac      	cmp	r4, r5
 800a9c0:	d101      	bne.n	800a9c6 <__sfputs_r+0x12>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e007      	b.n	800a9d6 <__sfputs_r+0x22>
 800a9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7ff ffda 	bl	800a986 <__sfputc_r>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d1f3      	bne.n	800a9be <__sfputs_r+0xa>
 800a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9d8 <_vfiprintf_r>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	460d      	mov	r5, r1
 800a9de:	b09d      	sub	sp, #116	; 0x74
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	4698      	mov	r8, r3
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	b118      	cbz	r0, 800a9f0 <_vfiprintf_r+0x18>
 800a9e8:	6a03      	ldr	r3, [r0, #32]
 800a9ea:	b90b      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x18>
 800a9ec:	f7fe f8d8 	bl	8008ba0 <__sinit>
 800a9f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_vfiprintf_r+0x2a>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_vfiprintf_r+0x2a>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fe:	f7fe f9e6 	bl	8008dce <__retarget_lock_acquire_recursive>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	071b      	lsls	r3, r3, #28
 800aa06:	d501      	bpl.n	800aa0c <_vfiprintf_r+0x34>
 800aa08:	692b      	ldr	r3, [r5, #16]
 800aa0a:	b99b      	cbnz	r3, 800aa34 <_vfiprintf_r+0x5c>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 f93a 	bl	800ac88 <__swsetup_r>
 800aa14:	b170      	cbz	r0, 800aa34 <_vfiprintf_r+0x5c>
 800aa16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa18:	07dc      	lsls	r4, r3, #31
 800aa1a:	d504      	bpl.n	800aa26 <_vfiprintf_r+0x4e>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b01d      	add	sp, #116	; 0x74
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	0598      	lsls	r0, r3, #22
 800aa2a:	d4f7      	bmi.n	800aa1c <_vfiprintf_r+0x44>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa2e:	f7fe f9cf 	bl	8008dd0 <__retarget_lock_release_recursive>
 800aa32:	e7f3      	b.n	800aa1c <_vfiprintf_r+0x44>
 800aa34:	2300      	movs	r3, #0
 800aa36:	9309      	str	r3, [sp, #36]	; 0x24
 800aa38:	2320      	movs	r3, #32
 800aa3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa42:	2330      	movs	r3, #48	; 0x30
 800aa44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800abf8 <_vfiprintf_r+0x220>
 800aa48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa4c:	f04f 0901 	mov.w	r9, #1
 800aa50:	4623      	mov	r3, r4
 800aa52:	469a      	mov	sl, r3
 800aa54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa58:	b10a      	cbz	r2, 800aa5e <_vfiprintf_r+0x86>
 800aa5a:	2a25      	cmp	r2, #37	; 0x25
 800aa5c:	d1f9      	bne.n	800aa52 <_vfiprintf_r+0x7a>
 800aa5e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa62:	d00b      	beq.n	800aa7c <_vfiprintf_r+0xa4>
 800aa64:	465b      	mov	r3, fp
 800aa66:	4622      	mov	r2, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ffa2 	bl	800a9b4 <__sfputs_r>
 800aa70:	3001      	adds	r0, #1
 800aa72:	f000 80a9 	beq.w	800abc8 <_vfiprintf_r+0x1f0>
 800aa76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa78:	445a      	add	r2, fp
 800aa7a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa7c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80a1 	beq.w	800abc8 <_vfiprintf_r+0x1f0>
 800aa86:	2300      	movs	r3, #0
 800aa88:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa90:	f10a 0a01 	add.w	sl, sl, #1
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	9307      	str	r3, [sp, #28]
 800aa98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa9c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	2205      	movs	r2, #5
 800aaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa6:	4854      	ldr	r0, [pc, #336]	; (800abf8 <_vfiprintf_r+0x220>)
 800aaa8:	f7f5 fbb2 	bl	8000210 <memchr>
 800aaac:	9a04      	ldr	r2, [sp, #16]
 800aaae:	b9d8      	cbnz	r0, 800aae8 <_vfiprintf_r+0x110>
 800aab0:	06d1      	lsls	r1, r2, #27
 800aab2:	bf44      	itt	mi
 800aab4:	2320      	movmi	r3, #32
 800aab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaba:	0713      	lsls	r3, r2, #28
 800aabc:	bf44      	itt	mi
 800aabe:	232b      	movmi	r3, #43	; 0x2b
 800aac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac4:	f89a 3000 	ldrb.w	r3, [sl]
 800aac8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaca:	d015      	beq.n	800aaf8 <_vfiprintf_r+0x120>
 800aacc:	9a07      	ldr	r2, [sp, #28]
 800aace:	4654      	mov	r4, sl
 800aad0:	2000      	movs	r0, #0
 800aad2:	f04f 0c0a 	mov.w	ip, #10
 800aad6:	4621      	mov	r1, r4
 800aad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aadc:	3b30      	subs	r3, #48	; 0x30
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d94d      	bls.n	800ab7e <_vfiprintf_r+0x1a6>
 800aae2:	b1b0      	cbz	r0, 800ab12 <_vfiprintf_r+0x13a>
 800aae4:	9207      	str	r2, [sp, #28]
 800aae6:	e014      	b.n	800ab12 <_vfiprintf_r+0x13a>
 800aae8:	eba0 0308 	sub.w	r3, r0, r8
 800aaec:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	46a2      	mov	sl, r4
 800aaf6:	e7d2      	b.n	800aa9e <_vfiprintf_r+0xc6>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	1d19      	adds	r1, r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	9103      	str	r1, [sp, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bfbb      	ittet	lt
 800ab04:	425b      	neglt	r3, r3
 800ab06:	f042 0202 	orrlt.w	r2, r2, #2
 800ab0a:	9307      	strge	r3, [sp, #28]
 800ab0c:	9307      	strlt	r3, [sp, #28]
 800ab0e:	bfb8      	it	lt
 800ab10:	9204      	strlt	r2, [sp, #16]
 800ab12:	7823      	ldrb	r3, [r4, #0]
 800ab14:	2b2e      	cmp	r3, #46	; 0x2e
 800ab16:	d10c      	bne.n	800ab32 <_vfiprintf_r+0x15a>
 800ab18:	7863      	ldrb	r3, [r4, #1]
 800ab1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1c:	d134      	bne.n	800ab88 <_vfiprintf_r+0x1b0>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d1a      	adds	r2, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9203      	str	r2, [sp, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bfb8      	it	lt
 800ab2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab2e:	3402      	adds	r4, #2
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ac08 <_vfiprintf_r+0x230>
 800ab36:	7821      	ldrb	r1, [r4, #0]
 800ab38:	2203      	movs	r2, #3
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	f7f5 fb68 	bl	8000210 <memchr>
 800ab40:	b138      	cbz	r0, 800ab52 <_vfiprintf_r+0x17a>
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	eba0 000a 	sub.w	r0, r0, sl
 800ab48:	2240      	movs	r2, #64	; 0x40
 800ab4a:	4082      	lsls	r2, r0
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	3401      	adds	r4, #1
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab56:	4829      	ldr	r0, [pc, #164]	; (800abfc <_vfiprintf_r+0x224>)
 800ab58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab5c:	2206      	movs	r2, #6
 800ab5e:	f7f5 fb57 	bl	8000210 <memchr>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d03f      	beq.n	800abe6 <_vfiprintf_r+0x20e>
 800ab66:	4b26      	ldr	r3, [pc, #152]	; (800ac00 <_vfiprintf_r+0x228>)
 800ab68:	bb1b      	cbnz	r3, 800abb2 <_vfiprintf_r+0x1da>
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	3307      	adds	r3, #7
 800ab6e:	f023 0307 	bic.w	r3, r3, #7
 800ab72:	3308      	adds	r3, #8
 800ab74:	9303      	str	r3, [sp, #12]
 800ab76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab78:	443b      	add	r3, r7
 800ab7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7c:	e768      	b.n	800aa50 <_vfiprintf_r+0x78>
 800ab7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab82:	460c      	mov	r4, r1
 800ab84:	2001      	movs	r0, #1
 800ab86:	e7a6      	b.n	800aad6 <_vfiprintf_r+0xfe>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	3401      	adds	r4, #1
 800ab8c:	9305      	str	r3, [sp, #20]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	f04f 0c0a 	mov.w	ip, #10
 800ab94:	4620      	mov	r0, r4
 800ab96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab9a:	3a30      	subs	r2, #48	; 0x30
 800ab9c:	2a09      	cmp	r2, #9
 800ab9e:	d903      	bls.n	800aba8 <_vfiprintf_r+0x1d0>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0c6      	beq.n	800ab32 <_vfiprintf_r+0x15a>
 800aba4:	9105      	str	r1, [sp, #20]
 800aba6:	e7c4      	b.n	800ab32 <_vfiprintf_r+0x15a>
 800aba8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abac:	4604      	mov	r4, r0
 800abae:	2301      	movs	r3, #1
 800abb0:	e7f0      	b.n	800ab94 <_vfiprintf_r+0x1bc>
 800abb2:	ab03      	add	r3, sp, #12
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	462a      	mov	r2, r5
 800abb8:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <_vfiprintf_r+0x22c>)
 800abba:	a904      	add	r1, sp, #16
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7fd fb9d 	bl	80082fc <_printf_float>
 800abc2:	4607      	mov	r7, r0
 800abc4:	1c78      	adds	r0, r7, #1
 800abc6:	d1d6      	bne.n	800ab76 <_vfiprintf_r+0x19e>
 800abc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abca:	07d9      	lsls	r1, r3, #31
 800abcc:	d405      	bmi.n	800abda <_vfiprintf_r+0x202>
 800abce:	89ab      	ldrh	r3, [r5, #12]
 800abd0:	059a      	lsls	r2, r3, #22
 800abd2:	d402      	bmi.n	800abda <_vfiprintf_r+0x202>
 800abd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd6:	f7fe f8fb 	bl	8008dd0 <__retarget_lock_release_recursive>
 800abda:	89ab      	ldrh	r3, [r5, #12]
 800abdc:	065b      	lsls	r3, r3, #25
 800abde:	f53f af1d 	bmi.w	800aa1c <_vfiprintf_r+0x44>
 800abe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abe4:	e71c      	b.n	800aa20 <_vfiprintf_r+0x48>
 800abe6:	ab03      	add	r3, sp, #12
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	462a      	mov	r2, r5
 800abec:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <_vfiprintf_r+0x22c>)
 800abee:	a904      	add	r1, sp, #16
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7fd fe27 	bl	8008844 <_printf_i>
 800abf6:	e7e4      	b.n	800abc2 <_vfiprintf_r+0x1ea>
 800abf8:	0800b144 	.word	0x0800b144
 800abfc:	0800b14e 	.word	0x0800b14e
 800ac00:	080082fd 	.word	0x080082fd
 800ac04:	0800a9b5 	.word	0x0800a9b5
 800ac08:	0800b14a 	.word	0x0800b14a

0800ac0c <__swbuf_r>:
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	460e      	mov	r6, r1
 800ac10:	4614      	mov	r4, r2
 800ac12:	4605      	mov	r5, r0
 800ac14:	b118      	cbz	r0, 800ac1e <__swbuf_r+0x12>
 800ac16:	6a03      	ldr	r3, [r0, #32]
 800ac18:	b90b      	cbnz	r3, 800ac1e <__swbuf_r+0x12>
 800ac1a:	f7fd ffc1 	bl	8008ba0 <__sinit>
 800ac1e:	69a3      	ldr	r3, [r4, #24]
 800ac20:	60a3      	str	r3, [r4, #8]
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	071a      	lsls	r2, r3, #28
 800ac26:	d525      	bpl.n	800ac74 <__swbuf_r+0x68>
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	b31b      	cbz	r3, 800ac74 <__swbuf_r+0x68>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	6922      	ldr	r2, [r4, #16]
 800ac30:	1a98      	subs	r0, r3, r2
 800ac32:	6963      	ldr	r3, [r4, #20]
 800ac34:	b2f6      	uxtb	r6, r6
 800ac36:	4283      	cmp	r3, r0
 800ac38:	4637      	mov	r7, r6
 800ac3a:	dc04      	bgt.n	800ac46 <__swbuf_r+0x3a>
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f7ff fd9e 	bl	800a780 <_fflush_r>
 800ac44:	b9e0      	cbnz	r0, 800ac80 <__swbuf_r+0x74>
 800ac46:	68a3      	ldr	r3, [r4, #8]
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	60a3      	str	r3, [r4, #8]
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	6022      	str	r2, [r4, #0]
 800ac52:	701e      	strb	r6, [r3, #0]
 800ac54:	6962      	ldr	r2, [r4, #20]
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d004      	beq.n	800ac66 <__swbuf_r+0x5a>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	07db      	lsls	r3, r3, #31
 800ac60:	d506      	bpl.n	800ac70 <__swbuf_r+0x64>
 800ac62:	2e0a      	cmp	r6, #10
 800ac64:	d104      	bne.n	800ac70 <__swbuf_r+0x64>
 800ac66:	4621      	mov	r1, r4
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f7ff fd89 	bl	800a780 <_fflush_r>
 800ac6e:	b938      	cbnz	r0, 800ac80 <__swbuf_r+0x74>
 800ac70:	4638      	mov	r0, r7
 800ac72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 f806 	bl	800ac88 <__swsetup_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d0d5      	beq.n	800ac2c <__swbuf_r+0x20>
 800ac80:	f04f 37ff 	mov.w	r7, #4294967295
 800ac84:	e7f4      	b.n	800ac70 <__swbuf_r+0x64>
	...

0800ac88 <__swsetup_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4b2a      	ldr	r3, [pc, #168]	; (800ad34 <__swsetup_r+0xac>)
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	460c      	mov	r4, r1
 800ac92:	b118      	cbz	r0, 800ac9c <__swsetup_r+0x14>
 800ac94:	6a03      	ldr	r3, [r0, #32]
 800ac96:	b90b      	cbnz	r3, 800ac9c <__swsetup_r+0x14>
 800ac98:	f7fd ff82 	bl	8008ba0 <__sinit>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aca2:	0718      	lsls	r0, r3, #28
 800aca4:	d422      	bmi.n	800acec <__swsetup_r+0x64>
 800aca6:	06d9      	lsls	r1, r3, #27
 800aca8:	d407      	bmi.n	800acba <__swsetup_r+0x32>
 800acaa:	2309      	movs	r3, #9
 800acac:	602b      	str	r3, [r5, #0]
 800acae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e034      	b.n	800ad24 <__swsetup_r+0x9c>
 800acba:	0758      	lsls	r0, r3, #29
 800acbc:	d512      	bpl.n	800ace4 <__swsetup_r+0x5c>
 800acbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acc0:	b141      	cbz	r1, 800acd4 <__swsetup_r+0x4c>
 800acc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d002      	beq.n	800acd0 <__swsetup_r+0x48>
 800acca:	4628      	mov	r0, r5
 800accc:	f7fe fefe 	bl	8009acc <_free_r>
 800acd0:	2300      	movs	r3, #0
 800acd2:	6363      	str	r3, [r4, #52]	; 0x34
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	2300      	movs	r3, #0
 800acde:	6063      	str	r3, [r4, #4]
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	f043 0308 	orr.w	r3, r3, #8
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	b94b      	cbnz	r3, 800ad04 <__swsetup_r+0x7c>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acfa:	d003      	beq.n	800ad04 <__swsetup_r+0x7c>
 800acfc:	4621      	mov	r1, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 f884 	bl	800ae0c <__smakebuf_r>
 800ad04:	89a0      	ldrh	r0, [r4, #12]
 800ad06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad0a:	f010 0301 	ands.w	r3, r0, #1
 800ad0e:	d00a      	beq.n	800ad26 <__swsetup_r+0x9e>
 800ad10:	2300      	movs	r3, #0
 800ad12:	60a3      	str	r3, [r4, #8]
 800ad14:	6963      	ldr	r3, [r4, #20]
 800ad16:	425b      	negs	r3, r3
 800ad18:	61a3      	str	r3, [r4, #24]
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	b943      	cbnz	r3, 800ad30 <__swsetup_r+0xa8>
 800ad1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad22:	d1c4      	bne.n	800acae <__swsetup_r+0x26>
 800ad24:	bd38      	pop	{r3, r4, r5, pc}
 800ad26:	0781      	lsls	r1, r0, #30
 800ad28:	bf58      	it	pl
 800ad2a:	6963      	ldrpl	r3, [r4, #20]
 800ad2c:	60a3      	str	r3, [r4, #8]
 800ad2e:	e7f4      	b.n	800ad1a <__swsetup_r+0x92>
 800ad30:	2000      	movs	r0, #0
 800ad32:	e7f7      	b.n	800ad24 <__swsetup_r+0x9c>
 800ad34:	20000070 	.word	0x20000070

0800ad38 <_raise_r>:
 800ad38:	291f      	cmp	r1, #31
 800ad3a:	b538      	push	{r3, r4, r5, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	d904      	bls.n	800ad4c <_raise_r+0x14>
 800ad42:	2316      	movs	r3, #22
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ad4e:	b112      	cbz	r2, 800ad56 <_raise_r+0x1e>
 800ad50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad54:	b94b      	cbnz	r3, 800ad6a <_raise_r+0x32>
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 f830 	bl	800adbc <_getpid_r>
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4601      	mov	r1, r0
 800ad60:	4620      	mov	r0, r4
 800ad62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad66:	f000 b817 	b.w	800ad98 <_kill_r>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d00a      	beq.n	800ad84 <_raise_r+0x4c>
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	d103      	bne.n	800ad7a <_raise_r+0x42>
 800ad72:	2316      	movs	r3, #22
 800ad74:	6003      	str	r3, [r0, #0]
 800ad76:	2001      	movs	r0, #1
 800ad78:	e7e7      	b.n	800ad4a <_raise_r+0x12>
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad80:	4628      	mov	r0, r5
 800ad82:	4798      	blx	r3
 800ad84:	2000      	movs	r0, #0
 800ad86:	e7e0      	b.n	800ad4a <_raise_r+0x12>

0800ad88 <raise>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	; (800ad94 <raise+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f7ff bfd3 	b.w	800ad38 <_raise_r>
 800ad92:	bf00      	nop
 800ad94:	20000070 	.word	0x20000070

0800ad98 <_kill_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	4d07      	ldr	r5, [pc, #28]	; (800adb8 <_kill_r+0x20>)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	4611      	mov	r1, r2
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f7f7 ff19 	bl	8002bdc <_kill>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d102      	bne.n	800adb4 <_kill_r+0x1c>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	b103      	cbz	r3, 800adb4 <_kill_r+0x1c>
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
 800adb6:	bf00      	nop
 800adb8:	20000a5c 	.word	0x20000a5c

0800adbc <_getpid_r>:
 800adbc:	f7f7 bf06 	b.w	8002bcc <_getpid>

0800adc0 <__swhatbuf_r>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	2900      	cmp	r1, #0
 800adca:	b096      	sub	sp, #88	; 0x58
 800adcc:	4615      	mov	r5, r2
 800adce:	461e      	mov	r6, r3
 800add0:	da0d      	bge.n	800adee <__swhatbuf_r+0x2e>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800add8:	f04f 0100 	mov.w	r1, #0
 800addc:	bf0c      	ite	eq
 800adde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ade2:	2340      	movne	r3, #64	; 0x40
 800ade4:	2000      	movs	r0, #0
 800ade6:	6031      	str	r1, [r6, #0]
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	b016      	add	sp, #88	; 0x58
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	466a      	mov	r2, sp
 800adf0:	f000 f848 	bl	800ae84 <_fstat_r>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	dbec      	blt.n	800add2 <__swhatbuf_r+0x12>
 800adf8:	9901      	ldr	r1, [sp, #4]
 800adfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800adfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae02:	4259      	negs	r1, r3
 800ae04:	4159      	adcs	r1, r3
 800ae06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae0a:	e7eb      	b.n	800ade4 <__swhatbuf_r+0x24>

0800ae0c <__smakebuf_r>:
 800ae0c:	898b      	ldrh	r3, [r1, #12]
 800ae0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae10:	079d      	lsls	r5, r3, #30
 800ae12:	4606      	mov	r6, r0
 800ae14:	460c      	mov	r4, r1
 800ae16:	d507      	bpl.n	800ae28 <__smakebuf_r+0x1c>
 800ae18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	2301      	movs	r3, #1
 800ae22:	6163      	str	r3, [r4, #20]
 800ae24:	b002      	add	sp, #8
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	ab01      	add	r3, sp, #4
 800ae2a:	466a      	mov	r2, sp
 800ae2c:	f7ff ffc8 	bl	800adc0 <__swhatbuf_r>
 800ae30:	9900      	ldr	r1, [sp, #0]
 800ae32:	4605      	mov	r5, r0
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7fe febd 	bl	8009bb4 <_malloc_r>
 800ae3a:	b948      	cbnz	r0, 800ae50 <__smakebuf_r+0x44>
 800ae3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d4ef      	bmi.n	800ae24 <__smakebuf_r+0x18>
 800ae44:	f023 0303 	bic.w	r3, r3, #3
 800ae48:	f043 0302 	orr.w	r3, r3, #2
 800ae4c:	81a3      	strh	r3, [r4, #12]
 800ae4e:	e7e3      	b.n	800ae18 <__smakebuf_r+0xc>
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	6020      	str	r0, [r4, #0]
 800ae54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	9b00      	ldr	r3, [sp, #0]
 800ae5c:	6163      	str	r3, [r4, #20]
 800ae5e:	9b01      	ldr	r3, [sp, #4]
 800ae60:	6120      	str	r0, [r4, #16]
 800ae62:	b15b      	cbz	r3, 800ae7c <__smakebuf_r+0x70>
 800ae64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f000 f81d 	bl	800aea8 <_isatty_r>
 800ae6e:	b128      	cbz	r0, 800ae7c <__smakebuf_r+0x70>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f023 0303 	bic.w	r3, r3, #3
 800ae76:	f043 0301 	orr.w	r3, r3, #1
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	431d      	orrs	r5, r3
 800ae80:	81a5      	strh	r5, [r4, #12]
 800ae82:	e7cf      	b.n	800ae24 <__smakebuf_r+0x18>

0800ae84 <_fstat_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4d07      	ldr	r5, [pc, #28]	; (800aea4 <_fstat_r+0x20>)
 800ae88:	2300      	movs	r3, #0
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	4611      	mov	r1, r2
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	f7f7 ff02 	bl	8002c9a <_fstat>
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d102      	bne.n	800aea0 <_fstat_r+0x1c>
 800ae9a:	682b      	ldr	r3, [r5, #0]
 800ae9c:	b103      	cbz	r3, 800aea0 <_fstat_r+0x1c>
 800ae9e:	6023      	str	r3, [r4, #0]
 800aea0:	bd38      	pop	{r3, r4, r5, pc}
 800aea2:	bf00      	nop
 800aea4:	20000a5c 	.word	0x20000a5c

0800aea8 <_isatty_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	4d06      	ldr	r5, [pc, #24]	; (800aec4 <_isatty_r+0x1c>)
 800aeac:	2300      	movs	r3, #0
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	602b      	str	r3, [r5, #0]
 800aeb4:	f7f7 ff01 	bl	8002cba <_isatty>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_isatty_r+0x1a>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_isatty_r+0x1a>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	20000a5c 	.word	0x20000a5c

0800aec8 <_init>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr

0800aed4 <_fini>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	bf00      	nop
 800aed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeda:	bc08      	pop	{r3}
 800aedc:	469e      	mov	lr, r3
 800aede:	4770      	bx	lr
